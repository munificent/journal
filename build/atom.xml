<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>journal.stuffwithstuff.com</title>
  <link href="http://journal.stuffwithstuff.com/"/>
  <link type="application/atom+xml" rel="self" href="http://journal.stuffwithstuff.com/atom.xml"/>
  <updated>2025-06-20T16:13:00.293168Z</updated>
  <id>http://journal.stuffwithstuff.com/</id>
  <author>
    <name>Robert Nystrom</name>
    <email>robert@stuffwithstuff.com</email>
  </author>


  <entry>
    <id>http://journal.stuffwithstuff.com/2025/05/30/consider-knitting</id>
    <link type="text/html" rel="alternate" href="http://journal.stuffwithstuff.com/2025/05/30/consider-knitting/"/>
    <title>Consider Knitting</title>
    <published>2025-05-30T07:00:00.000Z</published>
    <updated>2025-05-30T07:00:00.000Z</updated>
    <author>
      <name>Robert Nystrom</name>
      <uri>http://journal.stuffwithstuff.com/</uri>
    </author>
    <content type="html">&lt;p&gt;Let&amp;rsquo;s say that, like me, you are a person who stares at a computer and writes
code for a living. As a straight male who grew up in a time where knitting was
very strongly female coded, it for the most part never occurred to me that
knitting was a thing I could do and might enjoy. Regardless of your demographic
categories and background, it&amp;rsquo;s possible that you have also not really
considered knitting.&lt;/p&gt;

&lt;p&gt;This article exists to get you to do so. Specifically, I&amp;rsquo;ll try to convince you,
one software person to another, why it might be a good fit for your life and
brain. This is a pitch for knitting, but&amp;mdash;for better or worse&amp;mdash;an extremely
nerdily argued one.&lt;/p&gt;

&lt;p&gt;Before I start, note that when I say &amp;ldquo;knitting&amp;rdquo;, you can read that as any of the
various &lt;a href=&quot;https://en.wikipedia.org/wiki/Fiber_art&quot;&gt;fiber arts&lt;/a&gt;, including crochet, weaving, macram√©, cross-stitch, etc.
I talk about knitting here because that&amp;rsquo;s the one closest to my heart and I
strive to speak from the heart. You can make stuff out of string however you
want. We are all fiber friends.&lt;/p&gt;

&lt;h2&gt;The sense of touch&lt;/h2&gt;

&lt;p&gt;I love the aesthetics of programming. Sitting in a cool quiet room, techno
thumping in my headphones, coffee mug next to me, while a neatly arranged field
of glowing monospace glyphs stream across my screen. But there&amp;rsquo;s one sense
unmentioned in that sentence: touch. The sense we devote more neurons to than
any other is curiously underutilized while pumping out code.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s no surprise that some programmers &lt;a href=&quot;https://www.reddit.com/r/CustomKeyboards/&quot;&gt;fetishize&lt;/a&gt; &lt;a href=&quot;https://www.reddit.com/r/MechanicalKeyboards/&quot;&gt;keyboards&lt;/a&gt;. It&amp;rsquo;s just about the only part of programming that has any physical sensation &lt;em&gt;at all&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I got into knitting a few years after the pandemic. While I have a variety of
hobbies, most are still staring at a screen and maybe &lt;a href=&quot;https://tinywir.es/&quot;&gt;pushing some buttons and
turning knobs&lt;/a&gt;. When I wasn&amp;rsquo;t doing those, I was staring at a screen
for work, or staring at a screen for &lt;a href=&quot;https://www.reddit.com/r/memes/comments/f6omv0/enjoying_some_good_screen_now/&quot;&gt;not-work&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t know if I have a good way to explain how much my body craved tactile
experience by the end of that. It&amp;rsquo;s like my fingers ached. A deep hunger, but
not for taste. I&amp;rsquo;d wander around the house, driving my wife insane, unable to
sit down and get comfortable. My body was just screaming at me to &lt;em&gt;do
something.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;My youngest daughter had just picked up knitting, and she taught me. At first it
was frustrating and annoying. But once I had the basics down, it was like a a
deep sigh felt in my hands. Knitting is &lt;em&gt;so&lt;/em&gt; touch-centered. Skilled knitters
can knit without looking at their hands at all&amp;mdash;touch alone is sufficient.&lt;/p&gt;

&lt;p&gt;There are so many different kinds of yarn to work with and they all feel
different. Cotton is tough and firm, like twine. Wool is soft and springy,
forgiving as you pull stitches open to work them. Superwash wool is smooth and
glides off the needles. Non-superwash wool has this very slight stickiness to it
that makes the resulting fabric feel solid and whole. Thin fingering weight yarn
wraps tightly around your finger like a reminder knot. Working it is like
performing delicate surgery. Squishy chunky wool spreads your fingers wide and
works so quickly it&amp;rsquo;s like fabric is spooling out of your hands on its own
accord.&lt;/p&gt;

&lt;p&gt;Even needles each have their own personality. Stiff grippy bamboo with its dull
clack. Less worrisome to use because stitches don&amp;rsquo;t slide off as easily, but
harder work to push against the friction. Polished stainless steel where the
stitches just fly off the needles&amp;mdash;good when you are done with those stitches
but not so much otherwise.&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;ve worked a few thousand stitches into your muscle memory, you can
watch your fingers form stitches almost of their own accord, hypnotically. Right
needle opens the stitch and slides in. Left finger wraps the yarn around the
needle. Right finger grabs yarn. Right hand pulls the needle back out, a new
stitch formed and transferred to the other needle. Over and over, like a
meditation in the body.&lt;/p&gt;

&lt;p&gt;Knitting &lt;em&gt;feels good&lt;/em&gt;. It is an intimate, constant reminder that we are a tool-using species with thousands of years of evolution giving us incredible dexterity and the emotional wiring to make us want to use it.&lt;/p&gt;

&lt;h2&gt;An open world game with optimized skill curve&lt;/h2&gt;

&lt;p&gt;Of course, you could get much of that same tactile joy by driving to your
nearest yarn store and wandering around the aisles jamming your fingers into
every ball and skein of yarn they have. (An activity I certainly &lt;em&gt;also&lt;/em&gt; do and
highly recommend.) Knitting isn&amp;rsquo;t just about having a hedonistic tactile
experience. It is a skilled art with an unbelievably deep lore.&lt;/p&gt;

&lt;p&gt;I &lt;a href=&quot;https://www.mobygames.com/person/102093/bob-nystrom/&quot;&gt;used to be a game programmer&lt;/a&gt;, and I tend to look at a lot of
activities through the lens of game design. Games are interesting because they
are user experience distilled to its essence. When you are, say, using a banking
app to transfer some money into savings, there is a user experience in play. But
there&amp;rsquo;s also a &lt;em&gt;utility&lt;/em&gt;, a real effect you are trying to have in the material
world. You may use your banking app and be satisfied that it helps you save
money even if the UX is trash.&lt;/p&gt;

&lt;p&gt;But a game, almost by definition, doesn&amp;rsquo;t &lt;em&gt;do&lt;/em&gt; anything &amp;ldquo;out there&amp;rdquo;. Aside from
leaderboards and stuff, the point of a game is to be a low-stakes sandbox where
you can play without, you know, accidentally deleting money out of your bank
account. Because of that, it&amp;rsquo;s a pure user experience. All experience and
nothing else.&lt;/p&gt;

&lt;p&gt;Therefore, skilled game designers are possibly the best user experience
designers in the world, and the tools they use to think about game design are
useful lenses to evaluate just about any kind of human endeavor.&lt;/p&gt;

&lt;p&gt;Two aspects (at least) are relevant to knitting.&lt;/p&gt;

&lt;h3&gt;Linearity&lt;/h3&gt;

&lt;p&gt;A game is &amp;ldquo;linear&amp;rdquo; if there&amp;rsquo;s only one path from beginning to end, one way to
play. Don&amp;rsquo;t particularly enjoy the desert level? Tough shit, you gotta get
through it to get to the end. &amp;ldquo;Nonlinear&amp;rdquo; games let players choose among
multiple paths to reach the end. &amp;ldquo;Open world&amp;rdquo; or &amp;ldquo;sandbox&amp;rdquo; games blow the
gameplay wide open and let players go where they want when they want. The game
may not even &lt;em&gt;have&lt;/em&gt; an &amp;ldquo;end&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Knitting is an open world game. There are all sorts of objects you can make out
of yarn, and all sorts of styles and techniques to make them. Don&amp;rsquo;t like socks?
Fine, you don&amp;rsquo;t ever have to go through a &amp;ldquo;sock making phase&amp;rdquo; to graduate into
what you really want to make. Find stranded colorwork too fiddly? There&amp;rsquo;s
intarsia or just buy a ball of self-striping yarn and let the yarn change
colors for you. Is a sweater too big of a commitment? You can make hats forever.&lt;/p&gt;

&lt;p&gt;Once you get past the very basics of getting loops on the needles and making
stitches, knitting very rarely forces you to slog through something you don&amp;rsquo;t
want to do in order to reach some other goal. Except weaving in ends, I guess,
which is kind of a chore. But, honestly, it&amp;rsquo;s not that bad.&lt;/p&gt;

&lt;h3&gt;Skill curve&lt;/h3&gt;

&lt;p&gt;A skill curve is sort of like a learning curve. It&amp;rsquo;s an imaginary graph of how
much effort it takes to reach greater and more rewarding levels of skill. Some
skill curves are steep at the beginning and then flatten out once you&amp;rsquo;re over
the hump. When you first start playing guitar and don&amp;rsquo;t have the hand strength,
callouses, or dexterity to form chords, it&amp;rsquo;s &lt;em&gt;really&lt;/em&gt; hard. But after a few days
you can get the basics down. Then it&amp;rsquo;s pretty easy to learn more and more chords
after that.&lt;/p&gt;

&lt;p&gt;Other skill curves start shallow and get steeper. You can learn chess in a day
and have fun playing it, but as you get more serious about it, each incremental
increase in skill requires a greater commitment to studying the theory of the
game.&lt;/p&gt;

&lt;p&gt;Knitting has a marvellously smooth, user-controllable skill curve. There&amp;rsquo;s a
small hump at the beginning. It does take a little while to figure out how to
hold the needles, control the tension of the yarn with your fingers, and get
your hands to work in concert to make stitches. It feels like you&amp;rsquo;re making a
shadow puppet of a sewing machine. Your initial experience will be frustrating.&lt;/p&gt;

&lt;p&gt;But you can push through that in an hour or so. In a day, you can learn a basic
way to cast stitches onto the needles, make knit and purl stitches, and then
cast off to finish the work. With just those, you can make scarves and
dishclothes. You are a knitter.&lt;/p&gt;

&lt;p&gt;Then the world is your oyster. There are &lt;a href=&quot;https://www.ravelry.com/&quot;&gt;thousands of patterns out
there&lt;/a&gt;, each listing the techniques required. You can pick ones well
inside your comfort zone and grow your skills slowly. Or you can challenge
yourself to learn a bunch of techniques at once. There are dozens of tiny little
independent tricks to learn, each it&amp;rsquo;s own little merit badge serotonin hit:
long-tail cast on, increases and decreases, cables, etc. So many fun different
ways to form stitches. Each is one bite-sized lesson and no matter how many or
few you want to chew on at a time, there is a project out there that will
satisfy your appetite.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not just the steepness of the curve, but also its height. Some skill curves
top out early. I suspect the world&amp;rsquo;s greatest kazoo player is not profoundly
better at kazoo than I am. Others seem to have no limit, like the world&amp;rsquo;s best
violinists or Go players.&lt;/p&gt;

&lt;p&gt;Friend, the knitting lore goes &lt;em&gt;deep&lt;/em&gt;. People have been developing this artform
for literally over a thousand years. Knitters have sat there, brain semi-idle,
while their fingers worked yarn for millions of hours. They had &lt;em&gt;plenty&lt;/em&gt; of time
to invent all sorts of crazy ways to tangle yarn up. You could knit full-time
for the rest of your life and never run out of new things to learn. Knitting
will never stop rewarding you.&lt;/p&gt;

&lt;h2&gt;Structured but not a game&lt;/h2&gt;

&lt;p&gt;To be clear, I&amp;rsquo;m talking about knitting and videogames &lt;em&gt;as a metaphor&lt;/em&gt;. I don&amp;rsquo;t
think of knitting as a game to win. Like a lot of programmers, I am prone to
pointing my dumb optimizing brain at random activities and trying to min-max the
shit out of it. Ask my wife how many ways to make coffee I have tried to find
the optimal effort/reward ratio.&lt;/p&gt;

&lt;p&gt;When I knit, I do try to knit efficiently. I mean, if I&amp;rsquo;ve gotta make 10,000
stitches to finish a single scarf, it pays to put some thought into the process.
At the same time, knitting isn&amp;rsquo;t just a pointless exercise to scratch my
gamification itch. It is a real artform, and I am making real objects.&lt;/p&gt;

&lt;p&gt;For me, knitting strikes a good balance between structure and unstructure. I
like making music and when it goes well, it&amp;rsquo;s very rewarding. But sometimes I
sit down and every melody that comes out sounds like a knock-off NES game (and
not in that cool chiptune way). Or I&amp;rsquo;ll spend an entire evening working on the
drum mixing and at the end I can&amp;rsquo;t tell if I made things better or worse. It&amp;rsquo;s
&lt;em&gt;too&lt;/em&gt; unstructured.&lt;/p&gt;

&lt;p&gt;When I sit down to knit, I might make a mistake that needs unwinding and fixing.
But for the most part, I can be confident that an hour spent knitting will get
me closer to a beautiful finished object. It provides a reliable serotonin hit
of &amp;ldquo;I&amp;rsquo;m making progress&amp;rdquo;. But it&amp;rsquo;s not so rigidly structured that it triggers my
optimizing brain into sucking the joy out of it by turning it into math
homework.&lt;/p&gt;

&lt;h2&gt;A time and a space&lt;/h2&gt;

&lt;p&gt;A particularly nice property of knitting is that it is able to provide that
reliable gratification while accommodating all of the other complexities in my
life. It takes very little time to make progress knitting. Unlike, say,
painting, there&amp;rsquo;s almost no set up at the beginning of a session or clean up at
the end. When I pick up the kids from school, I can get ten minutes of knitting
in while I wait for the bell.&lt;/p&gt;

&lt;p&gt;Nor does it take up much space. A zip-loc bag with a ball of yarn and two
needles is basically all you need, which is always in my backpack when I get on
an airplane now.&lt;/p&gt;

&lt;p&gt;Conveniently, the TSA &lt;a href=&quot;https://www.tsa.gov/travel/security-screening/whatcanibring/items/knitting-needles&quot;&gt;specifically allows knitting needles on flights&lt;/a&gt;.
(The fact that the TSA is explicitly fine with you bringing a satchel full of
foot-long sharpened metal spikes onto a plane as long as its accompanied by some
string really says something about it as security theatre.) Note that this only
applies to domestic flights in the US. Other countries have their own rules,
though I haven&amp;rsquo;t had any trouble bringing knitting to Denmark or Costa Rica.&lt;/p&gt;

&lt;p&gt;Knitting expands and contracts around not just physical space, but headspace
too. Had a long day and want something mindless to help you unwind? Slap
together a &lt;a href=&quot;https://www.ravelry.com/projects/munificent/slanting-stripes-scarf&quot;&gt;garter stitch scarf&lt;/a&gt; and just do the same stitch over and
over again. Stressed out by work or grieving a loss and need something consuming
to take your mind off it? Start a lacework or cable knit project and the chart
and counting won&amp;rsquo;t leave room to think about anything else.&lt;/p&gt;

&lt;p&gt;Whatever logistical or mental capacities you have, there is a knitting project
that will tuck neatly into it.&lt;/p&gt;

&lt;h2&gt;And then at the end&lt;/h2&gt;

&lt;p&gt;So far, I&amp;rsquo;ve been talking about knitting as an &lt;em&gt;activity&lt;/em&gt;. A personal hobby to
kill time for your own joy. Kill time it does, but knitting isn&amp;rsquo;t just about
whiling away the hours. It&amp;rsquo;s not playing solitaire or binging a TV show for the
fifth time.&lt;/p&gt;

&lt;p&gt;As yarn spools through your fingers and the hands twirl around the clock, an
actual physical, beautiful object emerges at the end. Well, your first couple of
objects may not be so beautiful. But even the lumpiest knitted scarf is imbued
with something increasingly elusive these days: &lt;em&gt;care&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The first real thing I knitted was a scarf for my mother-in-law. In retrospect,
I can&amp;rsquo;t say it&amp;rsquo;s a great scarf. Kinda cheap acrylic yarn. Not really her color.
4x4 rib was about all I could handle complexity-wise at the time, and it means
the scarf tends to bunch up on itself. But when she opened the package on
Christmas and saw it, her eyes teared up. Mine are tearing up now writing this.&lt;/p&gt;

&lt;p&gt;Because regardless of how good the object itself is, it is an inarguable
testament to the fact that I chose to spend dozens of quiet hours making stitch
after stitch, all the while thinking about her and how much she means to me. A
fraction of my life&amp;rsquo;s wick that I burned for her and no one else.&lt;/p&gt;

&lt;p&gt;In a world where so many seem to want to get more and more out of less and less,
to automate and AI-ify everything until an infinite content firehose is blasting
into every orifice of every consumer, hand knitting to me is the antidote. An
acknowledgement that all we really have is time and thus there is no gift more
precious than spending it on someone.&lt;/p&gt;

&lt;p&gt;Also, once you finish a project, you get to buy more yarn. Because, if I&amp;rsquo;m
honest, a little consumption feels kinda nice too.&lt;/p&gt;

&lt;h2&gt;OK, I&amp;rsquo;m sold&lt;/h2&gt;

&lt;p&gt;Anyway, this is what knitting means to me. Which, now that I read all this, is a
lot more than I realized. If that didn&amp;rsquo;t pique your interest, fine. It&amp;rsquo;s not for
everyone. I do hope you find something out there to spend your time on that
provides as much joy as knitting does to me. You deserve that.&lt;/p&gt;

&lt;p&gt;If this did make you want to give knitting a try, you&amp;rsquo;re probably wondering what
next. Fortunately, there are, like, a million &amp;ldquo;learn how to knit&amp;rdquo; tutorials out
there. One of the actually marvellous things about living in the world today is
good access to lots of videos, and knitting is an activity that&amp;rsquo;s &lt;em&gt;really&lt;/em&gt; hard
to convey in book form. You kind of need to watch someone&amp;rsquo;s hands. Learning from
someone in person is best, but if you don&amp;rsquo;t have that, YouTube is a pretty good
substitute.&lt;/p&gt;

&lt;p&gt;Keep in mind that everyone&amp;rsquo;s hands are different! There are many ways (a
handful, heh heh) to hold the needles and form stitches because our anatomy and
the texture of our skin varies so much. Watch a few videos and don&amp;rsquo;t worry if
what works for them doesn&amp;rsquo;t work for you. Eventually, you&amp;rsquo;ll find one that does.&lt;/p&gt;

&lt;p&gt;Expect to be challenged and frustrated at first. There&amp;rsquo;s a lot to going on all
at once: controlling the tension of the working yarn, keeping the stitches from
the previous row on the left needle, keeping the new stitches on the right
needle, forming new stitches. This may be one of the first times you&amp;rsquo;ve used
this many of your fingers doing &lt;em&gt;different&lt;/em&gt; things all at once.&lt;/p&gt;

&lt;p&gt;I promise that if you&amp;rsquo;re patient with yourself and give it a few tries, you will
get over the hump. Once you can knit a swatch of garter stitch, everything else
will come naturally over time.&lt;/p&gt;

&lt;p&gt;So go your local craft store, buy a cheap pair of size 7 needles, a ball of
worsted (i.e. medium) weight acrylic or wool yarn in a color you think is
pretty, and give it a try. The worst that can happen is you&amp;rsquo;ll waste a few
bucks. If you&amp;rsquo;re lucky, you might end up making your mother-in-law cry (in a
good way).&lt;/p&gt;</content>
  </entry>

  <entry>
    <id>http://journal.stuffwithstuff.com/2025/05/26/access-control-syntax</id>
    <link type="text/html" rel="alternate" href="http://journal.stuffwithstuff.com/2025/05/26/access-control-syntax/"/>
    <title>Access Control Syntax</title>
    <published>2025-05-26T07:00:00.000Z</published>
    <updated>2025-05-26T07:00:00.000Z</updated>
    <author>
      <name>Robert Nystrom</name>
      <uri>http://journal.stuffwithstuff.com/</uri>
    </author>
    <content type="html">&lt;p&gt;I&amp;rsquo;m still tinkering on a &lt;a href=&quot;/2023/01/03/type-checking-if-expressions/&quot;&gt;scripting language for my hobby fantasy console
project&lt;/a&gt;. I&amp;rsquo;m ashamed to admit this, but up to this point, the language
had absolutely no notion of modules. Literally every source file is dumped into
one big global namespace and compiled together.&lt;/p&gt;

&lt;p&gt;I always planned to have some sort of module system. I just hadn&amp;rsquo;t figured it
out yet because I had other, harder &lt;a href=&quot;/2023/08/04/representing-heterogeneous-data/&quot;&gt;language design problems&lt;/a&gt; to
solve. I assumed that the module system mostly didn&amp;rsquo;t interact with other
language features, so I could kick it down the road for now.&lt;/p&gt;

&lt;p&gt;That was true until it wasn&amp;rsquo;t. I&amp;rsquo;ve been beating my head against the wall around
generics for&amp;hellip; oh God I just checked the Git history and it&amp;rsquo;s three years now.
I still don&amp;rsquo;t have that pinned down. Parametric types are hard.&lt;/p&gt;

&lt;p&gt;Anyway, one of the approaches I&amp;rsquo;m exploring &lt;em&gt;does&lt;/em&gt; get tangled up in modules and
scoping so now I have to figure modules out. This post is about one little
syntax design question I ran into: &lt;em&gt;how do you distinguish public and private
declarations?&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;A basic module system&lt;/h2&gt;

&lt;p&gt;Since my language is a scripting language, my ambitions for the module system
are pretty minimal. Think more like Python or Dart than Java or C#.&lt;/p&gt;

&lt;p&gt;Every file has its own top-level scope that isn&amp;rsquo;t shared with others. If you
want to access top-level declarations from another file, you import that file.
That makes its top-level declarations available in the importing file.&lt;/p&gt;

&lt;p&gt;Of course, a module might have some declarations that are only for its own
internal use and should &lt;em&gt;not&lt;/em&gt; be made available when you import it. A module
should be able to encapsulate parts of its implementation. Thus, I need a way
for users to indicate which declarations are private and which are public.&lt;/p&gt;

&lt;h2&gt;What other languages do&lt;/h2&gt;

&lt;p&gt;Every language out there has &lt;em&gt;some&lt;/em&gt; kind of module system and an ability to
control access (though it did take JavaScript about 20 years to get there, bless
its heart). In some sense, it&amp;rsquo;s a solved problem. But they don&amp;rsquo;t all solve it
the same way, especially if you dig into some of the more obscure corners of the
language world. Let&amp;rsquo;s go on a tour&amp;hellip;&lt;/p&gt;

&lt;h3&gt;Modifier keywords&lt;/h3&gt;

&lt;p&gt;The approach you probably already have in mind is modifiers before declarations.
In Java, C#, PHP and others, that&amp;rsquo;s &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;private&lt;/code&gt;. Maybe also more
specific ones like &lt;code&gt;protected&lt;/code&gt;, and &lt;code&gt;internal&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s clear, explicit, and gets the job done. It lets you support a large number
of flavors of access control if you need. It&amp;rsquo;s also extremely common, so easy
for users coming to a new language to pick up.&lt;/p&gt;

&lt;p&gt;The flip side is that it&amp;rsquo;s quite verbose. Java is reviled for being too
boilerplate-heavy and wordy, and I believe that having &lt;code&gt;private&lt;/code&gt; and &lt;code&gt;public&lt;/code&gt;
scattered throughout every single file is a major contributor to that.&lt;/p&gt;

&lt;p&gt;Picking the wrong defaults doesn&amp;rsquo;t help. I used to program in C# professionally
for several years and in that time, I can&amp;rsquo;t recall &lt;em&gt;ever&lt;/em&gt; wanting a member to
have &lt;code&gt;internal&lt;/code&gt; access, which is the default. So I had to write &lt;code&gt;public&lt;/code&gt; or
&lt;code&gt;private&lt;/code&gt; on basically everything. I think the same is true in Java land.&lt;/p&gt;

&lt;p&gt;Rust improves the situation by having a shorter modifier, &lt;code&gt;pub&lt;/code&gt;, and picking
what is arguably the right default for a language designed for Serious
Programming: private.&lt;/p&gt;

&lt;h3&gt;Modifier sections&lt;/h3&gt;

&lt;p&gt;C++ has a strange but perhaps underappreciated spin on modifiers. It has access
modifier keywords, but they apply to &lt;em&gt;all subsequent declarations&lt;/em&gt;. This lets
you write a keyword once and apply it to a whole bunch of things. That really
does cut down the verbosity.&lt;/p&gt;

&lt;p&gt;The price to pay is that it also makes the language curiously context-sensitive.
If you&amp;rsquo;re ever defined a preprocessor macro that inserts code in a class and had
to be careful &lt;em&gt;where&lt;/em&gt; in the class you called the macro, you&amp;rsquo;ve run into this.&lt;/p&gt;

&lt;p&gt;Access control sections mean that you can&amp;rsquo;t look at a single declaration and
know what its access is. You have to know what section contains the declaration.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s also the funny historical thing where members in struct default to
public and members in classes default to private. C++ is &lt;em&gt;weird&lt;/em&gt;. Like a house
built on the back of some Eldritch being whose architecture and plumbing reveals
the unholy foundation it is mated with.&lt;/p&gt;

&lt;p&gt;For presumably less Eldritch reasons, I believe Ada takes a similar approach.&lt;/p&gt;

&lt;h3&gt;Sigils in the names&lt;/h3&gt;

&lt;p&gt;Modifiers are clear but verbose. If you want something more syntactically
economical, why not encode the access control directly in the name of the
declaration itself? That&amp;rsquo;s what Python, Go, and Dart do.&lt;/p&gt;

&lt;p&gt;Python&amp;rsquo;s system is a mixture of informal and language supported. A leading
underscore in a name doesn&amp;rsquo;t &lt;em&gt;prohibit&lt;/em&gt; it from being used outside of the module
but it sends a signal to the user that they &lt;em&gt;shouldn&amp;rsquo;t&lt;/em&gt; use it. Sort of &amp;ldquo;velvet
rope&amp;rdquo; security. If a class member starts with &lt;em&gt;two&lt;/em&gt; leading underscores, then it
really is private. The language will name mangle it to make it inaccessible.&lt;/p&gt;

&lt;p&gt;In Go, if a declaration&amp;rsquo;s name starts with a capital letter, it&amp;rsquo;s public.
Otherwise, it&amp;rsquo;s private. Because Go allows any Unicode letter in identifiers,
the definition of uppercase &lt;a href=&quot;https://en.wikipedia.org/wiki/Unicode_character_property#Casing&quot;&gt;is not trivial&lt;/a&gt;. Wikipedia tells me there are
1,858 uppercase letters and 2,258 lowercase letters that can be used in
identifiers in Go. Fun!&lt;/p&gt;

&lt;p&gt;Dart only allows ASCII in identifiers and follows Python: If an identifier
starts with &lt;code&gt;_&lt;/code&gt;, it&amp;rsquo;s private. Otherwise it&amp;rsquo;s public. Unlike Python, this is
strictly enforced by the language. Private names are completely inaccessible
outside of the library where the declaration appears.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t have enough Python experience to have an opinion there aside from
finding &lt;code&gt;__&lt;/code&gt; pretty long. I work full-time on Dart and have only tinkered in Go
so I&amp;rsquo;m highly biased, but Go&amp;rsquo;s approach has always felt strange to me. I&amp;rsquo;m sure
it&amp;rsquo;s mostly habit, but my monkey brain really wants case to be used to
distinguish kinds of declarations: leading capitals for types and lowercase for
functions. Seeing types with lowercase names or functions with capital names
gives me the same squishy feeling in my gut as watching &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Polar_Express_(film)&quot;&gt;The Polar Express&lt;/a&gt;.
Dumb subjective biases aside, though, it seems to work fine in practice.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m much more used to Dart&amp;rsquo;s style. I don&amp;rsquo;t love it, but, eh, it gets the job
done.&lt;/p&gt;

&lt;p&gt;These approaches both have the advantage of being very terse. No modifiers, no additional reserved words. There are two strikes against them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;They&amp;rsquo;re obscure.&lt;/strong&gt; If you&amp;rsquo;re new to Java and you see the word &lt;code&gt;private&lt;/code&gt;,
you probably don&amp;rsquo;t know what it does, but you can guess it has something to
do with &amp;ldquo;privacy&amp;rdquo;. With Go, if you see that some names are capitalized and
some aren&amp;rsquo;t, that tells you absolutely nothing about what&amp;rsquo;s going on.
Historical baggage? Weird personal preference? Maybe the author is German
and prefers capitalizing nouns?&lt;/p&gt;

&lt;p&gt;Likewise, if you&amp;rsquo;re skimming some Dart code, why do some of the names start
with &lt;code&gt;_&lt;/code&gt;? Do you pronounce that when you say the name out loud?&lt;/p&gt;

&lt;p&gt;You just have to be told what&amp;rsquo;s going on because the language&amp;rsquo;s own syntax
doesn&amp;rsquo;t guide you towards an explanation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;They show up at the use sites.&lt;/strong&gt; Access control is a property of a
&lt;em&gt;declaration&lt;/em&gt;. So, in principle, any syntax for specifying it should only
appear at that declaration. When you go to use a name, either you can access
it (in which case no syntax is necessary) or you can&amp;rsquo;t (in which case
there&amp;rsquo;s nothing you could say). But with Go and Dart, every place you
mention the name also carries the access control.&lt;/p&gt;

&lt;p&gt;In theory, this could be a major problem if you want to &lt;em&gt;change&lt;/em&gt; the access
control of a declaration. You have to fix the identifier at every single use
site! In practice, this doesn&amp;rsquo;t actually cause much pain. If a name is going
from private to public, then every existing use site is already confined to
one file, so you can rename those without affecting the rest of the program.
If an identifier is going from public to private, again all uses must
already be confined to that file or you &lt;em&gt;can&amp;rsquo;t&lt;/em&gt; make it private without
actually breaking things.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I used to say that if I had a time machine, I would go back and change Dart to
not use &lt;code&gt;_&lt;/code&gt; for privacy. But I have mellowed on that opinion over the years and
now I&amp;rsquo;m not sure. I don&amp;rsquo;t like how it shows up at every use site, but it &lt;em&gt;is&lt;/em&gt;
terse, which is nice.&lt;/p&gt;

&lt;h3&gt;Export manifests&lt;/h3&gt;

&lt;p&gt;Modifers put access control at the declaration. Sigils put it at the declaration
and the use sites. The third major approach puts it at &lt;em&gt;neither&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Someone will tell me this generalization is wrong but I think most functional
languages including the ML family and Lisps (including Scheme) have some kind of
separate syntax for listing &lt;em&gt;exports&lt;/em&gt;. Within a module, you declare all the
functions and types you want without worrying about modularity. Then at the top
of the file, the language gives you some dedicated syntax to list the things
that should be made visible outside of the module.&lt;/p&gt;

&lt;p&gt;For example, in Scheme, the syntax for defining a module looks like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scheme&quot; data-lang=&quot;scheme&quot;&gt;(library library-name
  (export list-of-names-to-export...)
  declarations-in-library...)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;SML and its spawn have a notion of a &lt;a href=&quot;https://smlhelp.github.io/book/docs/start/module-syntax&quot;&gt;signature&lt;/a&gt; which is
declared separately from the module. You could also argue that header files in C
and C++ are this pattern.&lt;/p&gt;

&lt;p&gt;A cool thing about export manifests is that they keep all the access control
logic in one place. When you&amp;rsquo;re writing declarations, you don&amp;rsquo;t have to worry
about access control then. You just write declarations. As a &lt;em&gt;user&lt;/em&gt; of a library,
you can look at just the export section to see what the module lets you do
without digging in to the implementation at all.&lt;/p&gt;

&lt;p&gt;It does a good job of &lt;em&gt;firmly&lt;/em&gt; separating interface from implementation.&lt;/p&gt;

&lt;p&gt;On the other hand, it&amp;rsquo;s &lt;em&gt;quite&lt;/em&gt; verbose. You end up saying the name of every
exported declaration twice. Maybe even the full type signatures too. Since the
export manifest is separate from the declarations, they have to be manually kept
in sync. Rename an exported function and you have to remember to rename it in
the manifest too.&lt;/p&gt;

&lt;p&gt;I ragged on JavaScript for not having its act together, but I gotta say when
they did add modules, they came up with a clever blended approach. You can use
&lt;code&gt;export&lt;/code&gt; as a modifier right on a declaration:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But you can also use the &lt;code&gt;export&lt;/code&gt; keyword to export a set of declarations that
are already declared elsewhere:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Code...&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Given that modules were added later to the language, I&amp;rsquo;m guessing this makes it
easier to add modularity to a large existing JS library.&lt;/p&gt;

&lt;h3&gt;Sigils at the declaration&lt;/h3&gt;

&lt;p&gt;In poking around the annals of language history, I found one last approach in
Niklaus Wirth&amp;rsquo;s magnum opus language &lt;a href=&quot;https://oberon.org/en&quot;&gt;Oberon&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In Oberon, top-level declarations are private by default and only accessible
to the containing module. If you want to make a declaration public, you mark
the declaration with an asterisk:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-oberon&quot; data-lang=&quot;oberon&quot;&gt;&lt;span class=&quot;k&quot;&gt;MODULE&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;IMPORT&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;SayHello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Ln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;SayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, the &lt;code&gt;*&lt;/code&gt; after &lt;code&gt;PROCEDURE SayHello&lt;/code&gt; means that &lt;code&gt;SayHello&lt;/code&gt; is public. Note
that this marker is only at the declaration. It&amp;rsquo;s not part of the name. At
callsites, the name is just &lt;code&gt;HelloWorld&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This has the same inscrutability that Python, Go, and Dart have. If you&amp;rsquo;re a new
Oberon programmer and you see &lt;code&gt;*&lt;/code&gt;, you have no idea what it means. Fortunately,
there are no new Oberon programmers, so this is not a problem in practice.&lt;/p&gt;

&lt;p&gt;This approach has the advantage of only appearing at the declaration. You don&amp;rsquo;t
have to repeat the sigil every time you use the thing.&lt;/p&gt;

&lt;h2&gt;Any syntax at all?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m sure there are interesting tweaks and refinements in various languages, but
I think that mostly covers the approaches in use out there. (If you&amp;rsquo;re aware of
any others, do tell.) Which approach is the right one for &lt;em&gt;my&lt;/em&gt; little scripting
language?&lt;/p&gt;

&lt;p&gt;A deeply related question is the choice of &lt;em&gt;defaults&lt;/em&gt;. Java has &lt;code&gt;public&lt;/code&gt; for
public stuff and &lt;code&gt;private&lt;/code&gt; for private stuff, but it also has a syntax for
package private declarations: nothing at all. If you don&amp;rsquo;t specify anything,
C++ makes your struct members public and your class members private.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s hard to beat &amp;ldquo;zero syntax at all&amp;rdquo; when it comes to brevity, so the choice
of what access control a declaration gets by default is an important one.&lt;/p&gt;

&lt;p&gt;When I put on my rigorous software engineer hat&amp;mdash;probably some kind of
construction site hard hat&amp;mdash;the obvious right default is private. No one can
fit an entire huge program in their head, so code needs to be broken into
smaller isolated pieces you can reason about locally. Defaulting to private
encourages users to make smaller independent modules.&lt;/p&gt;

&lt;p&gt;If I was making a language for big mission-critical infrastructure software, I
would definitely do that. I think Rust made the right choice by defaulting to
private and requiring you to opt in to public with &lt;code&gt;pub&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But I am making, like, the opposite of that. A hobby project that may never see
the light of day for people to make their own hobby games that, realistically,
also may never see the light of day. If anything, I want to encourage
(hypothetical) users of my (currently mostly vaporware) language to &lt;em&gt;get things
done&lt;/em&gt;. Access control can get in the way of that.&lt;/p&gt;

&lt;h3&gt;Class modifiers in Dart&lt;/h3&gt;

&lt;p&gt;A few years ago, we added a slew of &lt;a href=&quot;https://dart.dev/language/class-modifiers&quot;&gt;class modifiers&lt;/a&gt; to Dart. These are not
directly tied to public and private, but in the process of designing those, I
spent a lot of time talking to users about how they use the language and what
defaults they prefer.&lt;/p&gt;

&lt;p&gt;Dart defaults to public. You have to opt in to private by prefixing a name with
an underscore. It turns out that most users actually do prefer public being the
default. And after looking at mountains of Dart code, what I see is that most
Dart code is relatively small applications. Those apps are built on top of a set
of frameworks and libraries, but compared to the volume of application code out
there, those libraries make up a fairly small fraction of the entire Dart
ecosystem.&lt;/p&gt;

&lt;p&gt;These apps are the leaves of the dependency tree. Nothing depends on them or
imports them. The authors of most of those are just trying to slap some UI
together and ship a thing. And for most of those, defaulting to public keeps the
language out of their way.&lt;/p&gt;

&lt;h2&gt;Syntax for privacy&lt;/h2&gt;

&lt;p&gt;That all leads me to feel that my scripting language should default to public
and have a way to opt in to private. How do to that?&lt;/p&gt;

&lt;h3&gt;No export manifests&lt;/h3&gt;

&lt;p&gt;I know I don&amp;rsquo;t want export manifests. They are much too verbose. Also, there is
some extra language complexity and error reporting that gets sucked in. Since
the manifest is separate from the declaration, the compiler has to handle cases
where you try to export a name that doesn&amp;rsquo;t exist. My language also has
overloading, which means when exporting a function, you would need to a way to
specify which of the overloads to export and which to leave private.&lt;/p&gt;

&lt;p&gt;Export manifests are just way more machinery than fits for a scripting language.
This approach is out.&lt;/p&gt;

&lt;h3&gt;No modifier sections&lt;/h3&gt;

&lt;p&gt;The C++ approach is nice in that it&amp;rsquo;s clear while still being pretty terse. You
only need to write a modifier and can apply it to a bunch of declarations in the
same scope.&lt;/p&gt;

&lt;p&gt;But at least in C++ (not sure about Ada), that only works within a type
declaration. My language isn&amp;rsquo;t really object oriented. It&amp;rsquo;s more procedural.
Sort of &amp;ldquo;structs plus functions&amp;rdquo; like C. Instead of classes, you have records.
But a record declaration tends to be pretty small with only a handful of fields
in it. There&amp;rsquo;s not enough &lt;em&gt;stuff&lt;/em&gt; inside a single record to benefit from reusing
a modifier for a bunch of nested declarations.&lt;/p&gt;

&lt;p&gt;I could allow &lt;code&gt;private&lt;/code&gt; at the top level and have it apply to everything after,
but that feels like it errs too far in the other direction. It would be really
confusing to have a thousand line file and not realize that half of it is
private because some modifier way offscreen above flipped the access control.&lt;/p&gt;

&lt;p&gt;Modifier sections are out.&lt;/p&gt;

&lt;h3&gt;No sigils in identifiers&lt;/h3&gt;

&lt;p&gt;Sigils in identifiers do have a sort of terse, scripty feel. No extra keywords.&lt;/p&gt;

&lt;p&gt;I can&amp;rsquo;t do Go&amp;rsquo;s approach because my language already makes identifier leading
case significant. It supports &lt;a href=&quot;https://en.wikipedia.org/wiki/Pattern_matching#Tree_patterns&quot;&gt;destructuring pattern matching&lt;/a&gt;. Like some
functional languages, it uses case to distinguish when a pattern is binding a
new local variable (lowercase) versus matching against a type or constant
(uppercase).&lt;/p&gt;

&lt;p&gt;Now I&amp;rsquo;m not sure that corner of the language will stick, but it&amp;rsquo;s there right
now.&lt;/p&gt;

&lt;p&gt;I could do Python/Dart&amp;rsquo;s approach and use a leading underscore. But I&amp;rsquo;d really
prefer to not have to mention the sigil at every single use site. After having
written probably a million lines of Dart code, I know it&amp;rsquo;s not intolerable. But
it feels like an annoying tax. And for a language I&amp;rsquo;m designing for my own joy,
I&amp;rsquo;d like to eliminate as many annoyances as possible.&lt;/p&gt;

&lt;h3&gt;Maybe modifiers&lt;/h3&gt;

&lt;p&gt;That leaves two approaches and is where I&amp;rsquo;m currently at. Approach one is the
typical solution to use an access control modifier at the declaration.
Unfortunately, defaulting to public makes this harder. In Rust, &lt;code&gt;pub&lt;/code&gt; is a
really nice little keyword to flip to public when the default is private, but
there is no obvious converse. &lt;code&gt;private&lt;/code&gt; would be the longest keyword in my
language. &lt;code&gt;pri&lt;/code&gt; doesn&amp;rsquo;t read like anything. &lt;code&gt;priv&lt;/code&gt; is&amp;hellip; strange. I suppose that
&lt;code&gt;pvt&lt;/code&gt; is the well-established abbreviation for &amp;ldquo;private&amp;rdquo; but that feels a tad
militaristic.&lt;/p&gt;

&lt;p&gt;I can&amp;rsquo;t find any other synonyms for &amp;ldquo;private&amp;rdquo; that admit reasonable
abbreviations either. So I&amp;rsquo;m open to taking this path, but I&amp;rsquo;m simply failing to
come up with a good keyword for it.&lt;/p&gt;

&lt;p&gt;(A silly goblin part of my brain suggested I use &lt;code&gt;shh&lt;/code&gt; to mean &amp;ldquo;private&amp;rdquo;, like
the declaration is being whispered and can&amp;rsquo;t be heard outside of its module.)&lt;/p&gt;

&lt;h3&gt;Maybe sigils at the declaration&lt;/h3&gt;

&lt;p&gt;This leaves Oberon&amp;rsquo;s weird approach. There are several advantages here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It is maximally terse. Zero syntax at the use site, and only a single
character at the declaration site.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No additional reserved words which might get in the way of user identifiers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;By defaulting to public, the opacity of the syntax is less of an issue. Yes,
the sigil won&amp;rsquo;t immediately convey what it does, but if you&amp;rsquo;re just starting
to use the language, you don&amp;rsquo;t need to even know it exists at first. You
can just make everything public.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So there is some appeal. I don&amp;rsquo;t think I can literally take Oberon&amp;rsquo;s syntax
with &lt;code&gt;*&lt;/code&gt; following the name. My language lets you define operators and it would
be confusing to have &lt;code&gt;*&lt;/code&gt; right after other punctuation:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vgs&quot; data-lang=&quot;vgs&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;t&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is declaring a private &lt;code&gt;+&lt;/code&gt; function. It would probably look equally weird
to have &lt;code&gt;*&lt;/code&gt; after the name in a record declaration:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vgs&quot; data-lang=&quot;vgs&quot;&gt;&lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Int&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That led me to thinking the sigil should be by the declaration keyword. In my
language, every declaration form does start with a leading keyword (unlike, say,
C where function declarations don&amp;rsquo;t have one), so it&amp;rsquo;s feasible. Something like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vgs&quot; data-lang=&quot;vgs&quot;&gt;&lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Vec&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Int&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;sayHi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;i&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I don&amp;rsquo;t hate it. But using &lt;code&gt;*&lt;/code&gt; feels weird for &amp;ldquo;private&amp;rdquo;. If anything, it seems
to emphasize the declaration (which is what it does in Oberon where it means
&amp;ldquo;public&amp;rdquo;).&lt;/p&gt;

&lt;h3&gt;Maybe alternate keywords&lt;/h3&gt;

&lt;p&gt;That led to my last idea which I can&amp;rsquo;t decide if I like or not. Given Python and
Dart, it seems like underscore vaguely conveys &amp;ldquo;private&amp;rdquo; to some people. So
maybe use that? It looks like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vgs&quot; data-lang=&quot;vgs&quot;&gt;&lt;span class=&quot;k&quot;&gt;rec_&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Vec&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Int&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def_&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;sayHi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;i&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It looks odd, but I don&amp;rsquo;t &lt;em&gt;hate&lt;/em&gt; it. Or at least I don&amp;rsquo;t hate it any more than
any novel programming language syntax usually triggers revulsion.&lt;/p&gt;

&lt;p&gt;However, there&amp;rsquo;s sort of a problem. Underscore is a valid identifier character.
So the &lt;a href=&quot;https://craftinginterpreters.com/scanning.html&quot;&gt;lexer&lt;/a&gt; is not going to scan &lt;code&gt;rec_&lt;/code&gt; as a &lt;code&gt;rec&lt;/code&gt; keyword token followed
by a &lt;code&gt;_&lt;/code&gt; token. Instead of will treat &lt;code&gt;rec_&lt;/code&gt; as a single identifier.&lt;/p&gt;

&lt;p&gt;But then&amp;hellip; I could just let it do that. I&amp;rsquo;d then define a separate set of
reserved words for all of the private declaration keywords: &lt;code&gt;def_&lt;/code&gt;, &lt;code&gt;rec_&lt;/code&gt;,
&lt;code&gt;var_&lt;/code&gt;, and &lt;code&gt;val_&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So now instead of a modifier or sigil to control access, you explicitly choose
one of two declaration keywords. One makes it public and one makes it private.
This technically means adding a handful more reserved words, but they aren&amp;rsquo;t
ones that are particularly useful for users anyway.&lt;/p&gt;

&lt;p&gt;I keep trying to talk myself out of this approach because it&amp;rsquo;s so unusual but so
far it seems to be lodged in my head better than any of the alternatives I&amp;rsquo;ve
considered. What do you think?&lt;/p&gt;</content>
  </entry>

  <entry>
    <id>http://journal.stuffwithstuff.com/2023/10/19/does-go-have-subtyping</id>
    <link type="text/html" rel="alternate" href="http://journal.stuffwithstuff.com/2023/10/19/does-go-have-subtyping/"/>
    <title>Does Go Have Subtyping?</title>
    <published>2023-10-19T07:00:00.000Z</published>
    <updated>2023-10-19T07:00:00.000Z</updated>
    <author>
      <name>Robert Nystrom</name>
      <uri>http://journal.stuffwithstuff.com/</uri>
    </author>
    <content type="html">&lt;p&gt;I&amp;rsquo;ve been &lt;a href=&quot;/2023/01/03/type-checking-if-expressions/&quot;&gt;noodling on a static type system&lt;/a&gt; for my current hobby
language. To try to keep the language as simple as possible, I&amp;rsquo;m trying to see
if I can live without subtyping. Since most of my programming experience is in
object-oriented languages, I&amp;rsquo;ve been learning more about languages that lack&amp;mdash;or at least claim to lack&amp;mdash;subyping, to see how they work.&lt;/p&gt;

&lt;p&gt;The most intriguing one to me is Go because the authors say it doesn&amp;rsquo;t have
subtyping, but when you look at interfaces, it does seem to have something
&lt;em&gt;really close&lt;/em&gt; to subtyping. Is it subtyping just under another name, or is
there really something different going on?&lt;/p&gt;

&lt;p&gt;This post is the answer to that question as best as I can tell. The short answer
is that no, Go doesn&amp;rsquo;t have subtyping. But also, yes, it sort of does.&lt;/p&gt;

&lt;h2&gt;What is subtyping?&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;re reading my blog, you probably already know what subtyping is, but
let&amp;rsquo;s make sure we&amp;rsquo;re all starting from the same place. Subtyping defines a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Relation_(mathematics)&quot;&gt;&lt;em&gt;relation&lt;/em&gt;&lt;/a&gt; between two types. Given two types A and B, it might be
the case that B is a subtype of A, or it might not be.&lt;/p&gt;

&lt;p&gt;Since subtyping is a relation between a pair of types, it only comes into play
in places in code where two types are involved. The main place is assignment.
You have an expression of type A and you assign the result to a variable with
type B. Is that assignment allowed?&lt;/p&gt;

&lt;p&gt;Programming language folks usually generalize &amp;ldquo;assignment&amp;rdquo; to mean any place
where a variable is given some value. That includes assignment expressions, but
also covers initialized variable declarations and function calls where argument
values passed to the function are bound to their corresponding parameters.&lt;/p&gt;

&lt;p&gt;There are a couple of other places where subtyping comes into play, usually
around type inference, but assignment is the main one: You have a context that
requires some type B and a value of some type A. What are the types A and B
where that code is valid?&lt;/p&gt;

&lt;p&gt;That question is the heart of what a type checker &lt;em&gt;does&lt;/em&gt;. The main user
interface of a static system is compile errors, and the most common compile
error is &amp;ldquo;I expected a value of &lt;em&gt;this&lt;/em&gt; type but you gave me a value of &lt;em&gt;this
other type&lt;/em&gt;&amp;rdquo;.&lt;/p&gt;

&lt;h2&gt;Why have subtyping?&lt;/h2&gt;

&lt;p&gt;You have a context that expects type B and you give it a value of type A. In
languages without subtyping, that&amp;rsquo;s only OK if A and B are the exact same type.
In Pascal, if you declare a variable with type &lt;code&gt;integer&lt;/code&gt;, the only thing you can
initialize it with is a value of type &lt;code&gt;integer&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Subtyping exists largely to loosen that restriction&amp;mdash;to allow &lt;em&gt;multiple&lt;/em&gt;
different types to flow into some context. Why might a language want to permit
that?&lt;/p&gt;

&lt;p&gt;The reason is &lt;em&gt;polymorphism&lt;/em&gt;: Subtyping lets you write a piece of code and reuse
that same code with a range of different (but related) types. In languages
without subtyping, you can often find yourself copy/pasting the same function to
work with multiple different input types. (Generics can help, but that&amp;rsquo;s another
form of polymorphism that we&amp;rsquo;ll ignore for this post.)&lt;/p&gt;

&lt;p&gt;In, say, Java, if you define a method that takes an &lt;code&gt;Iterable&lt;/code&gt;, then you can
pass a &lt;code&gt;List&lt;/code&gt; to it, a &lt;code&gt;Stack&lt;/code&gt;, etc. You get to amortize the usefulness of that
method across all types that implement the &lt;code&gt;Iterable&lt;/code&gt; interface. Subtyping is a
force multiplier for your code.&lt;/p&gt;

&lt;p&gt;(Of course, that benefit isn&amp;rsquo;t without significant costs in terms of language
complexity, which is why I&amp;rsquo;m hoping to avoid it.)&lt;/p&gt;

&lt;h2&gt;Does Go have subtyping?&lt;/h2&gt;

&lt;p&gt;If you search the (extremely well-written!) &lt;a href=&quot;https://go.dev/ref/spec&quot;&gt;Go language spec&lt;/a&gt; for
&amp;ldquo;subtype&amp;rdquo;, you get zero results. So the answer is a clear &amp;ldquo;no&amp;rdquo; at the textual
level. However, we needer a deeper hermeneutics.&lt;/p&gt;

&lt;p&gt;Java does have subtyping. Now, if you were to make a new language named &amp;ldquo;Blava&amp;rdquo;
that was a literal copy/paste of the Java language specification with every use
of &amp;ldquo;subtype&amp;rdquo; replaced with &amp;ldquo;blubtype&amp;rdquo;, would you say that Blava has subtyping?
It behaves indistinguishably from a language with subtyping, so I&amp;rsquo;d be inclined
to say yes.&lt;/p&gt;

&lt;p&gt;The Go spec doesn&amp;rsquo;t mention &amp;ldquo;subtype&amp;rdquo;, but it does have a notion of
&lt;a href=&quot;https://go.dev/ref/spec#Assignability&quot;&gt;&amp;ldquo;assignability&amp;rdquo;&lt;/a&gt;. When you have a context that expects some type
and you give it a value of some other type, assignability determines which set
of other types are allowed. Concretely, the rules are:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A non-interface type T is assignable to an interface type I if T
implements I.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An interface type A is assignable to interface type B if A&amp;rsquo;s methods
are a superset of B&amp;rsquo;s.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;You know, that sounds an &lt;em&gt;awful lot&lt;/em&gt; like subtyping. Is &amp;ldquo;assignable to&amp;rdquo; just Rob
Pike&amp;rsquo;s idiosyncratic way of saying &amp;ldquo;subtype of&amp;rdquo;? Does Go have subtyping in
everything except name? Are we just playing semantics? (I mean, we&amp;rsquo;re designing
a programming language, so obviously &lt;em&gt;everything&lt;/em&gt; we do is playing semantics.
But I mean are we playing semantics with the language spec itself?) To fully
answer that, we&amp;rsquo;ll need to look at all of the kinds of types in a program.&lt;/p&gt;

&lt;h2&gt;Composite types and variance&lt;/h2&gt;

&lt;p&gt;If the only types in Go&amp;rsquo;s type system were primitives like numbers, structs, and
interfaces then I think you&amp;rsquo;d have a good argument that Go does have subtyping,
just spelled differently. But once you start looking at slice types and function
types, the story changes. (And array and channel types too, but slices and
functions are enough to make the point.)&lt;/p&gt;

&lt;p&gt;The thing that these latter kinds of types have in common is that they &lt;em&gt;contain
other types&lt;/em&gt;. A slice type has an inner type for the slice elements. A function
type has a list of parameter types and a list of return types.&lt;/p&gt;

&lt;p&gt;You ready for some more computer science jargon? We&amp;rsquo;ve been talking about
relations on pairs of types like &amp;ldquo;is subtype&amp;rdquo; and &amp;ldquo;is assignable&amp;rdquo;. But now we
have types that contain other types. That raises the question of whether a
relation on the inner types of two composite types says anything about the
relation between the two outer types.&lt;/p&gt;

&lt;p&gt;For example, let&amp;rsquo;s say we have two slice types &lt;code&gt;[]E1&lt;/code&gt; and &lt;code&gt;[]E2&lt;/code&gt;. They have
element types &lt;code&gt;E1&lt;/code&gt; and &lt;code&gt;E2&lt;/code&gt;, respectively. If &lt;code&gt;E1&lt;/code&gt; is assignable to &lt;code&gt;E2&lt;/code&gt; does
that mean that &lt;code&gt;[]E1&lt;/code&gt; is assignable to &lt;code&gt;[]E2&lt;/code&gt;? Does the assignability
&amp;ldquo;propagate&amp;rdquo; from the inner types to the outer types?&lt;/p&gt;

&lt;p&gt;Computer scientists call this property (meta-property?) &lt;em&gt;variance&lt;/em&gt;. They phrase
the question like &amp;ldquo;how does assignability of slice types &lt;em&gt;vary with respect to
their element types&lt;/em&gt;?&amp;rdquo;. There are a few possible answers to a question like
this.&lt;/p&gt;

&lt;h3&gt;Variance of slice types&lt;/h3&gt;

&lt;p&gt;For slice types in Go specifically, there are a handful of assignability rules,
but the only one that applies to slice types is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;V and T are identical.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words, for two slice types to be assignable, they have to be the exact
same type. That in turn means they must have the exact same element types. Even
if two element types are assignable, slices of those two types are not.&lt;/p&gt;

&lt;p&gt;Judging by an endless series of confused people asking questions on
StackOverflow, that behavior is unintuitive to programmers, both in Go and in
other languages. Let&amp;rsquo;s say you have this Go program:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;i&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Barker&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;i&quot;&gt;Bark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Bark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;i&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Woof!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we have a &lt;code&gt;Dog&lt;/code&gt; concrete type, which is assignable to the interface
&lt;code&gt;Barker&lt;/code&gt;. So this is fine:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;barker&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Barker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;i&quot;&gt;barker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Bark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;i&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Sparky&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Given that, you might expect this to work too:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;speakAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;barkers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Barker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;barker&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;barkers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;barker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Bark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;i&quot;&gt;dogs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Sparky&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Fido&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
  &lt;span class=&quot;i&quot;&gt;speakAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;dogs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But, no. The type system giveth and the type system taketh away:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;example.go:29:11: cannot use dogs (variable of type []Dog) as
[]Barker value in argument to speakAll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the type system didn&amp;rsquo;t yell at you, this program &lt;em&gt;would&lt;/em&gt; be fine at runtime.
All it does is call &lt;code&gt;Bark()&lt;/code&gt; on every element in the array, and both Sparky and
Fido do implement that method. So what&amp;rsquo;s the deal? In this case, the program is
&lt;em&gt;coincidentally&lt;/em&gt; fine because &lt;code&gt;speakAll()&lt;/code&gt; is only reading from the slice. But
what if we wrote:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Tree&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;i&quot;&gt;species&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Bark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;i&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Rough (but not ruff)!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;appendTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;barkers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Barker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Barker&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;barkers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Elm&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There&amp;rsquo;s nothing wrong with this &lt;code&gt;appendTree()&lt;/code&gt; function. It adds a &lt;code&gt;Tree&lt;/code&gt; to
the given slice. Since &lt;code&gt;Tree&lt;/code&gt; is assignable to &lt;code&gt;Barker&lt;/code&gt;, that&amp;rsquo;s fine. But if
you were to call this and pass in a &lt;code&gt;[]Dog&lt;/code&gt;, you&amp;rsquo;d end up with an array of dogs
that had a tree stuck in it! That would violate the soundness of the language.&lt;/p&gt;

&lt;p&gt;This is why Go only treats two slice types as assignable if they have the exact
same element types. In PL parlance, slice types are &lt;em&gt;invariant&lt;/em&gt; with respect
to their element types. And, for a mutable data structure like slices, that
rule makes sense.&lt;/p&gt;

&lt;p&gt;(A reasonable person might wonder then why Java and C# &lt;em&gt;don&amp;rsquo;t&lt;/em&gt; have this rule
and instead say that array types &lt;em&gt;are&lt;/em&gt; assignable if their element types are.
And then, because as you can see, it isn&amp;rsquo;t safe to do so, they have to add
&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/ArrayStoreException.html&quot;&gt;runtime&lt;/a&gt; &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/system.arraytypemismatchexception?view=net-7.0&quot;&gt;checks&lt;/a&gt; if you try to stuff an element of the
wrong type into the array.)&lt;/p&gt;

&lt;p&gt;So, OK, it makes sense for slice (and array) types to be invariant. What about
function types?&lt;/p&gt;

&lt;h3&gt;Variance of function types&lt;/h3&gt;

&lt;p&gt;To keep things simple, first we&amp;rsquo;ll consider just functions that don&amp;rsquo;t take any
parameters and have a single return type. Given two function types like that,
when are they assignable? Again, the only rule in the Go language spec that
matches function types is &lt;code&gt;V and T are identical&lt;/code&gt;. So two function types are
only assignable if they have the exact same return types. Even if the return
types are themselves assignable, if they are different types, the functions
aren&amp;rsquo;t assignable.&lt;/p&gt;

&lt;p&gt;Do we need to be that strict to preserve soundness? Actually, no! Here&amp;rsquo;s an
example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;returnDog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Rex&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;useCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Barker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;i&quot;&gt;barker&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;i&quot;&gt;barker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Bark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;i&quot;&gt;useCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;returnDog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So we have a function, &lt;code&gt;returnDog&lt;/code&gt; that returns a value of type &lt;code&gt;Dog&lt;/code&gt;. We pass a
reference to that function to &lt;code&gt;useCallback()&lt;/code&gt; whic expects a function that
returns a &lt;code&gt;Barker&lt;/code&gt;. The &lt;code&gt;Dog&lt;/code&gt; type does implement &lt;code&gt;Barker&lt;/code&gt;. If this program were
run, it would be perfectly safe. And, in fact, there&amp;rsquo;s nothing you could put
inside &lt;code&gt;useCallback()&lt;/code&gt; that would make passing &lt;code&gt;returnDog&lt;/code&gt; to it violate the
soundness of the type system.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s sound and semantically kosher in principle&amp;hellip; but Go disallows it:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;.&amp;#47;prog.go:49:14: cannot use returnDog (value of type func() Dog) as
func() Barker value in argument to useCallback
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Every other language I know that has subtyping and function types allows this. A
function type &lt;code&gt;A&lt;/code&gt; is a subtype of another function type &lt;code&gt;B&lt;/code&gt; if the return type
of &lt;code&gt;A&lt;/code&gt; is a subtype of the return type of &lt;code&gt;B&lt;/code&gt;. So the subtyping relation of the
return types propagates out to determine the subtype relation of the function
types. We call this &lt;em&gt;covariance&lt;/em&gt; and say that function types are &lt;em&gt;covariant in
their return types&lt;/em&gt;. The &amp;ldquo;co-&amp;rdquo; prefix means that the subtyping relation between
the inner types goes in the &amp;ldquo;same direction&amp;rdquo; as the subtyping relation it
implies about the outer types.&lt;/p&gt;

&lt;p&gt;That direction matters because relations like subtyping and assignability aren&amp;rsquo;t
symmetric. The &lt;code&gt;Dog&lt;/code&gt; type is assignable to &lt;code&gt;Barker&lt;/code&gt;, but &lt;code&gt;Barker&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt;
assignable to &lt;code&gt;Dog&lt;/code&gt;. The underlying value might be a &lt;code&gt;Tree&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;Are there cases where the variance of an inner type doesn&amp;rsquo;t go in the same
direction as the outer types? Indeed there are, and they&amp;rsquo;re right there next to
us. Instead of return types, let&amp;rsquo;s look at parameter types. Now let&amp;rsquo;s say we
only care about functions that accept a single parameter and return nothing.
Here&amp;rsquo;s an example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;acceptBarker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;barker&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Barker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;i&quot;&gt;barker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Bark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;useCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;i&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Laika&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;i&quot;&gt;useCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;acceptBarker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that the parameter types are flipped compared to the return type example.
Here, the callback type in &lt;code&gt;useCallback()&lt;/code&gt; takes a more precise type of &lt;code&gt;Dog&lt;/code&gt;.
The function we pass to it, &lt;code&gt;acceptBarker&lt;/code&gt; has a parameter whose type is
&lt;code&gt;Barker&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You may feel a slight disorientation here. The code feels weird and sort of
backwards. Wait a minute and the dizziness will pass. Dramamine might help.&lt;/p&gt;

&lt;p&gt;While this definitely isn&amp;rsquo;t as intuitive as return types being covariant, if you
think about it carefully, you&amp;rsquo;ll see that the above program is completely sound.
In other languages with subtyping, function type &lt;code&gt;A&lt;/code&gt; is a subtype of function
type &lt;code&gt;B&lt;/code&gt; if the parameter types of &lt;code&gt;B&lt;/code&gt; are subtypes of the parameter types of
&lt;code&gt;A&lt;/code&gt;. Note how &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; are reversed in the second half of that sentence. The
variance of parameter types is reversed. In technical terms, we say that
function types are &lt;em&gt;contravariant in their parameter types&lt;/em&gt;. The prefix
&amp;ldquo;contra-&amp;rdquo; means &amp;ldquo;against&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;(You might wonder what happens when you have a function type with a parameter
whose type is itself a function type with some parameter type. How does &lt;em&gt;that&lt;/em&gt;
flow out? When there&amp;rsquo;s two levels of nesting it flips around to going in the
same direction as the outermost type. The way I think about it is that
contravariance is a 180¬∞ flip in the direction of the relation. If you nest
contravariant types, you flip it twice and get back to the original direction.)&lt;/p&gt;

&lt;p&gt;Contravariant parameter types are sound, but again Go doesn&amp;rsquo;t allow them. Two
function types are only assignable if their parameter types are &lt;em&gt;exactly the
same&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;Invariance in Go&lt;/h2&gt;

&lt;p&gt;In every language I know with subtyping, function types are &lt;a href=&quot;https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)#Function_types&quot;&gt;covariant in their
return types and contravariant in their parameter types&lt;/a&gt;. But in
Go, function types are invariant.&lt;/p&gt;

&lt;p&gt;Go is not a language known for getting in the programmer&amp;rsquo;s way when they want to
do something, so why are function types more restrictive than would be necessary
for soundness?&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not just function types either. &lt;em&gt;All&lt;/em&gt; composite types are invariant in Go:
arrays, slices, channels, maps, functions. So &lt;em&gt;ground&lt;/em&gt; types&amp;mdash;types that don&amp;rsquo;t
contain any other type&amp;mdash;have some subtype-like notion of assignability. But
once you wrap a type in another, any notion of assignability goes away.&lt;/p&gt;

&lt;p&gt;Why did the designers of Go do that? If you&amp;rsquo;re going to bother having interfaces
and assignability, why not go all the way and have assignability for functions
and other composite types where its sound?&lt;/p&gt;

&lt;p&gt;If all the designers cared about was semantic correctness and having a beautiful
elegant specification written in LaTeX, then they probably would have supported
variance, at least for functions. (The other types all &lt;em&gt;should&lt;/em&gt; be invariant
since they are mutable. When types can flow both in and out, any other variance
isn&amp;rsquo;t sound.)&lt;/p&gt;

&lt;p&gt;But Go was designed from day one to be a high-performance systems language. It&amp;rsquo;s
the exact opposite of an ivory tower language designed for proofs and
publications. The goal of the language is to let real users ship real
applications. And, importantly, be able to ship &lt;em&gt;fast&lt;/em&gt; applications and &lt;em&gt;reason
about the performance of their code&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;Representing values&lt;/h2&gt;

&lt;p&gt;Up to this point, we&amp;rsquo;ve only been concerned with how types flow through the type
checker at compile time. But&amp;mdash;assuming there are no compile errors&amp;mdash;the
compiler eventually excretes some machine code which gets executed at runtime.
When that happens, all of the types the type checker poked at have cracked out
of their chrysalides and emerged as beautiful runtime value butterflies flitting
around in memory.&lt;/p&gt;

&lt;p&gt;The choice of how values of different types are represented in memory has a
massive effect on performance. So how do the rules around assignability and
subtyping interact with those representation choices?&lt;/p&gt;

&lt;p&gt;In many object-oriented languages (Java, C#, Python, etc.) values of object
types are represented by pointers to a heap-allocated structure. That structure
has some header information for garbage collection and runtime type tracking,
maybe some kind of pointer to a &lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_method_table&quot;&gt;vtable&lt;/a&gt; for virtual method dispatch, then
(finally!) the memory used to store the instance&amp;rsquo;s fields.&lt;/p&gt;

&lt;p&gt;There are differences between language implementations, of course, but objects
are generally both:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Slow to create since they are allocated on the heap.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fairly large with some additional bookkeeping information stored for every
single object.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Indirect, where a variable or field whose type is an object holds only a
pointer to that object, which is always on the heap. Accessing state on an
object always requires a pointer indirection which can be slow due
to &lt;a href=&quot;https://gameprogrammingpatterns.com/data-locality.html&quot;&gt;poor locality and cache misses&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Struct types&lt;/h3&gt;

&lt;p&gt;Those are unnacceptable costs for a systems language like Go. When you &lt;em&gt;want&lt;/em&gt;
runtime polymorphism, of course, you have to pay for it somehow. But if you&amp;rsquo;re
just storing data in memory, Go doesn&amp;rsquo;t want to make you pay for something you
aren&amp;rsquo;t using. To that end values of struct types in Go store just the bytes
needed for the struct&amp;rsquo;s own fields.&lt;/p&gt;

&lt;p&gt;If a field of a struct is itself some struct type, the inner struct&amp;rsquo;s fields are
splatted directly into the surrounding struct&amp;rsquo;s contiguous memory. If you have a
local variable of a struct type, the fields are stored right on the stack
(unless you take a pointer to the struct which escapes the function).&lt;/p&gt;

&lt;p&gt;This reduces memory overhead for structs and (probably more importantly for
performance) reduces pointer indirections. In a typical Java program, the heap
ends up being a huge spiderweb of tiny objects all pointing to each other and
the poor CPU an exhausted spider traipsing all over that web trying to find the
actual bits of data it wants to eat.&lt;/p&gt;

&lt;p&gt;In a typical Go program, more state is stored directly on the stack, and the
heap is &amp;ldquo;chunkier&amp;rdquo; with fewer, larger blobs of memory. The CPU does fewer hops
around the heap and chews on bigger data insects every time it does. That makes
memory access more cache friendly and also lightens the load on the garbage
collector since there are fewer individual allocations to traverse.&lt;/p&gt;

&lt;p&gt;(Java does something similar for primitive types, as does C# for struct types.)&lt;/p&gt;

&lt;h3&gt;Interface types&lt;/h3&gt;

&lt;p&gt;So structs are fast, great. But Go does feature runtime polymorphism in the form
of interfaces. How does interface method dispatch work if a value is stored
directly inline with no extra data to track its runtime type or method
implementations?&lt;/p&gt;

&lt;p&gt;The answer is that interfaces have a &lt;a href=&quot;https://research.swtch.com/interfaces&quot;&gt;completely different runtime
representation&lt;/a&gt;. A variable of interface type takes up two words:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A pointer to the type information used for runtime dispatch of the interface
methods (in other words, basically a &lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_method_table&quot;&gt;vtable&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A pointer to the actual data used by the concrete type implementing the
interface. (In cases where the data is just a single word, I think it&amp;rsquo;s
stored inline.)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The cute industry term for a representation like this is &lt;em&gt;fat pointer&lt;/em&gt;: instead
of a single word with a single pointer, it&amp;rsquo;s a pair of them, one for data and
one for some kind of metadata or bookkeeping information.&lt;/p&gt;

&lt;p&gt;One of the really cool things about Go is that you only use this representation&amp;mdash;you only pay for the increased memory and indirection cost of this
representation&amp;mdash;when you ask for it and when you need it. In places where you
need some virtual dispatch, you use an interface type and accept the overhead of
a fat pointer and indirection. But in places where you just want to store a
single concrete type, you use its underlying type and the memory is stored
directly inline.&lt;/p&gt;

&lt;p&gt;C# supports a similar distinction with classes and structs. But that&amp;rsquo;s mostly a
&amp;ldquo;declaration time&amp;rdquo; choice. Once you&amp;rsquo;ve decided something is a class, every
variable of that class&amp;rsquo;s type will store it as a reference to a heap-allocated
object. Conversely, if you&amp;rsquo;ve declared something as a struct, it will always be
stored inline on the stack or in the containing object (unless you go out of
your way to box it).&lt;/p&gt;

&lt;p&gt;In Go, the distinction between stored inline versus stored indirectly is made at
each use site. That leads to some additional complexity for the user: they
always have to think &amp;ldquo;should I use an interface, pointer, or struct type here?&amp;rdquo;,
but it gives them more fine-grained control over how they spend memory and
pointer indirection costs.&lt;/p&gt;

&lt;h2&gt;Implicit conversions&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;re close to understanding why Go lets you assign a struct to an interface
but not a slice of those same structs to a slice of that same interface.&lt;/p&gt;

&lt;p&gt;If structs and interfaces have entirely different memory representations, how
does assignability work at all? When you do:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;i&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Barker&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;i&quot;&gt;Bark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;barker&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Barker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Rex&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Shouldn&amp;rsquo;t that just mangle memory when it tries to treat the memory
representation of a struct as if it were an interface? The answer is of course
no. When compiling your code, Go knows the type of every variable and every
expression. At every assignment, variable declaration, or parameter binding,
it reports an error if the value isn&amp;rsquo;t assignable to the destination.&lt;/p&gt;

&lt;p&gt;When the value is assignable, the compiler also knows whether or not those types
are the same. If they&amp;rsquo;re exactly identical, then the assignment can be compiled
to a single register move or memory copy. When they are different but still
assignable types, the compiler &lt;em&gt;silently inserts code to convert the value
type&amp;rsquo;s memory representation to the destination type&amp;rsquo;s representation.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When you assign a value of a struct type to an interface type, the compiler
inserts code to build a fat pointer, wire up its method table pointer to the
right interface implementation, move the struct&amp;rsquo;s data onto the heap, etc.&lt;/p&gt;

&lt;p&gt;Likewise, if you assign one interface type to another, the compiler inserts code
to copy the data pointers over but look up the correct method table for the
destination interface given the type information of the value&amp;rsquo;s interface type.&lt;/p&gt;

&lt;p&gt;This right here is the reason that all composite types are invariant in Go.
When assigning a single value to a related but different type, the compiler
can easily insert fixed-cost code to convert the value&amp;rsquo;s runtime representation
to the destination type&amp;rsquo;s. But to convert a slice of some struct type to a
slice of an interface type would require an &lt;code&gt;O(n)&lt;/code&gt; traversal of the entire
slice to convert each element.&lt;/p&gt;

&lt;p&gt;Function types are even harder. In order to support covariant return types and
contravariant parameter types, the compiler would need to insert conversion code
&lt;em&gt;somewhere&lt;/em&gt;, but there&amp;rsquo;s no right place to put it. Putting it inside the
function itself doesn&amp;rsquo;t work because it might be called with a variety of
different parameter types and we don&amp;rsquo;t know what to convert it from. Putting it
at the callsite before the parameters are passed likewise wouldn&amp;rsquo;t work because
we don&amp;rsquo;t know what types every callback might require.&lt;/p&gt;

&lt;p&gt;There is potentially something clever you could do by supporting multiple
entrypoints to functions for each pair of source and destination types, but
with multiple parameters you quickly run the risk of exponential code size
explosions.&lt;/p&gt;

&lt;p&gt;This is why languages that do support subtyping and variance almost always have
a uniform memory representation for all objects that participate in the subtype
hierarchy.&lt;/p&gt;

&lt;h2&gt;Does Go have subtyping?&lt;/h2&gt;

&lt;p&gt;If you make it this far, congratulations. This ended up being a much deeper dive
than I expected. I learned a lot exploring this corner of the language space and
I hope you learned something too.&lt;/p&gt;

&lt;p&gt;Getting back to the original question, I think we could accurately describe Go&amp;rsquo;s
subtyping story in two equivalent ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Yes, Go has subtyping, but it has no support for variance and all
composite types are invariant.&lt;/strong&gt; This is, I think, how someone who is
focused only on the abstract semantics of the language would describe it. If
you were writing papers about type systems and needed to model Go&amp;rsquo;s you
might adopt this perspective. If you didn&amp;rsquo;t care about how Go could be
efficiently implemented because you were treating it purely as an
abstraction, then this is a good way to look at it and compare it to other
languages.&lt;/p&gt;

&lt;p&gt;The main problem with the looking at the language this way is that it
obscures &lt;em&gt;why&lt;/em&gt; every composite type is invariant.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;No, Go doesn&amp;rsquo;t have subtyping, but it does have implicit conversions
between some pairs of types.&lt;/strong&gt; This is how the designers of Go describe the
language. It&amp;rsquo;s the way you&amp;rsquo;d want to look at the language if you were tasked
with sitting down and writing a production quality implementation of it. It
describes what the language &lt;em&gt;actually does mechanically&lt;/em&gt; at compile time and
runtime.&lt;/p&gt;

&lt;p&gt;The challenge I found with this perspective is that it made it harder for me
to relate Go&amp;rsquo;s design choices to other more explicitly object-oriented
languages. You can look at this entire long article as my process of trying
to figure out the first interpretation in terms of this one.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I started digging into this not because I&amp;rsquo;m an active Go user and want to know
what&amp;rsquo;s going on under the hood. &lt;a href=&quot;https://dart.dev/&quot;&gt;My job&lt;/a&gt; and hobby is designing
programming languages, so I want to know how other languages work to see what
good ideas are out there to be harvested.&lt;/p&gt;

&lt;p&gt;So the question always on my mind at this point is, &amp;ldquo;&lt;em&gt;Why&lt;/em&gt; did they design it
this way and does that choice make sense in other languages?&amp;rdquo; And for this
specific design choice, I think it&amp;rsquo;s pretty cool. You can imagine a language
wanting three things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Non-uniform representation:&lt;/strong&gt; Values in memory take up only as much space
as they need and avoid pointer indirection when possible to maximize
runtime efficiency.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Polymorphism:&lt;/strong&gt; The ability to reuse code to work with a range of values
of different types.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Variance:&lt;/strong&gt; Sort of the &amp;ldquo;lifted&amp;rdquo; form of polymorphism: The ability to
reuse code to work with composite types that contain a range of inner types.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those are all nice to have features, but it&amp;rsquo;s really hard to get all three at
once. Most object-oriented languages sacrifice the first one to get the other
two. That gives you flexibility and expressiveness but at a pervasive runtime
cost spread throughout the entire program.&lt;/p&gt;

&lt;p&gt;Some statically-typed languages with simpler type systems like C, Pascal, and
SML (ignoring modules, which are a whole other thing) give up polymorphism and
variance which can give you more efficient representations at the cost of less
code reuse.&lt;/p&gt;

&lt;p&gt;Languages like C++ and Rust more or less give you all three at the expense of
the compiler monomorphizing and generating specialized versions of a function
for the different types it gets passed, which makes compilation much slower and
can have some runtime costs from all of the extra code sitting around in memory.&lt;/p&gt;

&lt;p&gt;Go is aiming for a sweet spot where they give you fast compiles, efficient
runtime execution, and as much flexibility as they can get away with. It
sacrifices variance but keeps polymorphism at the individual value level. That
married with implicit conversions enables non-uniform representation. Of the
three, variance is probably the least valuable for users, so I think that&amp;rsquo;s a
pretty smart trade-off.&lt;/p&gt;</content>
  </entry>

  <entry>
    <id>http://journal.stuffwithstuff.com/2023/08/04/representing-heterogeneous-data</id>
    <link type="text/html" rel="alternate" href="http://journal.stuffwithstuff.com/2023/08/04/representing-heterogeneous-data/"/>
    <title>Representing Heterogeneous Data</title>
    <published>2023-08-04T07:00:00.000Z</published>
    <updated>2023-08-04T07:00:00.000Z</updated>
    <author>
      <name>Robert Nystrom</name>
      <uri>http://journal.stuffwithstuff.com/</uri>
    </author>
    <content type="html">&lt;p&gt;As I mentioned in the &lt;a href=&quot;/2023/01/03/type-checking-if-expressions/&quot;&gt;last post&lt;/a&gt;, I&amp;rsquo;m working on taking my little videogame
scripting language and turning it into a statically typed one. As much as
possible, I&amp;rsquo;m trying to make the language simple and familiar. But sometimes
those goals are in opposition and the most familiar solution to a problem is
kind of a mess.&lt;/p&gt;

&lt;p&gt;So, I&amp;rsquo;m also exploring novel approaches and delving deeper into programming
language history to scavenge forgotten ideas.&lt;/p&gt;

&lt;h2&gt;The heterogeneous data problem&lt;/h2&gt;

&lt;p&gt;One problem every language has to solve is giving users a way to represent
&lt;em&gt;heterogeneous data&lt;/em&gt;. By that, I mean:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Data that might or might not be present.&lt;/strong&gt; Imagine you have a record for
storing a street address:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vgs&quot; data-lang=&quot;vgs&quot;&gt;&lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Address&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Int&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;street&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;apartmentNumber&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Int&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;city&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;zipCode&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Int&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But some addresses don&amp;rsquo;t have apartment numbers. How do you store the
apartment number when an address has one but also support its absence?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Data that might be in one of several different forms.&lt;/strong&gt; You&amp;rsquo;re making a
game where a hero can wield weapons. Melee weapons like swords have a single
number for how much damage they do. Ranged weapons like crossbows have a
pair of numbers for the minimum and maximum range they can reach. How do
different kinds of weapons have different fields?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are two sides of the exact same coin. You can treat optional data as data
that can be in one of two forms: present with an associated value or absent with
no value attached. Functional languages with an &lt;a href=&quot;https://en.wikipedia.org/wiki/Option_type&quot;&gt;option or maybe type&lt;/a&gt; do
exactly that: The language directly supports data that can have one of multiple
forms, and they model absent data using that.&lt;/p&gt;

&lt;p&gt;Conversely, you could model data being in one of several different forms by
having separate fields for all possible forms it could be in. At any point in
time, only one of the fields has a value and the others are all absent. If
you&amp;rsquo;ve ever found yourself building a struct or class and writing a comment that
says &amp;ldquo;If this field is blah then this other field will be null.&amp;rdquo; then you&amp;rsquo;ve
taken this path (and probably felt a little gross doing it).&lt;/p&gt;

&lt;h2&gt;What other languages do&lt;/h2&gt;

&lt;p&gt;I don&amp;rsquo;t know if broad language tours are your thing, but so much of my job
working on &lt;a href=&quot;https://dart.dev&quot;&gt;Dart&lt;/a&gt; involves researching how other languages solve a problem that
I can&amp;rsquo;t help myself anymore.&lt;/p&gt;

&lt;p&gt;There are a handful of solutions to the problem. I&amp;rsquo;ll just throw out the ones I
know:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Null.&lt;/strong&gt; The &lt;a href=&quot;https://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare/&quot;&gt;most famously maligned&lt;/a&gt; approach is to allow any
reference variable to potentially refer to &amp;ldquo;null&amp;rdquo;, &amp;ldquo;nil&amp;rdquo;, or nothing. This
means every reference type can directly also represent an absent value. Of
course, the problem is that many data fields &lt;em&gt;aren&amp;rsquo;t&lt;/em&gt; heterogeneous and
&lt;em&gt;should&lt;/em&gt; always be present. If you make every single reference nullable,
you&amp;rsquo;ve lost the ability to distinguish ones that can be absent from ones
that really shouldn&amp;rsquo;t be.&lt;/p&gt;

&lt;p&gt;This is why many newer statically typed languages either don&amp;rsquo;t support
null at all (Rust and most other statically typed functional languages) or
support &lt;a href=&quot;https://en.wikipedia.org/wiki/Nullable_type&quot;&gt;non-nullable types&lt;/a&gt; (Dart, Kotlin, and TypeScript).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Variant types.&lt;/strong&gt; A &amp;ldquo;variant&amp;rdquo; type is a type that can hold a value of one
of multiple different types. You can think of nullable references as a
limited variant type that can hold either a value of one specific type or
the special &lt;code&gt;null&lt;/code&gt; value but that&amp;rsquo;s it. Some languages have looser variants
that let you store values of any type in the same variable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Untagged unions.&lt;/strong&gt; C lets you define a data structure whose fields all
share overlapping memory. If you have a few different pieces of data that
are &lt;em&gt;disjoint&lt;/em&gt;&amp;mdash;you should only ever have one of them and not the others&amp;mdash;then this avoids the memory overhead of storing them all separately.&lt;/p&gt;

&lt;p&gt;However, in C, the language itself doesn&amp;rsquo;t keep track of &lt;em&gt;which&lt;/em&gt; piece of
data you have in the union. It will freely let you write one field and then
read out another and it will happily just reinterpret the bits in memory as
that other type. Efficient, yes. Safe? No.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Sum types.&lt;/strong&gt; Functional languages going all the way back to &lt;a href=&quot;https://en.wikipedia.org/wiki/ML_(programming_language)&quot;&gt;ML&lt;/a&gt; have a
feature also sometimes confusingly called &amp;ldquo;unions&amp;rdquo; that is fairly different.
Again, you have an object that can store one of a few different kinds of
data. But the language also stores a &lt;em&gt;tag&lt;/em&gt; in there so that it knows at
runtime which piece of data you have. (This is why they&amp;rsquo;re also called
&amp;ldquo;tagged unions&amp;rdquo; or &amp;ldquo;discriminated unions&amp;rdquo;.)&lt;/p&gt;

&lt;p&gt;The language uses &lt;a href=&quot;https://dart.dev/language/patterns#algebraic-data-types&quot;&gt;pattern matching&lt;/a&gt; to cleverly prevent you from
accessing the data as the wrong type.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Subtyping.&lt;/strong&gt; The object-oriented dual to sum types is subtyping: either
inheritance or interface implementation. In an object-oriented language, we
could model our weapon example like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Weapon&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;MeleeWeapon&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Weapon&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;t&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;damage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;t&quot;&gt;MeleeWeapon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;damage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;RangedWeapon&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Weapon&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;t&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;minRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;t&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;maxRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;t&quot;&gt;RangedWeapon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;minRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;maxRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Code that wants to work with weapons generally uses the &lt;code&gt;Weapon&lt;/code&gt; supertype.
The two subtypes for melee and ranged weapons each store the fields they
need. If you want to go all the way to an object-oriented style, these
fields would be private and then you&amp;rsquo;d have abstract methods in &lt;code&gt;Weapon&lt;/code&gt;
that are overridden in the subclasses to use them.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a complex, heavyweight approach, but a powerful and flexible one.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There may be a couple of other weirder language features you can use to model
varied data, but I think these are the big ones. Languages tend to pick and
choose from this list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Dynamically typed languages&lt;/strong&gt; essentially treat &lt;em&gt;all&lt;/em&gt; variables as variant
types. And all the ones I know also go ahead and allow null too. If you&amp;rsquo;re
not going to have any static checking anyway, you may as well be maximally
permissive, I guess.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Statically typed functional languages&lt;/strong&gt; lean really hard on sum types.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Object-oriented languages&lt;/strong&gt; obviously primarily use subtyping, though most
also have nullable reference types.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;C&lt;/strong&gt; makes pointer types nullable and supports untagged unions. It doesn&amp;rsquo;t
have (checked) variants or subtyping, but it can approximate both by
allowing pointers to be cast to different types. &lt;strong&gt;C++&lt;/strong&gt; takes everything C
has and also explicitly supports subtyping.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Newer, bigger multi-paradigm languages like C# and Swift tend to take just about
all of the approaches.&lt;/p&gt;

&lt;h2&gt;Whither for my little language?&lt;/h2&gt;

&lt;p&gt;OK, so what&amp;rsquo;s the right approach for my aspirationally simple and elegant
statically typed game scripting language?&lt;/p&gt;

&lt;p&gt;I quite like object-oriented programming in general, but subtyping adds a &lt;em&gt;lot&lt;/em&gt;
of complexity to a static type system, so my current plan is to not have
subtyping in the language at all. That rules out that approach.&lt;/p&gt;

&lt;p&gt;My goal is for the language to be fairly high level and expressive. It&amp;rsquo;s
supposed to be a language that makes making games &lt;em&gt;fun&lt;/em&gt;, not necessarily a
high-performance machine for engineering giant AAA games. I want you to have a
good time tinkering on pixelly 2D games, not write the next Unreal Engine in it.
To that end, the language is garbage-collected. That means memory safety, which
rules out untagged unions.&lt;/p&gt;

&lt;p&gt;Back when this language was dynamically typed, it had &lt;code&gt;nil&lt;/code&gt;, so that&amp;rsquo;s an
obvious approach. But I&amp;rsquo;ve spent, like, &lt;a href=&quot;/2011/10/29/a-proposal-for-null-safety-in-dart/&quot;&gt;way too much of my time&lt;/a&gt;
&lt;a href=&quot;https://medium.com/dartlang/announcing-dart-3-53f065a10635&quot;&gt;rooting out nullable references from Dart&lt;/a&gt; and the last thing I want
to do with my hobby project is to go back to square one.&lt;/p&gt;

&lt;p&gt;That basically just leaves sum types and variant types. Given that my language
is statically typed and not object-oriented, sum types are the obvious approach.
Everyone who uses sum types loves them, myself included. Algebraic datatypes are
just &lt;em&gt;cool.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And, in fact, I went ahead and implemented a protype of sum types and pattern
matching and destructuring in my language. It worked. It was&amp;hellip; just OK. To
explain why requires a little context&lt;/p&gt;

&lt;h2&gt;An imperative, procedural language&lt;/h2&gt;

&lt;p&gt;My language is unabashedly imperative. I &lt;em&gt;like&lt;/em&gt; imperative programming,
especially for scripting little games. Games are giant balls of mutable state.
I&amp;rsquo;ve watched my kids and many others learn to program, and imperatively
modifying stuff seems to be a natural way to think about defining a process.&lt;/p&gt;

&lt;p&gt;When you read a recipe for cake, you don&amp;rsquo;t see steps like: &amp;ldquo;Produce a new bowl
of batter which is the previous bowl of batter and 2 cups of sugar.&amp;rdquo; It just
says &amp;ldquo;Add 2 cups of sugar to the bowl.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Now, I know all of the problems with mutation of state and imperative code when
programming in the large. I get it. But this is supposed to be a fun little
language for fun little games and, to me, imperative programming fits that to a
tee.&lt;/p&gt;

&lt;p&gt;The basic vibe I have for the language is similar to Pascal, C, or BASIC: In
other words, a classic procedural language. Structures and functions. It looks
like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vgs&quot; data-lang=&quot;vgs&quot;&gt;&lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;MeleeWeapon&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;damage&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;attack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;weapon&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;MeleeWeapon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;monster&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Monster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;distance&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;distance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;You are out of range.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;damage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;rollDice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;weapon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;damage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;monster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;health&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;damage&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;You kill the monster!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;monster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;health&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;You wound the monster.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;monster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;health&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;monster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;health&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;damage&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What&amp;rsquo;s cool about simple procedural code is that even though I have no idea what
language you know and you &lt;em&gt;certainly&lt;/em&gt; have never programmed in &lt;em&gt;this&lt;/em&gt; one, I&amp;rsquo;m
still pretty confident that you understand this code.&lt;/p&gt;

&lt;h2&gt;With sum types&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s see how it looks with something like sum types:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vgs&quot; data-lang=&quot;vgs&quot;&gt;&lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Weapon&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;MeleeWeapon&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;damage&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;RangedWeapon&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;minRange&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Int&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;maxRange&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;attack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;weapon&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Weapon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;monster&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Monster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;distance&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;isInRange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;weapon&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;MeleeWeapon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;damage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;distance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;RangedWeapon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;distance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;distance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;max&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;isInRange&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;You are out of range.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;damage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;weapon&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;MeleeWeapon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;damage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;rollDice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;damage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;RangedWeapon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;min&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;monster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;health&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;damage&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;You kill the monster!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;monster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;health&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;You wound the monster.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;monster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;health&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;monster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;health&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;damage&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The sort of weird &lt;code&gt;rec&lt;/code&gt; syntax is defining a sum type, &lt;code&gt;Weapon&lt;/code&gt;, with type
constructors &lt;code&gt;MeleeWeapon&lt;/code&gt; and &lt;code&gt;RangedWeapon&lt;/code&gt;. I&amp;rsquo;m still noodling on the syntax.&lt;/p&gt;

&lt;p&gt;Now, the code here works. And it&amp;rsquo;s safe. The compiler and the structure of the
pattern matching code itself prevent you from accessing the wrong fields from a
weapon of a different kind. That&amp;rsquo;s cool.&lt;/p&gt;

&lt;p&gt;But it&amp;rsquo;s so much &lt;em&gt;weirder&lt;/em&gt; than the previous code. In a procedural language, the
idiomatic way to access fields on records is simply &lt;code&gt;record.field&lt;/code&gt;. That syntax
is in almost every programming language all the way back to Algol. But once you
hop over to sum types, you lose that syntax entirely and have to instead sort of
&amp;ldquo;invert&amp;rdquo; the code and use pattern matching and destructuring.&lt;/p&gt;

&lt;p&gt;I do love pattern matching and destructuring&amp;mdash;I just spent the past year of my
life &lt;a href=&quot;https://github.com/dart-lang/language/blob/main/accepted/3.0/patterns/feature-specification.md&quot;&gt;adding it to Dart&lt;/a&gt;. But for &lt;em&gt;this&lt;/em&gt; language, I&amp;rsquo;m pushing really
hard on simplicity. If possible, I don&amp;rsquo;t want &lt;em&gt;two&lt;/em&gt; different ways to access
state on a value, depending on whether the field is case-specific or not.&lt;/p&gt;

&lt;p&gt;More to the point, there&amp;rsquo;s no graceful way to handle &lt;em&gt;mutable&lt;/em&gt; sum type fields
using pattern matching. SML eschews mutability in general and then works around
it by allowing you to define explicit mutable ref types. But that&amp;rsquo;s definitely
not how my language rolls.&lt;/p&gt;

&lt;h2&gt;Variant records&lt;/h2&gt;

&lt;p&gt;There is &lt;em&gt;one&lt;/em&gt; other approach to heterogeneous data that I found that I didn&amp;rsquo;t
put in the list up there because, as far as I can tell, it&amp;rsquo;s basically a dead
end in the evolutionary history of programming languages.&lt;/p&gt;

&lt;p&gt;Some versions of Pascal have a thing called &amp;ldquo;variant records&amp;rdquo;. A record in
Pascal is your basic &amp;ldquo;collection of fields&amp;rdquo; struct type. A &lt;em&gt;variant&lt;/em&gt; record says
that &lt;em&gt;some&lt;/em&gt; of those fields are only accessible when the record is one of a few
different enumerated states.&lt;/p&gt;

&lt;p&gt;In C, it&amp;rsquo;s common to wrap an untagged union in a struct along with a tag enum
indicating which branch of the union is active:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;r&quot;&gt;WEAPON_MELEE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;r&quot;&gt;WEAPON_RANGED&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;WeaponType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;t&quot;&gt;WeaponType&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;t&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;damage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;melee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;t&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;minRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;t&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;maxRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;ranged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Weapon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using it looks something like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;t&quot;&gt;Weapon&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;weapon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;i&quot;&gt;weapon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;WEAPON_MELEE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;i&quot;&gt;weapon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;melee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;damage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A variant record in Pascal (as I understand it from the half dozen ancient
slideshows I&amp;rsquo;ve been able to find about it) essentially models that pattern
directly.&lt;/p&gt;

&lt;p&gt;The cool thing about this feature is that the variant-specific fields are
accessed using the same familiar field access syntax used everywhere else. That
also means variant-specific fields can be mutable.&lt;/p&gt;

&lt;p&gt;Of course, the &lt;em&gt;not&lt;/em&gt; cool thing about using that same field syntax is that
there&amp;rsquo;s nothing preventing you from accessing the &lt;em&gt;wrong&lt;/em&gt; variant field:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;t&quot;&gt;Weapon&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;weapon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;i&quot;&gt;weapon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;WEAPON_MELEE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;i&quot;&gt;weapon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;melee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;damage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;i&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Min range %d&lt;/span&gt;&lt;span class=&quot;e&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;weapon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;ranged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;minRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Oops.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is a type tag, but the language doesn&amp;rsquo;t know and doesn&amp;rsquo;t check it. This is
definitely true in C and I think true in Pascal. (It&amp;rsquo;s always hard to talk about
Pascal definitively because there&amp;rsquo;s no &amp;ldquo;Pascal&amp;rdquo;, just a huge family of
loosely-related Pascal-ish languages.)&lt;/p&gt;

&lt;p&gt;In a memory safe language like mine, I definitely don&amp;rsquo;t want users to be able
to reinterpret memory. But that&amp;rsquo;s a solvable problem.&lt;/p&gt;

&lt;h2&gt;Record cases&lt;/h2&gt;

&lt;p&gt;Which, finally, brings us to the feature I designed for my language. It&amp;rsquo;s very
close to variant records in Pascal. The type declaration looks just like the
sum type example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vgs&quot; data-lang=&quot;vgs&quot;&gt;&lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Weapon&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;MeleeWeapon&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;damage&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;RangedWeapon&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;minRange&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Int&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;maxRange&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The difference is that you don&amp;rsquo;t need to rely on pattern matching to access the
variant fields. They&amp;rsquo;re just fields:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vgs&quot; data-lang=&quot;vgs&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;attack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;weapon&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Weapon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;monster&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Monster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;distance&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;weapon&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;MeleeWeapon&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;distance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;or&lt;/span&gt;
      &lt;span class=&quot;i&quot;&gt;distance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;weapon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;minRange&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;or&lt;/span&gt;
      &lt;span class=&quot;i&quot;&gt;distance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;weapon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;maxRange&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;You are out of range.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;damage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;weapon&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;MeleeWeapon&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;rollDice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;weapon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;damage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;weapon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;maxRange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;weapon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;minRange&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;monster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;health&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;damage&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;You kill the monster!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;monster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;health&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;You wound the monster.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;monster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;health&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;monster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;health&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;damage&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course, you lose the compile-time safety that pattern matching gives you
where you can&amp;rsquo;t access fields of the wrong type. But we don&amp;rsquo;t need to go all the
way to C&amp;rsquo;s level of unsafety. Instead, when you access a case-specific field on
a record, if the record&amp;rsquo;s type tag is set to a different case, the access throws
a &lt;em&gt;runtime&lt;/em&gt; error. This preserves memory safety.&lt;/p&gt;

&lt;p&gt;This is a real trade-off. The feature I have here provides strictly less static
safety than using sum types. There is a slight performance cost to checking the
type tag when accessing case-specific fields. In return, you get simpler, more
familiar syntax for working with case-specific fields, including mutable ones.&lt;/p&gt;

&lt;p&gt;Also, it allows a single record to have a mixture of shared and case-specific
fields:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vgs&quot; data-lang=&quot;vgs&quot;&gt;&lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Weapon&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;bonus&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;MeleeWeapon&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;damage&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;RangedWeapon&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;minRange&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Int&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;maxRange&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;bonus&lt;/code&gt; can be accessed on all &lt;code&gt;Weapon&lt;/code&gt; instances, but the
other fields are case specific. It sort of combines product and sum types into a
single construct. I&amp;rsquo;ve found this to be really handy in practice.&lt;/p&gt;

&lt;p&gt;I haven&amp;rsquo;t decided if I&amp;rsquo;m totally sold on this feature yet. But in the
(admittedly small) amount of example code I&amp;rsquo;ve written using it so far, it seems
to feel pretty nice. For a small game scripting language, I think it may strike
a decent balance between static safety and simplicity.&lt;/p&gt;

&lt;h2&gt;Update: What about flow typing?&lt;/h2&gt;

&lt;p&gt;When I first posted this, the most common reply was why not do some sort of flow
typing? In code like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vgs&quot; data-lang=&quot;vgs&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;attack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;weapon&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Weapon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;monster&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Monster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;distance&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;weapon&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;RangedWeapon&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;distance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;weapon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;minRange&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;distance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;weapon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;maxRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;or&lt;/span&gt;
      &lt;span class=&quot;i&quot;&gt;distance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;You are out of range.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The compiler could do control flow analysis to determine that the &lt;code&gt;.minRange&lt;/code&gt;
and &lt;code&gt;.maxRange&lt;/code&gt; calls are guarded by an &lt;code&gt;is RangedWeapon&lt;/code&gt; and thus allow them.
But if you &lt;em&gt;don&amp;rsquo;t&lt;/em&gt; guard the code with that kind of check, you&amp;rsquo;d get an error:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vgs&quot; data-lang=&quot;vgs&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;attack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;weapon&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Weapon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;monster&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Monster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;distance&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;distance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;weapon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;minRange&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Error! Can&amp;#39;t access .minRange here.&lt;/span&gt;
     &lt;span class=&quot;i&quot;&gt;distance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;weapon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;maxRange&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;You are out of range.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is definitely a thing you can do! TypeScript, Kotlin, Flow, Dart, and
others all support it. The general technique is called &amp;ldquo;control flow analysis&amp;rdquo;
and the specific feature is called &amp;ldquo;flow typing&amp;rdquo;, &amp;ldquo;smart casts&amp;rdquo;, or &amp;ldquo;type
promotion&amp;rdquo; depending on which language.&lt;/p&gt;

&lt;p&gt;Is it a good fit for my language? I do like that it makes imperative code &amp;ldquo;just
work&amp;rdquo; while being safe. But that &amp;ldquo;just&amp;rdquo; is doing a lot of heavy lifting. We do
this analysis in Dart and it is &lt;em&gt;fantastically&lt;/em&gt; complex. Proving that a certain
piece of code can only be reached by going through some other piece of code
first gets hard quickly in the presence of loops and closures. It seems like
every release of Dart, we ship more extensions to flow analysis because users
keep expecting it to be smarter and smarter.&lt;/p&gt;

&lt;p&gt;Also, it isn&amp;rsquo;t sound in many cases that users expect to work. Once the variable
that you&amp;rsquo;re type testing can escape the current function, the compiler generally
can&amp;rsquo;t prove that it won&amp;rsquo;t be mutated between when you test its type and when you
use it as the more precise type later.&lt;/p&gt;

&lt;p&gt;Overall, my feeling is that it works out pretty well for Dart, but it&amp;rsquo;s a large
sort of messy feature that feels a little too magical. A goal with my hobby
language is that you should be able to have the whole language loaded into your
head and rarely be surprised by what it does. Flow analysis in Dart still fairly
often surprises me and I &lt;em&gt;literally work on the language full-time&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s also the question of what you promote the tested variable &lt;em&gt;to&lt;/em&gt;. In my
language as it currently stands, there is no subtyping. &lt;code&gt;MeleeWeapon&lt;/code&gt; isn&amp;rsquo;t a
subtype of &lt;code&gt;Weapon&lt;/code&gt;, it&amp;rsquo;s a case constructor. The &lt;code&gt;weapon is MeleeWeapon&lt;/code&gt; syntax
looks like a type test, but it&amp;rsquo;s really more like an enum case check.&lt;/p&gt;

&lt;p&gt;So after that test, what type would &lt;code&gt;weapon&lt;/code&gt; have? It would still have to be
&lt;code&gt;Weapon&lt;/code&gt;. I guess I could make this work by not promoting the &lt;em&gt;type&lt;/em&gt; but by
having the type checker track an extra &amp;ldquo;known case&amp;rdquo; property for each static
type and then use that. That might work. But even with that, I worry that it
would quickly become annoying. Let&amp;rsquo;s say you refactor the above code to:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vgs&quot; data-lang=&quot;vgs&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;attack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;weapon&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Weapon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;monster&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Monster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;distance&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;weapon&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;RangedWeapon&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;checkRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;weapon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;or&lt;/span&gt;
      &lt;span class=&quot;i&quot;&gt;distance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;You are out of range.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;checkRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;weapon&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Weapon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;distance&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Bool&lt;/span&gt;
  &lt;span class=&quot;i&quot;&gt;distance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;weapon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;minRange&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;distance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;weapon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;maxRange&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That no longer works. Inside &lt;code&gt;checkRange()&lt;/code&gt; the compiles has lost track that
&lt;code&gt;weapon&lt;/code&gt; is always a &lt;code&gt;RangedWeapon&lt;/code&gt;. You could come up with a way to annotate
that, but now we&amp;rsquo;re back to subtyping and all the complexity it involves.&lt;/p&gt;

&lt;p&gt;So, overall, yes, subtyping and flow analysis is a thing that could work here,
but I&amp;rsquo;m trying to avoid it because I feel like it&amp;rsquo;s a bigger lump of complexity
than I want to take on.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d be more inclined to do sum types and destructuring, even though it feels a
little weird in an imperative language, then do this kind of complex control
flow analysis.&lt;/p&gt;</content>
  </entry>

  <entry>
    <id>http://journal.stuffwithstuff.com/2023/01/03/type-checking-if-expressions</id>
    <link type="text/html" rel="alternate" href="http://journal.stuffwithstuff.com/2023/01/03/type-checking-if-expressions/"/>
    <title>Type Checking If Expressions</title>
    <published>2023-01-03T08:00:00.000Z</published>
    <updated>2023-01-03T08:00:00.000Z</updated>
    <author>
      <name>Robert Nystrom</name>
      <uri>http://journal.stuffwithstuff.com/</uri>
    </author>
    <content type="html">&lt;p&gt;I have this hobby project I&amp;rsquo;ve been hacking on for several years. It&amp;rsquo;s a fantasy
console, very much inspired by the delightful &lt;a href=&quot;https://www.lexaloffle.com/pico-8.php&quot;&gt;PICO-8&lt;/a&gt;. Like PICO-8, my
console has its own built-in scripting language. Because I&amp;rsquo;m me, I of course
took the opportunity to design an entirely new language.&lt;/p&gt;

&lt;p&gt;My goal for the project is a fun way to build small-ish 2D games. I want its
scripting language to be expressive enough to be joyful, but small enough that
you can learn the whole language and never need to consult a reference manual
after that. My dream is a goofy little pixellated IDE where you can get lost in
your own flow state and just make shit without having to periodically hit
StackOverflow and then get distracted by the wonders/horrors of the Internet.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t know if I&amp;rsquo;ll ever pull this off or the language will ever see the light of day, but it&amp;rsquo;s a fun therapeutic thing for me to noodle on.&lt;/p&gt;

&lt;h2&gt;A dynamically typed scripting language&lt;/h2&gt;

&lt;p&gt;To make a language that fits in your head (or at least my head, whose working
space seems to get smaller every year), I needed to jettison as many feature as
I could. My experience across a range of hobby and &lt;a href=&quot;https://dart.dev/&quot;&gt;not-so-hobby&lt;/a&gt;
languages is that static types add roughly an order of magnitude of complexity,
so types were one of the first things to go. Like most scripting languages, I
made mine dynamically typed.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vgs&quot; data-lang=&quot;vgs&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;onTick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;buttonHeld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;buttonHeld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;d&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0.5&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0.5&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;3.0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;3.0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3.0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3.0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;h&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0.8&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;v&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;200&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;buttonPressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
      &lt;span class=&quot;i&quot;&gt;playSequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;i&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;10.0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Another simplification I made is to eliminate the distinction between statements
and expressions. As in Ruby, Kotlin, and most functional languages, everything
is an expression. The previous chained &lt;code&gt;if&lt;/code&gt; could be written in a more
explicitly expression-y style like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vgs&quot; data-lang=&quot;vgs&quot;&gt;&lt;span class=&quot;i&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
  &lt;span class=&quot;i&quot;&gt;d&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;0.5&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;0.5&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unifying statements and expressions means the language doesn&amp;rsquo;t need a separate
&lt;code&gt;if&lt;/code&gt; statement and conditional expression. Also, I don&amp;rsquo;t know, I just like
expression-oriented languages.&lt;/p&gt;

&lt;h2&gt;An imperative language&lt;/h2&gt;

&lt;p&gt;Even though the language is expression-oriented, it&amp;rsquo;s not explicitly
&lt;em&gt;functional&lt;/em&gt;. Functional languages are close to my heart, but this is a game
scripting language. A game world is basically a big ball of incrementally
updated mutable state. For the kind of programs and user experience I have in
mind, I think an imperative, procedural style is easy to learn, and fun to
program in. I want users thinking about their game, not, like, monads and
persistent data structures.&lt;/p&gt;

&lt;p&gt;So while everything is an expression in my language, it doesn&amp;rsquo;t at all shy away
from side effects and imperative control flow. Variables are assignable. Fields
are settable. There are loops and breaks and early returns. All of those are as
natural and idiomatic as they are in C++, JavaScript, C#, or any of the other
languages that the majority of the world&amp;rsquo;s code is written in.&lt;/p&gt;

&lt;h2&gt;Handmade Seattle&lt;/h2&gt;

&lt;p&gt;Last fall, I attended the wonderful &lt;a href=&quot;https://handmade-seattle.com/&quot;&gt;Handmade Seattle&lt;/a&gt; conference. I had a
particularly inspiring conversation with &lt;a href=&quot;https://wiki.xxiivv.com/site/home.html&quot;&gt;Devine Lu Linvega&lt;/a&gt; about their
tiny &lt;a href=&quot;https://wiki.xxiivv.com/site/uxn.html&quot;&gt;uxn&lt;/a&gt; VM. They had this idea to build the smallest possible system and
programming language for their own use. Then they rebuilt their own personal
tools&amp;mdash;text editor, music stuff, etc.&amp;mdash;using that.&lt;/p&gt;

&lt;p&gt;Now, UXN is &lt;em&gt;really&lt;/em&gt; minimal. I get a certain satisfaction from programming in
assembly, but it&amp;rsquo;s not the language I would want to use for my own joy. But it
did make me rethink the scripting language for my fantasy console. I picked
dynamic types because that made the language smaller and I figured it would be a
good fit for my (entirely hypothetical at this point) users.&lt;/p&gt;

&lt;p&gt;But is it what &lt;em&gt;I&amp;rsquo;d&lt;/em&gt; want to use to make little 2D videogames? The game I&amp;rsquo;ve
spent the most time hacking on is my also-perennially-incomplete roguelike
&lt;a href=&quot;https://github.com/munificent/hauberk&quot;&gt;Hauberk&lt;/a&gt;. I&amp;rsquo;ve rewritten it several times, but every incarnation has been in
a statically typed language: C++, C#, Java, and now Dart.&lt;/p&gt;

&lt;p&gt;My most pleasurable time spent working on Hauberk is when I&amp;rsquo;m refactoring and
the type system guides me to what&amp;rsquo;s left to clean up. I just really like working
with types. (It&amp;rsquo;s OK if you don&amp;rsquo;t. As our Burger Sovereign says, have it your
way.)&lt;/p&gt;

&lt;p&gt;After talking to Devine, I realized that if I was making this fantasy console
&lt;em&gt;for me personally&lt;/em&gt;, its language would be typed. So over the past few weeks,
I&amp;rsquo;ve been sketching out a statically typed variant of my console&amp;rsquo;s scripting
language. I don&amp;rsquo;t know if it will really come together, but I thought maybe it
would be fun to write about the exploration.&lt;/p&gt;

&lt;h2&gt;Type checking &lt;code&gt;if&lt;/code&gt; expressions&lt;/h2&gt;

&lt;p&gt;I slapped together a new prototype interpreter for my language. (The main
implementation is a bytecode VM in C++, which is pretty fast but not exactly
easy to hack on.) Then I dutifully started adding a type checking pass to it.
One of the first challenges I hit is how to type check &lt;code&gt;if&lt;/code&gt; expressions.&lt;/p&gt;

&lt;p&gt;As the title up there implies, that&amp;rsquo;s what this post is really about. Because it
turns out that having &lt;code&gt;if&lt;/code&gt; be an expression while also fully embracing an
imperative style gets a little weird when it comes to type checking.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll walk through a bunch of examples and build up to the type checking rules I
have settled on (so far, at least). We&amp;rsquo;ll start simple:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vgs&quot; data-lang=&quot;vgs&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;love&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;isFriday&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;in love&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;not in love&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We need a type for the &lt;code&gt;if&lt;/code&gt; expression so that we can infer a type for the
variable &lt;code&gt;love&lt;/code&gt;. In this case, the type is obviously String since both the then
and else branches evaluate to strings.&lt;/p&gt;

&lt;p&gt;So the basic rule we&amp;rsquo;ll start with is: &lt;strong&gt;An &lt;code&gt;if&lt;/code&gt; expression&amp;rsquo;s type is the type
of the branches.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;Different branch types&lt;/h2&gt;

&lt;p&gt;But what if they don&amp;rsquo;t have the same type? What about:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vgs&quot; data-lang=&quot;vgs&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;love&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;isFriday&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;in love&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, &lt;code&gt;love&lt;/code&gt; could end up being initialized to either a &lt;code&gt;String&lt;/code&gt; or an &lt;code&gt;Int&lt;/code&gt;.
Now what type do we choose? &lt;a href=&quot;https://crystal-lang.org/reference/1.7/syntax_and_semantics/if.html&quot;&gt;Crystal&amp;rsquo;s answer&lt;/a&gt; is &lt;code&gt;String | Int&lt;/code&gt;. Union
types are cool but definitely too complex for the language I&amp;rsquo;m trying to make.&lt;/p&gt;

&lt;p&gt;In Kotlin, which is also typed and expression-oriented, the answer is,
apparently, &lt;code&gt;{Comparable&amp;lt;CapturedType(*)&amp;gt; &amp;amp; java.io.Serializable}&lt;/code&gt;. Which I have
to say does not seem &lt;em&gt;super&lt;/em&gt; helpful.&lt;/p&gt;

&lt;p&gt;I assume that the compiler goes looking for a shared supertype of the two branch
types, String and Int. Since String and Int both happen to implement Comparable
(and I guess some serialization interface), you get that as the common
supertype.&lt;/p&gt;

&lt;p&gt;In object-oriented languages with subtyping and where the type hierarchy forms a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Lattice_(order)&quot;&gt;lattice&lt;/a&gt;, this common supertype is the least upper bound, and it&amp;rsquo;s a natural
answer to the problem. It shows up in other languages when type-checking
conditional &lt;code&gt;?:&lt;/code&gt; expressions and a few other places.&lt;/p&gt;

&lt;p&gt;It works, but, as we can see in the Kotlin example here, it doesn&amp;rsquo;t always
produce intuitive or useful results. More to the point, one of the &lt;em&gt;other&lt;/em&gt;
features I jettisoned from my scripting language is subtyping, so LUB is off
the table.&lt;/p&gt;

&lt;p&gt;Without subtyping, every type is disjoint: a value of one type is never a value
of any other type too. That means that if the two branches of an &lt;code&gt;if&lt;/code&gt; have
different types, then there is no possible type I can infer that contains all of
their values. The only other response is to make it a type error.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s the next rule: &lt;strong&gt;If the branches have different types, it&amp;rsquo;s a compile
error.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;Imperative ifs and unused values&lt;/h2&gt;

&lt;p&gt;That rule does work: It&amp;rsquo;s basically SML&amp;rsquo;s rule for &lt;code&gt;if&lt;/code&gt; expressions. But I want
my scripting language to feel familiar to users programming in an imperative
style. Consider:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vgs&quot; data-lang=&quot;vgs&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;daysNotInLove&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;isFriday&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
  &lt;span class=&quot;i&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;in love&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;i&quot;&gt;daysNotInLove&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, the two branches have different types. The then branch has type String
because in my language, &lt;code&gt;print()&lt;/code&gt; returns its argument. (That makes it handy for
stuffing some debug printing in the middle of an expression.) The else branch
has type Int because an assignment expression yields the assigned value.&lt;/p&gt;

&lt;p&gt;According to the previous rule, this is a type error because we don&amp;rsquo;t know what
type of value the &lt;code&gt;if&lt;/code&gt; expression evaluates to.&lt;/p&gt;

&lt;p&gt;But it doesn&amp;rsquo;t &lt;em&gt;matter&lt;/em&gt; since the &lt;code&gt;if&lt;/code&gt;&amp;rsquo;s value isn&amp;rsquo;t being used anyway. There&amp;rsquo;s
no need for the compiler to yell at you, and code like this turns out to be very
common in practice.&lt;/p&gt;

&lt;p&gt;To address this, the type checker takes some of the surrounding context into
account. When an &lt;code&gt;if&lt;/code&gt; expression appears in a location where its value won&amp;rsquo;t be
used, then it&amp;rsquo;s no longer an error for the branches to have different types. How
complex is tracking that context? Not too bad, actually. There are a handful of
cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In a block or function body where you have a sequence of expressions, the
result is the value of the last expression. The values of all of the
preceding expressions are discarded. So in an expression sequence, all but
the last expression are in a &amp;ldquo;value not used&amp;rdquo; context.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Like other expression-oriented languages, functions in my language
implicitly return the value that the function body expression evaluates to:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vgs&quot; data-lang=&quot;vgs&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;three&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Int&lt;/span&gt;
  &lt;span class=&quot;i&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;About to return three...&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;onInit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;i&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;three&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Prints &amp;quot;About to return three...&amp;quot; then &amp;quot;3&amp;quot;.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But if a function has no return type (the same as &lt;code&gt;void&lt;/code&gt; or unit in other
languages), it doesn&amp;rsquo;t return a value. In that case, even the last
expression in the body is a &amp;ldquo;value not used&amp;rdquo; context.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Loop expressions don&amp;rsquo;t produce values, so their body is always a &amp;ldquo;value not
used&amp;rdquo; context. (I&amp;rsquo;m toying with the idea of allowing &lt;code&gt;break&lt;/code&gt; expressions to
yield a value from the loop, but they don&amp;rsquo;t right now.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Whenever an &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;match&lt;/code&gt; expression is in a &amp;ldquo;value not used&amp;rdquo; context,
then we push that context into the branches too. Likewise with the
right-hand side of &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; logic operators since those are control
flow expressions to.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&amp;rsquo;s it. After I came up with this rule, I did some poking around and it seems
like Kotlin does something similar. It frames it by saying that when you use an
&lt;code&gt;if&lt;/code&gt; &amp;ldquo;as an expression&amp;rdquo; then the two branches must have the same type. That&amp;rsquo;s
roughly the distinction I&amp;rsquo;m making here too: when an &lt;code&gt;if&lt;/code&gt; appears in a
statement-like position where its value is discarded, then the branches can
disagree.&lt;/p&gt;

&lt;h2&gt;Missing else&lt;/h2&gt;

&lt;p&gt;This rule allows us to support an even more important flavor of &lt;code&gt;if&lt;/code&gt; expressions
that are common in imperative code: those without &lt;code&gt;else&lt;/code&gt; clauses. In SML and
some other functional languages, every &lt;code&gt;if&lt;/code&gt; expression &lt;em&gt;must&lt;/em&gt; have an &lt;code&gt;else&lt;/code&gt;
clause because the presumption is that you will be using the value produced by
the expression and you need a value even when the condition is false.&lt;/p&gt;

&lt;p&gt;But in imperative code, it&amp;rsquo;s obviously common to have &lt;code&gt;if&lt;/code&gt;s whose main purpose
is a side effect and where an &lt;code&gt;else&lt;/code&gt; clause isn&amp;rsquo;t needed. In fact, when I
analyzed a huge corpus of real-world Dart, I found that only about 20% of &lt;code&gt;if&lt;/code&gt;
statements had &lt;code&gt;else&lt;/code&gt; branches.&lt;/p&gt;

&lt;p&gt;Now that we understand when an &lt;code&gt;if&lt;/code&gt; expression is in a context where it&amp;rsquo;s value
isn&amp;rsquo;t used, we can allow omitting &lt;code&gt;else&lt;/code&gt; branches those. The next rule is: &lt;strong&gt;An
&lt;code&gt;if&lt;/code&gt; expression can can omit the else branch when in a context where its value
isn&amp;rsquo;t used.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;Exiting branches&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;re almost there. It&amp;rsquo;s starting to feel like we really are type-checking an
imperative language, not ML in BASIC&amp;rsquo;s clothing. I coded this up and
successfully wrote some little example programs. It was starting to feel like a
real typed language!&lt;/p&gt;

&lt;p&gt;I could stop here, but there&amp;rsquo;s one last bit of type checking logic for &lt;code&gt;if&lt;/code&gt;
expressions. I haven&amp;rsquo;t decided if it&amp;rsquo;s worth keeping. Consider:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vgs&quot; data-lang=&quot;vgs&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;onInit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;love&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;isFriday&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;in love&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When &lt;code&gt;isFriday&lt;/code&gt; is true, then this initializes &lt;code&gt;love&lt;/code&gt; with the string &amp;ldquo;in love&amp;rdquo;.
When &lt;code&gt;isFriday&lt;/code&gt; is false, then the &lt;code&gt;return&lt;/code&gt; exits from the function entirely so
&lt;code&gt;love&lt;/code&gt; never gets initialized at all. So even though these branches don&amp;rsquo;t
evaluate to the same type, &lt;code&gt;love&lt;/code&gt; is always initialized with a String. This code
should be fine.&lt;/p&gt;

&lt;p&gt;Or, at least, it should be &lt;em&gt;sound&lt;/em&gt; according to the type system. Whether this is
&lt;em&gt;good style&lt;/em&gt; is definitely open for debate. I could probably not allow code like
this. But my default stance is to be as permissive as possible without breaking
soundness, and this is a corner where I can be.&lt;/p&gt;

&lt;p&gt;The trick is that expressions like &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;return&lt;/code&gt;, and &lt;code&gt;throw&lt;/code&gt; are special. While they are expressions &lt;em&gt;grammatically&lt;/em&gt;, they don&amp;rsquo;t actually evaluate to values. If you do:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vgs&quot; data-lang=&quot;vgs&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That &lt;code&gt;x&lt;/code&gt; never gets initialized. A &lt;code&gt;return&lt;/code&gt; expression always jumps out of the
surrounding code instead of producing a value. Languages that have expressions
which can do control flow model this by giving these expressions a special type
variously called &lt;a href=&quot;https://en.wikipedia.org/wiki/Bottom_type&quot;&gt;&amp;ldquo;bottom&amp;rdquo;, &lt;code&gt;‚ä•&lt;/code&gt; (&amp;ldquo;up tack&amp;rdquo;), &lt;code&gt;Never&lt;/code&gt;, &lt;code&gt;noreturn&lt;/code&gt;, etc&lt;/a&gt;.
This type means &amp;ldquo;You&amp;rsquo;re never gonna get a value from me.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;When checking the two branches of an &lt;code&gt;if&lt;/code&gt; expression, if one branch has that
special type (the compiler calls it &amp;ldquo;unreachable&amp;rdquo; right now), then we just use
the type of the other branch for the &lt;code&gt;if&lt;/code&gt; expression&amp;rsquo;s type. That allows the
above example to work. In the sample code I&amp;rsquo;ve written so far, it rarely comes
into play. It&amp;rsquo;s usually more idiomatic to hoist that control flow out of the
&lt;code&gt;if&lt;/code&gt; entirely. But we can type check it easily, so the language lets you do it.&lt;/p&gt;

&lt;h2&gt;The rules altogether&lt;/h2&gt;

&lt;p&gt;That&amp;rsquo;s where I&amp;rsquo;m at right now. It took me a few iterations to get to a point
where all the &lt;code&gt;if&lt;/code&gt; expressions I expected to be able to write in my example
programs actually type checked correctly but it seems pretty stable now. The
rules are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;When an &lt;code&gt;if&lt;/code&gt; expression is in a context where its value is not used, then
there is no restriction on what types the branches can have and we&amp;rsquo;re done.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Otherwise, there must be an &lt;code&gt;else&lt;/code&gt; branch and:&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If both branches have type &amp;ldquo;unreachable&amp;rdquo; then the &lt;code&gt;if&lt;/code&gt; expression&amp;rsquo;s type is
also &amp;ldquo;unreachable&amp;rdquo;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If one branch has type &amp;ldquo;unreachable&amp;rdquo; then the &lt;code&gt;if&lt;/code&gt; expression&amp;rsquo;s type is the
type of the other branch.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Otherwise, the two branches must have the same type and the type of the &lt;code&gt;if&lt;/code&gt;
is that type.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>

  <entry>
    <id>http://journal.stuffwithstuff.com/2022/02/13/stupid-dog</id>
    <link type="text/html" rel="alternate" href="http://journal.stuffwithstuff.com/2022/02/13/stupid-dog/"/>
    <title>Stupid Dog</title>
    <published>2022-02-13T08:00:00.000Z</published>
    <updated>2022-02-13T08:00:00.000Z</updated>
    <author>
      <name>Robert Nystrom</name>
      <uri>http://journal.stuffwithstuff.com/</uri>
    </author>
    <content type="html">&lt;p&gt;It&amp;rsquo;s my 30th birthday, and Megan and I are walking down Duval Street in Key
West. There is a pet store here, which must be the most unlikely place for a pet
store in all the world. Everyone here is a tourist. What kind of idiot buys a
dog while on vacation?&lt;/p&gt;

&lt;p&gt;You are in the window surrounded by other puppies. A tottering orange ball of
fuzz with little triangular ears, like a fox who lost its tail. Ink-black eyes
and round button nose. My wife, pregnant and hormonal, is instantly in love with
you. We go inside to play with the puppies, because why would you not want to
play with cute puppies while on vacation? You curl up in my cupped hands, calm
and sleepy.&lt;/p&gt;

&lt;figure&gt;
&lt;img class=&quot;framed&quot; src=&quot;/image/2022/02/01.jpg&quot;&gt;
&lt;/figure&gt;

&lt;p&gt;Megan gives me a lingering series of Significant Looks, which I do my best to
ignore. I generally try to avoid making dumb decisions, and impulsively buying a
puppy while on vacation eight hours away from home is clearly in that category.&lt;/p&gt;

&lt;p&gt;I make a silent vow to never let Megan know that I also fell in love with you
the moment I saw you.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;It&amp;rsquo;s the next day and Megan and I are sitting at a Burger King across the street
from the pet store. She is presenting her case for why we should buy this very
cute half-Pomeranian half-Yorkie puppy even though:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We are on vacation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We are expecting our first child in a couple of months and already have more
than enough to keep us busy.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We have absolutely no plans or intentions on getting a pet. Our house is
&lt;em&gt;tiny&lt;/em&gt; and barely fits the two of us and two cats, much less a baby and a
dog.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We are an eight-hour drive from home.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You are, in fact, quite expensive.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Do I even need to write the numbered list here? It&amp;rsquo;s obviously a terrible idea.
Family members that we&amp;rsquo;re vacationing with look at us like we are idiots when we
say we&amp;rsquo;re considering it.&lt;/p&gt;

&lt;p&gt;I think very very hard about my beloved first dog, Snickers, named because she
was chocolate brown with swirls of white and caramel. She was a Sheltie, the
smallest of her litter, a funny little runt of a puppy who entered my life when
I was feeling small and cast out too.&lt;/p&gt;

&lt;p&gt;When I was seven, I was playing in a neighbor&amp;rsquo;s front yard while she was out
with me. I got distracted and heard a screech of tires behind me. When I turned
around, Snickers was on her back motionless in the street. I carried her limp
body all the way back to my house. The shocked look on my mother&amp;rsquo;s face when she
saw me arrive, tears streaming down my face, broken dog in my arms, is my most
vivid childhood memory.&lt;/p&gt;

&lt;p&gt;I am the kind of person who analyzes 100 steps ahead. Getting a puppy means
buying a ticket for the whole ride, including the end of it, in whatever form it
takes. I am choosing to break my own heart. What if it&amp;rsquo;s not worth all that
pain?&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Megan is driving us north from Miami. You are sleeping in my lap, impossibly
warm, cold wet nose pressed against my arm. We talk about names. You almost end
up &amp;ldquo;Dorito&amp;rdquo; because of your triangular orange ears, but it doesn&amp;rsquo;t stick.
Instead, you become &amp;ldquo;Ginny&amp;rdquo;. Not for Ginny Weasely like everyone assumes but
short for the liquor genever.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;When we buy you, I also buy some books on dog training because I am the kind of
person who wants to be a very good dog owner that follows all the dog owning
rules. Rule #1 is crate training starts immediately. A dog won&amp;rsquo;t respect you as
the pack leader if they are free to sleep where you do. They&amp;rsquo;ll think they run
the pack.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s late at night by the time we get home, and all the pet stores have closed.
Next to the bed, I try to improvise some crate-like thing for your first night
involving cardboard boxes, a cooler, and anything else I can find around the
house. You yowl in terror, or perhaps just disappointment at the poor
accommodations.&lt;/p&gt;

&lt;p&gt;Eventually, I give up. I pick you up and lay you on my chest. You are asleep
instantly, tiny heart fluttering against mine.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;You are taking your sweet time exploring every single corner of the jungle that
is our backyard, looking for lizards. It is three o&amp;rsquo;clock in the morning. The
green and brown anoles are sleeping under leaves where you never find them. I am
shambling after you in pajama pants and old boots telepathically trying to get
you to pee with every ounce of willpower I have.&lt;/p&gt;

&lt;p&gt;I am keenly aware of my dwindling opportunities to get a good night&amp;rsquo;s sleep
before the baby arrives. Yet here we are. Over the past few weeks Megan and I
have mostly learned to tell the difference between your yowl that means &amp;ldquo;I am a
puppy and don&amp;rsquo;t like being alone in this crate&amp;rdquo; and the yowl that means &amp;ldquo;My
bladder is too small to last the night and I need to pee right now.&amp;rdquo; Sorry about
the mistakes we made while figuring that out.&lt;/p&gt;

&lt;p&gt;I pee in the yard too, hoping you&amp;rsquo;ll get the hint. I deeply regret ever seeing
you in that pet store window. Half-awake, I have vivid fantasies of building a
time machine, traveling back in time, and slapping myself in the middle of that
Key West Burger King.&lt;/p&gt;

&lt;p&gt;After patrolling the perimeter of the yard in tiny puppy steps, twice, you
finally pee. I tell you what a good girl you are and give you a treat.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Because you are an adorable tiny puppy and I am a nerd with a DSLR, I take
copious photos of you and upload them to Flickr. One day, I get an email from
cuteoverload.com asking if they can share some of them. The next day, you are
Internet famous. Millions of people look at your butthole.&lt;/p&gt;

&lt;figure&gt;
&lt;img class=&quot;framed&quot; src=&quot;/image/2022/02/02.jpg&quot;&gt;
&lt;/figure&gt;

&lt;p&gt;You are oblivious to your celebrity, as you are to most things in life.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;As you grow, your puppy fuzz is replaced by silk, still orange on top and white
on the bottom like a fox. The whorls of fur behind your ears are the softest
thing I have ever felt in my life. I run my fingers through them constantly, to
your delight.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;I take you on walks every day, still trying to be some kind of adequate dog
owner. The training manuals say that to teach a puppy walk properly on a leash
you should stop walking whenever the dog pulls against it. Then wait patiently
until the dog turns and makes eye contact with you. That way, they learn that
you are in charge of walking and that pulling means the walk ends.&lt;/p&gt;

&lt;p&gt;It takes us half an hour to walk a single block. Despite repeating this process
hundreds of times, you fail to make the mental connection that if you stop
yanking on the leash then we can actually walk where you want to go. You never,
ever stop pulling on the damn leash.&lt;/p&gt;

&lt;p&gt;I start a running joke of whispering insults in your ear that sound like terms
of endearment. It&amp;rsquo;s not like you speak English, so when I say, &amp;ldquo;I hate your
face,&amp;rdquo; all you hear is the caring tone I use to say it. &amp;ldquo;You&amp;rsquo;re so fucking
stupid,&amp;rdquo; I coo into your ear. I rub your fuzzy belly to make sure you know how
much I love your stupid face.&lt;/p&gt;

&lt;figure&gt;
&lt;img class=&quot;framed&quot; src=&quot;/image/2022/02/03.jpg&quot;&gt;
&lt;/figure&gt;
&lt;hr /&gt;

&lt;p&gt;Five weeks earlier than expected, Megan and I become parents. We haven&amp;rsquo;t had
time to set up a nursery yet so we hastily buy a bassinet. The first night the
baby is home from the NICU, we realize there isn&amp;rsquo;t enough room at the foot of
the bed for both the bassinet and the crate.&lt;/p&gt;

&lt;p&gt;We let you sleep on the bed. You are immensely proud of earning a place on the
bed while the new pink hairless dog is relegated to the funny crate.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;You are listless and frothing at the mouth. Megan and I are terrified. You had
been in the yard stalking all of the various animals that live in the
barely-tamed-jungle that is Orlando. This time, you found a toad and you&amp;rsquo;d
managed to get your mouth on it before I could get to you. Did it poison you?
Are you going to die?&lt;/p&gt;

&lt;p&gt;We rush you to the emergency vet. She takes your vitals while you sit there limp
and apathetic. Your blood sugar is dangerously low. She gives you a treat. Then
another. You immediately perk up. You&amp;rsquo;re fine, totally fine.&lt;/p&gt;

&lt;p&gt;I remember that a couple of days prior I put my foot down and decided you were
ready to graduate from soft puppy food to kibble which is better for your teeth.
You were uninterested in the new food. I confidently told Megan, &amp;ldquo;If she gets
hungry enough, she&amp;rsquo;ll eat. It&amp;rsquo;s not like she&amp;rsquo;s going to starve herself.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Apparently, somehow during the thousands of years humans spent turning a wolf
into the strange-colored, tiny, eternally cub-like thing that you are, we broke
your survival instinct. Sorry about that. We learn to mix some wet food into
your kibble.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;It is something like four in the morning and Megan and I are pushing a baby
stroller and a luggage cart across the SeaTac airport with you and the cats
crammed in pet carriers perched on top of our suitcases. We&amp;rsquo;ve just flown 3,000
miles to our new home. Our brilliant idea to take a red-eye flight so the baby
would sleep through it failed disastrously. Megan and I spent the entire flight
taking turns trying to get the baby to sleep on our laps. You seem to have
mostly survived the flight intact. The cats were less thrilled by the
experience.&lt;/p&gt;

&lt;p&gt;We get to the hotel, and I take you out just as the sun starts to come up. The
parking lot of an Extended Stay in Redmond is my first view of our new home in
the Pacific Northwest. It&amp;rsquo;s fifty degrees and rainy. I&amp;rsquo;m beyond tired. You take
your sweet time before finding an acceptable spot to pee.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;We are on PetFinder looking for a second dog. You are just so&amp;hellip; weird. Not food
motivated. Impossible to train. High strung. Frankly, not very smart. You bark
all the time, at everything. We tell ourselves that a second dog will give you
company when we&amp;rsquo;re out. They will teach you how to dog like a normal dog.&lt;/p&gt;

&lt;p&gt;We find a part-Chihuahua part rat terrier that is, in defiance of everything I
understand about genetics, practically your twin. We bring you to meet him at a
dog park to see if you get along. You bark a lot. He tolerates you admirably
well. For the rest of your lives, you will be his asshole boss. You&amp;rsquo;ll eat the
best parts out of his food bowl and steal his treats. When he tries to sit next
to us on the couch, you will wedge yourself in the middle and glare at us both.&lt;/p&gt;

&lt;p&gt;He will live in fear of your ire which is capricious and often. We name him
Benny for &amp;ldquo;beignet&amp;rdquo; because he&amp;rsquo;s golden with a sprinkling of white on top.&lt;/p&gt;

&lt;p&gt;Maybe they were right about the crate training.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;We rent a house out in the sticks. There is a green belt behind the yard and we
get deer sometimes. Occasionally, we hear an owl hoot. Inexplicably, you are
absolutely terrified of the sound. Megan and I hoot at you to tease you and you
bark back at us, shivering in fear.&lt;/p&gt;

&lt;p&gt;Later, we buy a house with a fenced in back yard. You stand proudly in the grass
waiting for me to make eye contact with you. The moment I do, you throw your
head back in delight and run full tilt to me. Over and over again from Megan to
me and back. You wear yourself out and lay in the sun panting &amp;ldquo;keh keh keh&amp;rdquo;.
When you snuggle with us on the couch later, you still smell like dirt and
grass.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;I am in the basement awkwardly taking photos of myself. I&amp;rsquo;m speaking at a
conference and they asked for a headshot. You wander in and I pick you up and
start taking pictures of us together. They are my favorite photos of myself.&lt;/p&gt;

&lt;figure&gt;
&lt;img class=&quot;framed&quot; src=&quot;/image/2022/02/04.jpg&quot;&gt;
&lt;/figure&gt;

&lt;p&gt;When I finish my writing my book, I put one of them on the back cover. I get
email from readers telling me how delighted they are with the cover.&lt;/p&gt;

&lt;p&gt;I set that photo as my profile image on all of my various accounts. When ride
share drivers pick me up, they joyfully tell me in not-great English that they
love my dog. You are still a celebrity.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;I am in bed staring at the dark ceiling, doing math in my head. Tonight, you are
the same age in dog years that I am in real years. From this moment on, you are
older than me. I picture you racing ahead of me into the future. I try not to
think of where that path leads or when you&amp;rsquo;ll get there.&lt;/p&gt;

&lt;p&gt;You are sleeping stretched out, pressed against my thigh, trying to get every
square millimeter of contact that you can. I run my fingers through the silky
fur on your back, feel your breath rise and fall.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;We rent a cabin on the Pacific coast. You spend the first half of the drive
shaking in excitement and anxiety, paws on the door looking out the window. The
whole car smells like your horrid breath and Megan is coated in orange fur.
Eventually you wear yourself out and pass out in her lap, head draped over her
arm towards me. I rub the fur between your ears while I drive.&lt;/p&gt;

&lt;figure&gt;
&lt;img class=&quot;framed&quot; src=&quot;/image/2022/02/05.jpg&quot;&gt;
&lt;/figure&gt;

&lt;p&gt;After settling in, we go explore tide pools. You sniff everything. Every rock,
bit of kelp, rotting fish, even the wind. It&amp;rsquo;s cold and wet, but you don&amp;rsquo;t mind.
When we get back to the cabin, I wipe sand and seaweed from your paws. You fall
asleep in front of the fireplace.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;The vet is explaining to us that you have hyperthyroidism and congestive heart
disease. That&amp;rsquo;s why you pee all the time&amp;mdash;often in the house&amp;mdash;and why you
seem so tense and wound up all the time. Well, that and because you are half
Pomeranian.&lt;/p&gt;

&lt;p&gt;You get put on an expensive pill regimen which you will take for the rest of
your life. Since you aren&amp;rsquo;t interested in food even on a good day, getting you
to take them will be a constant battle. At least the peeing inside gets
marginally better. The barking does not.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;I start writing a second book. I work on my laptop on the couch and you lay
pressed against one leg the entire time. Once you&amp;rsquo;ve fallen asleep and let down
your jealous guard over access to me, Benny claims the other side.&lt;/p&gt;
&lt;hr /&gt;

&lt;figure&gt;
  &lt;img class=&quot;framed&quot; src=&quot;/image/2022/02/06.jpg&quot;&gt;
&lt;/figure&gt;

&lt;p&gt;We take another trip out to the Olympic Peninsula with friends. You spend much
of it sleeping on the couch in front of the fire, like an overweight
self-warming throw pillow. You are given affection from everyone, which you
regard as your proper due. In return, you grace us with an endless series of
farts that leave the cabin smelling like some sort of reptilian tire fire.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;It&amp;rsquo;s six o&amp;rsquo;clock in the morning. I am barely awake making coffee while you are
outside for your morning consitutional. I hear a strange sort of yelp at the
back door. I open it just in time to see you collapse. I scoop you up and run
into the dining room, yelling out for Megan. I sit on the floor and cradle you,
rocking back and forth. If these are your last moments, I want them to be
peaceful.&lt;/p&gt;

&lt;p&gt;I hold your limp body in my arms. Your tongue hangs out, lifeless and blue. I am
seven years old again.&lt;/p&gt;

&lt;p&gt;After an endless minute, you come back to us. Your back stiffens. Your legs poke
out like a fainting goat and then relax. Your eyes start darting around and
eventually you are able to pick your head up. Ten minutes later and you are back
to normal, or at least as normal as you ever are. Honestly, a loss in cognitive
function would be hard to detect.&lt;/p&gt;

&lt;p&gt;The vet begins to use the phrase &amp;ldquo;congestive heart &lt;em&gt;failure&lt;/em&gt;&amp;rdquo; now. The pill
regimen gets more complex. We throw out yet another rug too pee-stained to
repair and decide to not have a rug in the dining room &amp;ldquo;for now&amp;rdquo;.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;You are mostly enjoying your retirement. You spend so much time laying on the
back of the couch so that you can look out the back window and bark at anyone
with the audacity to walk on the sidewalk that the cushion loses its shape
entirely.&lt;/p&gt;

&lt;p&gt;We alternate between trying to give you as much affection as we can in the time
we have left and cursing your name as we discover another part of the house
ruined by your sneaky peeing. I discover right in the middle of a push-up, my
nose an inch from the floor, that you and Benny have surreptitiously saturated
every inch of the carpet in the office. Megan and I learn how to put in new
flooring.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;We enter the phase where you take medications to cope with the side effects of
other medications. You get over a dozen different pills a day, each on their own
specific schedule. I print a chart and put it on the fridge to make sure I don&amp;rsquo;t
miss any.&lt;/p&gt;

&lt;p&gt;It is exhausting, but mostly for us. You are still relatively content, lazing
around the house. Stealing Benny&amp;rsquo;s food. Barking at people outside the window.&lt;/p&gt;

&lt;figure&gt;
&lt;img class=&quot;framed&quot; src=&quot;/image/2022/02/07.jpg&quot;&gt;
&lt;/figure&gt;

&lt;p&gt;Sometimes, at night, you crawl between my legs on top of the blankets, pinning
me and forcing me to sleep on my back. I tolerate it as best I can. You&amp;rsquo;re warm
and your ears are still velvet-soft.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;One morning, I wake up to discover you have leaked little brown droplets all
over the blanket. You are sitting up in bed, panting, clearly uncomfortable.
(I&amp;rsquo;m not exactly comfortable with the situation myself.)&lt;/p&gt;

&lt;p&gt;A couple of days later, you faint again. Perhaps a stroke. Dog.exe has stopped
working. When you finish your reboot cycle, you aren&amp;rsquo;t the same. You don&amp;rsquo;t
recognize Megan and snap at her viciously. You stand stock still in the middle
of the dining room floor, eyes glazed.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s clearly time. I feel an unexpected relief. For years, I have held a deep
fear that I wouldn&amp;rsquo;t know when it was over. That I wasn&amp;rsquo;t adult enough to handle
the responsibility of making the call. I&amp;rsquo;d procrastinate too long and leave you
in misery or choose prematurely and cut your life short. Or I would just be
wracked in anguish the whole time. Your last gift to me is a swift decline so
that there&amp;rsquo;s no doubt.&lt;/p&gt;

&lt;p&gt;I learn there is an entire category of vet-adjacent businesses that specialize
in this &amp;ldquo;transition&amp;rdquo;. Early on a Tuesday morning, I start calling them to see
who can come out today, as soon as possible, right now. The women who answer the
phone have well-rehearsed, soothing voices. I stumble over my words. I don&amp;rsquo;t
know the right social protocol to ask, &amp;ldquo;Can you please come kill my dog?&amp;rdquo;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;You are sitting next to me on the couch, pressed warmly against my side like
always. You&amp;rsquo;ve mostly calmed down but are sitting up and tense. A kind woman
radiating Pacific Northwest Earth Mother vibes is sitting on the other side of
you with a small array of syringes in front of her on the coffee table. We&amp;rsquo;ve
tucked a blanket under you.&lt;/p&gt;

&lt;p&gt;The kids have already said goodbye to you, tears pouring down their faces.
Surprisingly, that turns out to be the hardest part, realizing how much you are
part of their stories too.&lt;/p&gt;

&lt;p&gt;The first shot makes you fall asleep. Literally, not in the &amp;ldquo;put to sleep&amp;rdquo;
figurative sense. As the woman pushes the plunger, you loll slowly over onto my
leg. You&amp;rsquo;re napping, head on my thigh, more comfortable than I&amp;rsquo;ve seen you in
weeks. Like old times.&lt;/p&gt;

&lt;p&gt;I run my fingers through the fur on your back, up to where it gets shorter and
velvety between your ears, around your side where it gets thinner and silkier,
to your chest where it thickens into whorls. I leave my fingers there where I
can feel your heart beating. I want to &lt;em&gt;be here&lt;/em&gt; for it, to know that I was with
you from beginning to end.&lt;/p&gt;

&lt;p&gt;When the second shot goes in, your music stops.&lt;/p&gt;

&lt;p&gt;With practiced timing, the woman has your body wrapped up in the blanket and out
the door in minutes. The second the door closes, I feel the mask fall off my
face and the tears start.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;It&amp;rsquo;s later that day. I&amp;rsquo;ve thrown out the pills, pill poppers, prescriptions,
aftercare instructions, wrecked towels and blankets, every reminder of your
failing health.&lt;/p&gt;

&lt;p&gt;I am out for a walk to get out of the house. It hits me a few blocks away. The
answer to the question I carried since the day we got you. Will the life we have
with you outweigh the pain at the end? Will it be worth it?&lt;/p&gt;

&lt;p&gt;It is. Every minute.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;It&amp;rsquo;s a couple of years later. Your ashes are in a little box in my nightstand. I
remember the stress and exhaustion of the last few months of your life, but it
feels vague, like I remember the stories I told people about it but not the
actual experience.&lt;/p&gt;

&lt;p&gt;I remember all of the good moments with you vividly. The feel of your fur
between my fingers, your body pressed against my side, your horrific breath
panting in my face. Megan and I talk about your antics.&lt;/p&gt;

&lt;p&gt;I still miss you and your stupid face.&lt;/p&gt;

&lt;figure&gt;
&lt;img class=&quot;framed&quot; src=&quot;/image/2022/02/08.jpg&quot;&gt;
&lt;figcaption&gt;Ginny 2008&amp;hairsp;&amp;ndash;&amp;hairsp;2019&lt;/figcaption&gt;
&lt;/figure&gt;</content>
  </entry>

  <entry>
    <id>http://journal.stuffwithstuff.com/2021/07/29/640-pages-in-15-months</id>
    <link type="text/html" rel="alternate" href="http://journal.stuffwithstuff.com/2021/07/29/640-pages-in-15-months/"/>
    <title>640 Pages in 15 Months</title>
    <published>2021-07-29T07:00:00.000Z</published>
    <updated>2021-07-29T07:00:00.000Z</updated>
    <author>
      <name>Robert Nystrom</name>
      <uri>http://journal.stuffwithstuff.com/</uri>
    </author>
    <content type="html">&lt;p&gt;My book &lt;a href=&quot;http://craftinginterpreters.com/&quot;&gt;&lt;em&gt;Crafting Interpreters&lt;/em&gt;&lt;/a&gt; on programming languages is done. OK, OK.
I know &lt;a href=&quot;/2020/04/05/crafting-crafting-interpreters/&quot;&gt;I said it was done like fifteen months ago&lt;/a&gt;. But now it&amp;rsquo;s &lt;em&gt;really&lt;/em&gt;
done. And by that I mean, the print, e-book and PDF versions are done. &lt;strong&gt;You can
&lt;a href=&quot;http://craftinginterpreters.com/&quot;&gt;buy it&lt;/a&gt;.&lt;/strong&gt; You can hold it in your hands. And I do mean &amp;ldquo;hands&amp;rdquo; plural.
Because this little &amp;ldquo;handbook&amp;rdquo; turned out way larger than I anticipated:&lt;/p&gt;

&lt;figure&gt;
  &lt;a href=&quot;http://craftinginterpreters.com/&quot;&gt;&lt;img class=&quot;framed&quot; src=&quot;/image/2021/07/book.jpg&quot;&gt;&lt;/a&gt;
  &lt;figcaption&gt;This is a proof copy, so it looks a little different than the final design.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Look at that thing. 640 pages, eight inches wide, ten inches tall. If you get
tired of reading it, it can serve as a doorstop or protect you from small-arms
fire.&lt;/p&gt;

&lt;p&gt;Remember back on Mr. Roger&amp;rsquo;s Neighborhood when he would take you to a factory
and show you how pencils or umbrellas are made? I love that stuff, so I thought
maybe you might like to see what I spent the past year on. You can read this as
a peek behind the curtain, or maybe a long apology for why it took so long.&lt;/p&gt;

&lt;h2&gt;Where I left off&lt;/h2&gt;

&lt;p&gt;What I said in my last post was that &lt;em&gt;Crafting Interpreters&lt;/em&gt; was &lt;em&gt;finished&lt;/em&gt;, and
by that I meant that I&amp;rsquo;d written all the code, dotted the last sentence, and
scanned the last illustration. The &lt;em&gt;content&lt;/em&gt; of the book was complete. But it
wasn&amp;rsquo;t a book yet. Just a pile of Markdown and PNG files that my embarrassingly
bad Python code would begrudgingly turn into a website.&lt;/p&gt;

&lt;p&gt;My goal has always been to make a real book, with pages and everything.
Completing the content was just one (granted, the most important) step in that
journey. Once I finished the last chapter and put it online, I took about a
month-long break. I had been writing &lt;a href=&quot;https://github.com/munificent/craftinginterpreters/blob/master/note/log.txt&quot;&gt;every single day for almost four
years&lt;/a&gt; and I was &lt;em&gt;fried&lt;/em&gt;. Also, in case you don&amp;rsquo;t remember, early 2020 was
not exactly a Totally Fine Time in World History.&lt;/p&gt;

&lt;h2&gt;A new build system&lt;/h2&gt;

&lt;p&gt;After a few weeks, my desire to have this project completely done returned and I
eased my way back into working on it. I fixed a whole pile of typos and other
mistakes that readers &lt;a href=&quot;https://github.com/munificent/craftinginterpreters/issues&quot;&gt;filed bugs for&lt;/a&gt; (thanks!).&lt;/p&gt;

&lt;p&gt;Then, for no real good reason at all, I decided to rewrite the whole build
system for the book in &lt;a href=&quot;https://dart.dev/&quot;&gt;Dart&lt;/a&gt;. The build script I wrote for &lt;a href=&quot;http://gameprogrammingpatterns.com/&quot;&gt;my first book&lt;/a&gt;
was dead simple. &lt;a href=&quot;https://github.com/munificent/game-programming-patterns/blob/master/script/format.py&quot;&gt;Literally a single Python script&lt;/a&gt; that took a Markdown
file for each book chapter and rendered it to HTML while weaving in the code
snippets. The world&amp;rsquo;s dumbest static site generator.&lt;/p&gt;

&lt;p&gt;I started with that for &lt;em&gt;Crafting Interpreters&lt;/em&gt; but then it grew and grew. My
second book includes every single line of code for two complete interpreters,
which it builds up incrementally across thirty chapters. I needed to not just
build the HTML for the book&amp;rsquo;s website, but also make sure the code really did
work. I gave the build system the ability to not only generate the site for the
book, but also to slice and dice the code. Given a chapter, or even a single
point within a chapter, it can output a program containing all of the code for
the interpreters up to that point. Then I can take that code, compile it, and
run it through my automated test suite to make sure the code I&amp;rsquo;m showing you
does what it&amp;rsquo;s supposed to.&lt;/p&gt;

&lt;p&gt;Useful, but really straining the limits of how much code I want to maintain in a
dynamically typed language like Python, at least, with my (low) level of Python
expertise. Also, it was, frankly, really slow. So over a period of a couple of
weeks, I rewrote the whole thing in Dart.&lt;/p&gt;

&lt;p&gt;I work at Google on the &lt;a href=&quot;https://dart.dev/&quot;&gt;Dart language&lt;/a&gt; team as my day job, so picking
Dart was not an unbiased choice. But it&amp;rsquo;s my build system for my book, and I
know Dart and many of its core libraries and packages like the back of my hand.
Hell, I personally wrote the initial version of the canonical &lt;a href=&quot;https://pub.dev/packages/markdown&quot;&gt;markdown
package&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I found a pretty nice &lt;a href=&quot;https://pub.dev/packages/mustache_template&quot;&gt;package for mustache templates&lt;/a&gt;, so I converted
the book&amp;rsquo;s old Liquid templates to that. I didn&amp;rsquo;t find a good syntax
highlighter. But it&amp;rsquo;s not like I looked very hard either. It seemed like just
the kind of fun thing to implement from scratch, so I whipped one up loosely
based on Pygments.&lt;/p&gt;

&lt;p&gt;The end result is a new build system that generates &lt;em&gt;exactly&lt;/em&gt; the HTML and
syntax-highlighted code that I want. Also, it is literally ten &lt;em&gt;times&lt;/em&gt; faster
than the old Python one. As you&amp;rsquo;ll see, it turned out to be handy that I had
better control over the Markdown processing, but at the time I was basically
just doing this for fun and to procrastinate the real work.&lt;/p&gt;

&lt;figure&gt;
&lt;img class=&quot;framed&quot; src=&quot;/image/2021/07/speed.png&quot;&gt;
&lt;figcaption&gt;I planned to implement some clever incremental rebuild logic in
the dev server, but it builds so fast that I just rebuild everything on every
refresh.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Once I had the new build system outputting nice clean HTML and I&amp;rsquo;d deleted the
old Python stuff, it was time to get started.&lt;/p&gt;

&lt;h2&gt;Designing the book&lt;/h2&gt;

&lt;p&gt;Doing a large graphic design project like a book works a lot like web dev or
game programming where it sort of has two levels. First you set up your
&amp;ldquo;framework&amp;rdquo; or &amp;ldquo;engine&amp;rdquo;. On the web, this is your web framework and all of your
CSS and HTML templates. In games, it&amp;rsquo;s your game engine. Then you pour content
into that structure. With the right framework, adding content is easy.&lt;/p&gt;

&lt;p&gt;For graphic design using a program like Adobe InDesign, the way it works is you
set up styles and masters. A master defines the margins and grid lines for a
page. It&amp;rsquo;s the fences that corral all the text to keep those feral letters from
running around eating all the whitespace. Styles are like CSS: they let you take
a semantic kind of text or object and associate specific fonts, styles and
colors for it.&lt;/p&gt;

&lt;p&gt;In theory, you get the masters and styles right and then typesetting is pretty
easy and mechanical. Now, I did &lt;em&gt;not&lt;/em&gt; make my life easy when it comes to book
design. Book design is literally a two-dimensional spatial exercise and I made
my job harder both horizontally and vertically. If you&amp;rsquo;ve read any of it on the
web, you know my book has:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Prose, of course. So many words.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A lot of asides that need to be right next to certain pieces of text, code
or illustrations that they refer to. Some of these can get pretty long.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plenty of code. Also, each code snippet has a little location blurb next to
it telling you where the code goes in the resulting program.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;How wide?&lt;/h2&gt;

&lt;p&gt;Horizontally, the main text column needs to be wide enough to fit the longest
line of code. I can use shorter lines and wrap the snippets more, but that makes
them harder to read. It also makes them vertically taller, which causes its own
problem.&lt;/p&gt;

&lt;p&gt;Then I need room next to that for the asides, since they often remark directly
on specific sentences. I can make &lt;em&gt;those&lt;/em&gt; narrower too, of course. But then they
wrap and get taller. Some asides are fairly long and if they get too tall, they
start colliding with each other or overlapping location snippets.&lt;/p&gt;

&lt;p&gt;Oh, and since I ended up writing a 200k+ word book, it&amp;rsquo;s going to have a high
page count. That means a thick book. Thick books need wider inner margins so the
text doesn&amp;rsquo;t disappear into the spine.&lt;/p&gt;

&lt;p&gt;All of this points towards a pretty wide page. Most CS textbooks&amp;mdash;at least the
ones on my bookshelf&amp;mdash;are 7.5 inches wide. I tried hard to come up with a
design that fit the code, asides, and healthy margins in that width while still
giving a text size that didn&amp;rsquo;t require a magnifying glass. Eventually, I
conceded defeat.&lt;/p&gt;

&lt;p&gt;Once I tried designing a set of metrics for an 8 inch wide page, everything fell
into place. I could have enough breathing room around the text to make it
enjoyable to read, a decent length for the code snippets, and plenty of room for
the asides. (Using a narrower font for the asides helped too).&lt;/p&gt;

&lt;figure&gt;
&lt;img class=&quot;framed&quot; src=&quot;/image/2021/07/metrics.png&quot;&gt;
&lt;figcaption&gt;Here are the final horizontal metrics.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2&gt;How tall?&lt;/h2&gt;

&lt;p&gt;That left the other dimension. If I were going with a real publisher doing a
full offset print run, I could pick whatever page size I wanted. But since I&amp;rsquo;m
self publishing, that would mean paying up front for thousands of copies to be
printed and, I don&amp;rsquo;t know, storing all the boxes in my garage or something.&lt;/p&gt;

&lt;p&gt;Print on demand worked great for my last book, and I planned to do the same
thing for this one. That meant sticking to the limited set of page sizes that
KDP and IngramSpark support. The only reasonable one that is 8 inches wide is
8&amp;rdquo;√ó10&amp;rdquo;, so that&amp;rsquo;s what I picked. The end result is a book that feels big, but
hopefully not awkwardly huge. I&amp;rsquo;m sorry. I promise to write a smaller book if I
ever write another.&lt;/p&gt;

&lt;figure&gt;
&lt;img class=&quot;framed&quot; src=&quot;/image/2021/07/master.png&quot;&gt;
&lt;figcaption&gt;The metrics for a complete chapter spread. Vertically, text is
aligned to a classic 12pt baseline grid.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The whole time I was picking these margins and metrics, I was also selecting
fonts and building styles. You can&amp;rsquo;t do graphic design in a vacuum, so I picked
a test chapter and just typeset it and tweaked the fonts over and over again.
Eventually I got a set of fonts and styles I liked, some masters that seemed
workable, and I was ready to go. The framework was done and now it was time to
open the content hose.&lt;/p&gt;

&lt;h2&gt;XML, like its 1999&lt;/h2&gt;

&lt;p&gt;Of course, problem #1 is that there &lt;em&gt;is&lt;/em&gt; no content hose. I have to build one.
InDesign doesn&amp;rsquo;t know what the hell Markdown or my weird ass build system is. I
sure as hell didn&amp;rsquo;t want to, like, copy every chapter from my browser, paste it
into InDesign and then manually apply all the styles. I have a high pain
tolerance, but I&amp;rsquo;m not a masochist.&lt;/p&gt;

&lt;p&gt;What InDesign &lt;em&gt;can&lt;/em&gt; do is import XML. Even better, you can set it up to
automatically apply certain paragraph or character styles to certain tag names.
InDesign&amp;rsquo;s XML support, alas, has not matured much since the time I described it
as &lt;a href=&quot;/2014/11/03/bringing-my-web-book-to-print-and-ebook/&quot;&gt;being implemented by a narcoleptic intern&lt;/a&gt;. For example, in HTML
you can italicize a word in a header by taking an italics tag and nesting it
inside a header tag. InDesign cannot comprehend such advanced data modeling. It
needs a flat series of unnested tags and if you need italics in your header, you
damn well better have a unique &lt;code&gt;&amp;lt;italics-header&amp;gt;&lt;/code&gt; tag for it.&lt;/p&gt;

&lt;p&gt;But now I had an ace up my sleeve. Since I had microscopic control over my build
system and its Markdown processing, I could write my own &lt;a href=&quot;https://github.com/munificent/craftinginterpreters/blob/master/tool/bin/build_xml.dart&quot;&gt;custom XML
exporter&lt;/a&gt; that generated &lt;em&gt;exactly&lt;/em&gt; the tags that would make InDesign not
cry and avoid as many InDesign XML import bugs as possible.&lt;/p&gt;

&lt;h2&gt;JavaScript, in &lt;em&gt;my&lt;/em&gt; InDesign?&lt;/h2&gt;

&lt;p&gt;Even so, XML import only gets you so far. Specifically, it gets you a &amp;ldquo;story&amp;rdquo; in
InDesign terms: a single continuous narrative of text that fills the main text
box and spans multiple pages:&lt;/p&gt;

&lt;figure&gt;
&lt;img class=&quot;framed&quot; src=&quot;/image/2021/07/convert-before.png&quot;&gt;
&lt;figcaption&gt;What the initial XML import looks like. The pink text is where
an illustration goes and the &quot;@&quot; tells me where to anchor the aside.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The main story is where the prose and code snippets go, but the asides and the
location markers need to be pulled out float off to the side. With my last book,
I yanked those out manually. I literally cut each aside from the main text
column and pasted it into a new text box. It took forever, and that book was
less than half as long as this one with &lt;em&gt;way&lt;/em&gt; fewer code snippets.&lt;/p&gt;

&lt;p&gt;There are &lt;em&gt;1,133&lt;/em&gt; code snippets in &lt;em&gt;Crafting Interpreters&lt;/em&gt;. If I had to manually
cut and paste the location markers for each of those, I would lose my mind.
Worse, I would make a lot of mistakes, which would just create more work for
myself.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m an engineer so I am morally opposed to error-prone manual effort that can be
automated. Did you know that InDesign can be scripted using JavaScript? Well,
you do now, which apparently places you in a tiny minority because there are,
like, &lt;em&gt;no&lt;/em&gt; docs for it out there. You can find a couple of auto-generated
references, a few sad cries for help from graphic designers clearly out of their
element with no responses, and that&amp;rsquo;s it.&lt;/p&gt;

&lt;p&gt;JavaScripting InDesign is a special kind of pain. There is no debugger. There
are no stack traces. There aren&amp;rsquo;t even &lt;em&gt;debug prints&lt;/em&gt;. There is literally just
&lt;code&gt;alert()&lt;/code&gt;, and you can only call it &lt;em&gt;once&lt;/em&gt;. And it halts your script.
Fortunately, I actually learned JavaScript back when that&amp;rsquo;s all &lt;em&gt;browsers&lt;/em&gt; gave
you, so I can hack it.&lt;/p&gt;

&lt;figure&gt;
&lt;img class=&quot;framed&quot; src=&quot;/image/2021/07/debug-js.png&quot;&gt;
&lt;figcaption&gt;Just like developing for IE6.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I managed to cobble together a horrific script that would find all of the asides
and location markers, pull them out of the main text flow, and leave them off to
the side:&lt;/p&gt;

&lt;figure&gt;
&lt;img class=&quot;framed&quot; src=&quot;/image/2021/07/convert-after.png&quot;&gt;
&lt;figcaption&gt;Asides and location markers are pulled out of the main flow and
into their own text boxes.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;What I wasn&amp;rsquo;t able to get the script to do was &lt;em&gt;position&lt;/em&gt; the boxes correctly.
But InDesign has a thing called &amp;ldquo;anchors&amp;rdquo; where you can lock the position of an
element relative to another. A couple of carefully crafted Object Styles would
even set the horizontal metrics correctly and align the text to the right
baseline. All I had to do was anchor each text box and it worked perfectly!&lt;/p&gt;

&lt;p&gt;Wait, did I say &amp;ldquo;perfectly&amp;rdquo;? I meant  it worked right about half the time and
the other half the time InDesign would inexplicably &lt;em&gt;turn off the fucking
borders of nearby code snippets&lt;/em&gt;.&lt;/p&gt;

&lt;figure&gt;
&lt;img class=&quot;framed&quot; src=&quot;/image/2021/07/anchor.gif&quot;&gt;
&lt;figcaption&gt;What it looks like when InDesign hates you.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I lost hours of my life to this stupid bug. Eventually, I realized that some
completely random subset of location tags would have to be manually positioned
because anchoring invariably broke some borders.&lt;/p&gt;

&lt;h2&gt;Editing, again&lt;/h2&gt;

&lt;p&gt;All of the above took me a good month or so and then it was time to stop
fiddling around and get to work on the actual content. The first thing I did was
another editing pass of the entire book, front to back. I had already done three
drafts of each chapter as I was writing them, but I wanted to do one more now
that it was done so that I could get a better feel for continuity. It turns out
I repeated the same dumb jokes a lot. I fixed (most of) those.&lt;/p&gt;

&lt;p&gt;This took five months. There&amp;rsquo;s nothing fun to say about this, it was just a
chore.&lt;/p&gt;

&lt;h2&gt;Copy editing&lt;/h2&gt;

&lt;p&gt;Next I hired an actual professional copy editor, &lt;a href=&quot;https://karisomerton.com/&quot;&gt;Kari Somerton&lt;/a&gt;, to go
through and do the same thing. She was great. Most of the editing world uses
Microsoft Word and &amp;ldquo;Track Changes&amp;rdquo; to handle the editing process. Like most
software engineers, I live and breathe plaintext and Git. That way I can see
diffs of the changes, and go back through history.&lt;/p&gt;

&lt;p&gt;I didn&amp;rsquo;t want to abandon my workflow so I asked Kari to ramp up on Git and my
weird completely bespoke build system. She handled it with aplomb and churned
through the book in no time. She found hundreds and hundreds of mistakes. This
despite me doing four drafts and readers filing hundreds of issues already.
Professional copy editors are worth every penny.&lt;/p&gt;

&lt;h2&gt;Typesetting the whole thing&lt;/h2&gt;

&lt;p&gt;Once the words were as good as they were gonna get, it was time to get them onto
pages. The process went like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a new InDesign file for the next chapter.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Export it to XML.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Import the XML into InDesign.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run my little JavaScript script to pull out the asides and location markers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go through and anchor the side bar stuff.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix up whitespace at the end of pages.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first five steps are a piece of cake. I&amp;rsquo;d wake up in the morning, brew a cup
of coffee, shamble upstairs to the iMac, and get started. I could grind through
those steps while half awake and get a chapter done in half an hour or so. It
was peaceful. Almost meditative.&lt;/p&gt;

&lt;p&gt;And then step six. You see, that right there is the hard thing about typesetting
a book. And it&amp;rsquo;s the really hard thing about typesetting &lt;em&gt;this&lt;/em&gt; book. Because it
turns out there are a bunch of constraints on how content can be fit vertically
in a page. Obviously, we can&amp;rsquo;t slice an illustration in half and put the top
half on one page and the bottom half on the next. The asides also really need to
fit on one page too, or it gets confusing to keep track of what they refer to.&lt;/p&gt;

&lt;p&gt;Whenever possible, it&amp;rsquo;s nice for the code snippets to not get split across pages
too. Some of those can be over a dozen lines long. (This is another reason why
wider horizontal metrics helped. Because if I had made the code snippets
narrower, they would end up taller, which would make them harder to fit on the
page.) And you don&amp;rsquo;t want a header alone at the end of a page with no content
after it. And it&amp;rsquo;s good to avoid &lt;a href=&quot;https://en.wikipedia.org/wiki/Widows_and_orphans&quot;&gt;widows and orphans&lt;/a&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;Take all of those rules and restrictions, and mix in the completely fixed height
of a page and you got yourself a real constraint solving problem. Or, in my
case, 640 of them, all interwoven with each other. Because, you see, InDesign is
happy to solve all of this for you by just pushing content to later pages. Code
snippet too long? Move it to the next page. No room for prose under the header?
Move it all to the next page. What that gives you is a ton of dead white space
at the bottom of pages. It looks terrible and wastes space, like this:&lt;/p&gt;

&lt;figure&gt;
&lt;img class=&quot;framed&quot; src=&quot;/image/2021/07/typeset.png&quot;&gt;
&lt;figcaption&gt;I thoughtfully left room on the page for your own doodles.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2&gt;Speaking of illustrations&amp;hellip;&lt;/h2&gt;

&lt;p&gt;At one level, the illustrations were easy. I specifically chose black and white
pen and ink because it&amp;rsquo;s print friendly. When I first scanned the images as I
wrote each chapter, I brought them in at glorious 1200 DPI. Here&amp;rsquo;s a crop:&lt;/p&gt;

&lt;figure&gt;
&lt;img class=&quot;framed&quot; src=&quot;/image/2021/07/scan.png&quot;&gt;
&lt;/figure&gt;

&lt;p&gt;A little level adjustment in Photoshop produces:&lt;/p&gt;

&lt;figure&gt;
&lt;img class=&quot;framed&quot; src=&quot;/image/2021/07/illustration.png&quot;&gt;
&lt;/figure&gt;

&lt;p&gt;So detailed! Exporting these to high resolution bitmaps that print well was a
snap, and they look great. (Well, as great as my handwriting looks, I guess.)&lt;/p&gt;

&lt;p&gt;Incorporating the illustrations into the page layout was another story. Halfway
through typesetting, a lightbulb went off and I finally realized why most books
say, &amp;ldquo;Refer to Figure 123 to see blah blah blah&amp;hellip;&amp;rdquo; That gives the typesetter
freedom to put Figure 123 wherever the hell it fits on any nearby page.&lt;/p&gt;

&lt;p&gt;In my dumb book, because I am an idiot, the prose just refers directly to the
illustration. The illustration needs to be &lt;em&gt;right there&lt;/em&gt; or the text doesn&amp;rsquo;t
make sense. I didn&amp;rsquo;t think about that when each chapter was an infinitely
scrolling web page, and by the time I realized, it was too late.&lt;/p&gt;

&lt;p&gt;With the hundreds of illustrations and thousand-plus code snippets, I had given
myself thirty giant interrelated bin-packing exercises. The hard part of
typesetting was figuring out how to adjust things to minimize that dead space.
Sometimes I&amp;rsquo;d split a code snippet in two. Maybe add a little extra padding
around one image to spread stuff across the page a little. Or crowd another one
so that it &lt;em&gt;just&lt;/em&gt; fits on the page. Sometimes I&amp;rsquo;d tweak an illustration to make
it shorter to fit on a page or taller to eat up some whitespace.&lt;/p&gt;

&lt;p&gt;This was the real challenge of typesetting the book and why it took me two
months to get through all the chapters.&lt;/p&gt;

&lt;h2&gt;Front matter and back matter&lt;/h2&gt;

&lt;p&gt;Did you know that there are professional indexers? People whose job it is to
write indexes for books? They even &lt;a href=&quot;https://press.uchicago.edu/ucp/books/book/chicago/I/bo3625262.html&quot;&gt;write books&lt;/a&gt; about how to write
indexes. (One would presume that these books have truly superb indexes.)&lt;/p&gt;

&lt;p&gt;I did not hire one of those eminently skilled professionals. Instead, I spent
two weeks going through every damn chapter &lt;em&gt;again&lt;/em&gt; doing my best to pretend that
I know what I&amp;rsquo;m doing. InDesign&amp;rsquo;s support for indexes is actually pretty nice.
You can basically just select some text and say, &amp;ldquo;Make an index entry for this.&amp;rdquo;
Then it collects all of those and generates an index for the whole book. But
actually &lt;em&gt;adding&lt;/em&gt; all of those entries is a mind-numbing chore.&lt;/p&gt;

&lt;p&gt;The index is the main piece of &lt;em&gt;back matter&lt;/em&gt;&amp;mdash;the stuff at the end of a book
after its main content. There is also &lt;em&gt;front matter&lt;/em&gt;. You&amp;rsquo;ll never guess where
that goes. I put together a title page, copyright page, dedication, and
acknowledgements. Then I let InDesign generate a table of contents for me.&lt;/p&gt;

&lt;p&gt;This was a magical moment. At this point, I had a complete book:&lt;/p&gt;

&lt;figure&gt;
&lt;img class=&quot;framed&quot; src=&quot;/image/2021/07/inside.jpg&quot;&gt;
&lt;figcaption&gt;Here&#39;s what the inside looks like.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Or, at least, I had the &lt;em&gt;inside&lt;/em&gt; of one.&lt;/p&gt;

&lt;h2&gt;Cover design&lt;/h2&gt;

&lt;p&gt;A lot of authors obsess over their cover and envision it the whole time they are
writing. Despite what the aphorism says, people &lt;em&gt;do&lt;/em&gt; judge books by their cover
and a good one makes a big difference. At least, that&amp;rsquo;s the case over in fiction
land. In computer science, judging by the other books I have laying around, the
artistic merit of the cover appears to be somewhat less critical. I guess when
the prof says you have to buy the book to pass the class, a clip art cover is
sufficiently compelling.&lt;/p&gt;

&lt;p&gt;Since I am &lt;em&gt;not&lt;/em&gt; a professor who can garner sales by fiat, I spent a lot of time
on the cover design. I take photos, so I thought it could look nice to put
something detailed on the cover to liven it up. I went through my thousands of
photos trying to find something that fit. And, while I have some pretty
pictures, none of them felt like they worked as covers. They felt arbitrary.&lt;/p&gt;

&lt;p&gt;Eventually I realized that the visual language of the book is those pen and ink
illustrations. So I drew a bigger more detailed version of &lt;a href=&quot;http://craftinginterpreters.com/a-map-of-the-territory.html#the-parts-of-a-language&quot;&gt;the mountain
illustration I use as a metaphor for the compilation process&lt;/a&gt;. I also
hand-lettered a new title:&lt;/p&gt;

&lt;figure&gt;
  &lt;img class=&quot;framed&quot; src=&quot;/image/2021/07/cover-trace.jpg&quot;&gt;
&lt;/figure&gt;

&lt;p&gt;It&amp;rsquo;s a real typeface (Acumin Pro Extra Condensed) but I hand-traced a printout
to give it some imperfect charm. I picked a color palette to try to give it a
sort of a mimeographed 1950s scouting manual vibe.&lt;/p&gt;

&lt;h2&gt;Proofreading the proof&lt;/h2&gt;

&lt;p&gt;Now I really had a book. I uploaded the PDF exports to KDP and ordered a proof
copy. A week later, a surprisingly heavy box arrived. This was the first moment
I really understood just how &lt;em&gt;big&lt;/em&gt; this book I wrote is. Up until this point, it
was just data files. But seeing it fill up an Amazon box clarified the scale of
the project in a way that the time I spent never quite did.&lt;/p&gt;

&lt;p&gt;So I had a book, but it &lt;em&gt;still&lt;/em&gt; wasn&amp;rsquo;t done. Because the typesetting process
involved a lot of manual labor. To err is human, so now I had to &lt;em&gt;proofread&lt;/em&gt;&amp;mdash;to literally go through the proof and read it looking for mistakes. I marked
them all with sticky notes:&lt;/p&gt;

&lt;figure&gt;
&lt;img class=&quot;framed&quot; src=&quot;/image/2021/07/edits.jpg&quot;&gt;
&lt;figcaption&gt;I put an &quot;x&quot; on each sticky note to mark when I had applied the
fix to the InDesign files.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Here&amp;rsquo;s where it got stressful. If you&amp;rsquo;re a programmer, then source control and
diff is deeply ingrained in your workflow. Whenever I make a change, I take for
granted that I can then see a diff in the commit to verify that I changed only
what I intended &lt;em&gt;and nothing else&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I did put the InDesign files in a Git repo, but they are giant opaque binary
files. Also, InDesign has a habit of changing them even when it doesn&amp;rsquo;t seem
like I&amp;rsquo;ve actually made any real changes. There&amp;rsquo;s nothing quite like syncing all
the styles across the chapters, seeing every single file marked changed and
wondering, &amp;ldquo;Did I just accidentally move every bullet list item 3 points to the
left?&amp;rdquo; It felt like flying blind at exactly the stage in the process where I
really wanted to see &lt;em&gt;exactly&lt;/em&gt; what was happening.&lt;/p&gt;

&lt;p&gt;Did I engineer my way out of this problem? You&amp;rsquo;re &lt;a href=&quot;https://github.com/munificent/craftinginterpreters/blob/master/tool/bin/tile_pages.dart&quot;&gt;damn right I did&lt;/a&gt;. I
wrote a Dart script that would take a PDF of the book, extract every page, and
then generate a single huge PNG file with every page tiled across it. It looks
like this:&lt;/p&gt;

&lt;figure&gt;
  &lt;img class=&quot;framed&quot; src=&quot;/image/2021/07/pages.png&quot;&gt;
&lt;/figure&gt;

&lt;p&gt;If you zoom in, each page is about this big:&lt;/p&gt;

&lt;figure&gt;
&lt;img class=&quot;framed&quot; src=&quot;/image/2021/07/pages-zoom.png&quot;&gt;
&lt;figcaption&gt;If you&#39;re on a retina display, this is a 100% zoom.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Every time I changed the InDesign files and committed them, I exported a PDF
for that commit and generated a tile image. Then I wrote a little Photoshop
action that would take two of those and draw a big red border around any pixels
that differed. Here is what all of the proofreading changes look like:&lt;/p&gt;

&lt;figure&gt;
&lt;img class=&quot;framed&quot; src=&quot;/image/2021/07/diff.png&quot;&gt;
&lt;/figure&gt;

&lt;p&gt;And zoomed in:&lt;/p&gt;

&lt;figure&gt;
&lt;img class=&quot;framed&quot; src=&quot;/image/2021/07/diff-zoom.png&quot;&gt;
&lt;/figure&gt;

&lt;p&gt;There isn&amp;rsquo;t enough detail in the tile image to tell exactly what changed, but
the red tells me which pages need a visual inspection. I know I should be proud
of, like, writing an entire textbook on programming languages. But, honestly, I
think I&amp;rsquo;m most proud of this dumb little script. It was &lt;em&gt;such&lt;/em&gt; a relief to be
able to programmatically verify that, yes, this PDF looks exactly like the last
one except for the one expected change.&lt;/p&gt;

&lt;h2&gt;Ebooks are also books&lt;/h2&gt;

&lt;p&gt;Once I incorporated all the proofreading fixes, the print edition was really for
real totally done. But people also like reading ebooks and Kindle, so I needed
to make those too.&lt;/p&gt;

&lt;p&gt;Again, writing my own build system helped. I tweaked it to be able to export the
antiquated XHTML that EPUB requires as well as all the weird metadata and
manifest stuff that goes into one. A few command-line invocations later and I
had Kindle and EPUB e-books. I tested in a bunch of readers and tweaked the CCS
to try to find a compromise between all of their renderers.&lt;/p&gt;

&lt;h2&gt;Updating the site and launching&lt;/h2&gt;

&lt;p&gt;At this point&amp;mdash;and now we&amp;rsquo;re talking this past weekend as I write this
sentence&amp;mdash;I had a folder with all of the final files for every edition of the
book. All that remained was to update the front page of the book&amp;rsquo;s website to
point to where people can get them. I took some photos and put on my web
designer hat for a while. I tried to make it tolerably responsive.&lt;/p&gt;

&lt;p&gt;Then I wrote this blog post. It&amp;rsquo;s weird to put that in the past tense since I
just wrote it. But I guess it&amp;rsquo;s in the past now.&lt;/p&gt;

&lt;p&gt;Tomorrow, I&amp;rsquo;m going to upload the files to the various sites and stores. I&amp;rsquo;ll
update the site to have links to all of those as they go live. Once the stores
have processed the uploads and everything is available, I&amp;rsquo;ll publish this post
and update the site. I&amp;rsquo;ll write a note for the mailing list and feel nervous
emailing that many people. If you&amp;rsquo;re reading this, I already did all that and
the book is really, really done.&lt;/p&gt;

&lt;h2&gt;What next?&lt;/h2&gt;

&lt;p&gt;Ever since I finished the last chapter, people have been asking me what I&amp;rsquo;m
going to do next. I have people I consider close friends now who have never
known me when I &lt;em&gt;wasn&amp;rsquo;t&lt;/em&gt; writing this book.&lt;/p&gt;

&lt;p&gt;Many ask what I&amp;rsquo;m going to write next, or suggest a topic. I interpret this as a
compliment&amp;mdash;they like my writing and want more. But it also feels like asking
a mom in labor whether she plans to have more kids. I&amp;rsquo;ve had my legs in the
stirrups for six years, so I&amp;rsquo;m gonna just relax a bit after all the pushing is
over before I even &lt;em&gt;think&lt;/em&gt; about another book baby.&lt;/p&gt;

&lt;p&gt;What I really plan to do is&amp;hellip; not &lt;em&gt;plan&lt;/em&gt; to do anything. This writing project
has been an enormous exercise in self-applied delayed gratification. On top of
that, the pandemic brought its own basket of deferred dreams. I&amp;rsquo;ve gotten so
skilled at denying myself and postponing, so good at tuning out what I &lt;em&gt;feel&lt;/em&gt;
like doing, that it&amp;rsquo;s hard to even hear those feelings any more. I don&amp;rsquo;t
remember what my own joy sounds like.&lt;/p&gt;

&lt;p&gt;So I&amp;rsquo;m gonna check out for a while and go hunting for my pleasure centers. Maybe
&lt;a href=&quot;https://www.youtube.com/channel/UCSMJ0iRwAhIFYSpntOEtn2g&quot;&gt;make some more music&lt;/a&gt;. Maybe go fishing. Probably spend more time with
friends and family (safely). I might get back to working on &lt;a href=&quot;https://github.com/munificent/hauberk&quot;&gt;my
roguelike&lt;/a&gt;. Or maybe I won&amp;rsquo;t do any of those. Maybe I&amp;rsquo;ll just go out in
the backyard and bask mindlessly in the sun like a lizard. The important part is
I won&amp;rsquo;t decide until I feel like it.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m sure eventually I&amp;rsquo;ll get the itch to work on something more sizeable again.
(But, God-willing, I will never spend six years on a single project again in my
life.) Until then, I hope you enjoy the book. Despite all the work, I had a lot
of fun making it, and it was &lt;em&gt;always&lt;/em&gt; a joy to hear from readers who liked it.
It&amp;rsquo;s the only thing that kept me going this long and enabled me to get it done.&lt;/p&gt;</content>
  </entry>

  <entry>
    <id>http://journal.stuffwithstuff.com/2020/04/05/crafting-crafting-interpreters</id>
    <link type="text/html" rel="alternate" href="http://journal.stuffwithstuff.com/2020/04/05/crafting-crafting-interpreters/"/>
    <title>Crafting &#8220;Crafting Interpreters&#8221;</title>
    <published>2020-04-05T07:00:00.000Z</published>
    <updated>2020-04-05T07:00:00.000Z</updated>
    <author>
      <name>Robert Nystrom</name>
      <uri>http://journal.stuffwithstuff.com/</uri>
    </author>
    <content type="html">&lt;p&gt;It took three years and 200,000 words more than I expected, but my second book,
&lt;em&gt;&lt;a href=&quot;http://craftinginterpreters.com/&quot;&gt;Crafting Interpreters&lt;/a&gt;&lt;/em&gt;, is complete. I finished the third draft of the last
chapter today, marking the last of around 1,400 days of continuous writing.&lt;/p&gt;

&lt;p&gt;This book was &lt;em&gt;much&lt;/em&gt; harder than my &lt;a href=&quot;http://gameprogrammingpatterns.com/&quot;&gt;first book&lt;/a&gt;, along every axis. It&amp;rsquo;s
larger, more technically complex, much more deeply intertwined, and it had the
misfortune of aligning with a really difficult period in my life. Today feels
less like coasting past the finish line at the Tour de France, arms raised in
triumph, and more like dragging myself onto the beach, clutching sand in relief
after a storm-thrashed ordeal at sea.&lt;/p&gt;

&lt;p&gt;Before I get into all that, I have a minor confession to make. When I finished
my first book, I wrote &lt;a href=&quot;/2014/04/22/zero-to-95688-how-i-wrote-game-programming-patterns/&quot;&gt;a long post&lt;/a&gt; about how I cobbled together enough
willpower to reach the end of the last page. Everything in there is true, but
there is one fact I superstitiously omitted.&lt;/p&gt;

&lt;p&gt;Halfway through writing &lt;em&gt;Game Programming Patterns&lt;/em&gt;, I discovered a new passion:
programming languages. It had been a long time since a topic ignited my brain to
the same degree, and I was &lt;em&gt;on fire&lt;/em&gt;. I spent basically every free hour (and
many not-so-free hours&amp;mdash;sorry, family) designing and hacking on programming
languages. I read &lt;a href=&quot;https://twitter.com/munificentbob/status/901543375945388032&quot;&gt;every book I could get my hands on&lt;/a&gt;, &lt;a href=&quot;/2010/07/23/what-i-learned-at-the-emerging-languages-camp/&quot;&gt;went to
conferences&lt;/a&gt;, &lt;a href=&quot;/category/language/&quot;&gt;blogged&lt;/a&gt;, I even &lt;em&gt;dreamed&lt;/em&gt; about programming languages.
This infatuation was the main reason I stopped working on my first book for two
years.&lt;/p&gt;

&lt;p&gt;I have a personality quirk where when I&amp;rsquo;m excited about something I just &lt;em&gt;have&lt;/em&gt;
to teach it to other people. Hermione Granger, arm waving feverishly to get the
teacher&amp;rsquo;s attention, is my spirit animal. It was inevitable that I would write
something about interpreters. But I couldn&amp;rsquo;t just drop one half-finished book to
start another. I have gigs of unfinished projects laying around, but&amp;mdash;maybe
because the completed chapters were already online&amp;mdash;I couldn&amp;rsquo;t bear to abandon
&lt;em&gt;Game Programming Patterns&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So I made a promise to myself. If I finished that book, then I would let myself
write a second book on interpreters. In part because of that promise, I &lt;em&gt;did&lt;/em&gt;
manage to complete the chapters, and then &lt;a href=&quot;/2014/11/03/bringing-my-web-book-to-print-and-ebook/&quot;&gt;the print and e-book
editions&lt;/a&gt;. What I thought was merely a hobby and personal goal turned out
to be a &lt;a href=&quot;/2014/11/20/how-my-book-launch-went/&quot;&gt;life-changing experience&lt;/a&gt;. My little self-published vanity
project has &lt;a href=&quot;https://www.amazon.com/dp/0990582906&quot;&gt;hundreds of five-star reviews&lt;/a&gt;, and has been translated to
Korean, Japanese, Chinese, German, and Polish. The book did so much better than
I expected that I&amp;rsquo;m still not sure how to process it, beyond feeling immense
gratitude to everyone who read it, bought a copy, or cheered me on.&lt;/p&gt;

&lt;h2&gt;The Seed of a book&lt;/h2&gt;

&lt;p&gt;Once I finished the print edition of &lt;em&gt;Game Programming Patterns&lt;/em&gt;, I took some
time off. But it didn&amp;rsquo;t take too long for that itch to write about interpreters
to come back. I knew exactly what I was getting into with writing a book now,
how hard the grind can be. At first, I just noodled around. I wasn&amp;rsquo;t committed
to doing anything. It was more a sort of recreational intellectual exercise. If
I &lt;em&gt;were&lt;/em&gt; to do a book, what would it look like? You know, &lt;em&gt;hypothetically
speaking&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The very first note I wrote to myself said:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;high-level goal: a *small* book that builds a complete, efficient
interpreter. instead of a wide text about programming language*s*,
it is a single path through the language space. aim for 60k words.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My first book was about 90,000 words, and I didn&amp;rsquo;t want to hike a trail that
long again. I also had a meta-goal to make programming languages more
approachable, and I figured a short text would help. I had this vision of
something you could literally hold in your hand or have open next to your laptop
while you followed along.&lt;/p&gt;

&lt;p&gt;To make a small book, I needed a small language and a small implementation. One
of my other side projects was &lt;a href=&quot;http://wren.io/&quot;&gt;a scripting language named Wren&lt;/a&gt;. Wren is
written in C, with a simple single-pass bytecode compiler inspired by Lua.
Building Wren taught me how much functionality you can pack into a few thousand
lines of clean C code.&lt;/p&gt;

&lt;p&gt;For this hypothetical book, I figured &lt;a href=&quot;http://craftinginterpreters.com/a-bytecode-virtual-machine.html&quot;&gt;a bytecode VM in C&lt;/a&gt; like that
would be a great fit. It would also give me the chance to cover a bunch of
really fun topics like stack-based VMs, object representation, and garbage
collection. But Wren wasn&amp;rsquo;t the right language. I like Wren (obviously), but it
has some design quirks that I think make it a better language for &lt;em&gt;users&lt;/em&gt; but
maybe not for teaching. For the book, I wanted a dynamically-typed scripting
language in the vein of languages like JavaScript, Python, and Lua.&lt;/p&gt;

&lt;p&gt;I started tinkering on a new toy language, tentatively named &amp;ldquo;Vox&amp;rdquo;. The goal was
to keep things as simple as possible without taking any shortcuts around the
hard problems in implementing a language. I wanted a rich expression and
statement syntax to cover parsing. First-class functions and closures because
they are powerful and challenging to implement efficiently. Classes and methods
because that paradigm is so prevalent but omitted by many compiler books.&lt;/p&gt;

&lt;p&gt;At some point, I realized that dropping readers straight into C was too
unfriendly of an introduction. It&amp;rsquo;s hard to teach high-level concepts like
parsing and name resolution while also tracking pointers and managing memory.
OK, so we&amp;rsquo;ll build &lt;em&gt;two&lt;/em&gt; interpreters. First, &lt;a href=&quot;http://craftinginterpreters.com/a-tree-walk-interpreter.html&quot;&gt;a simple one in a high-level
language&lt;/a&gt; to focus on concepts. Then a second bytecode VM in C to focus on
performance and low-level implementation techniques.&lt;/p&gt;

&lt;p&gt;Somehow, I didn&amp;rsquo;t notice that maybe this &amp;ldquo;handbook&amp;rdquo; wasn&amp;rsquo;t going to be as
pocket-sized as I hoped.&lt;/p&gt;

&lt;p&gt;My first choice for the high-level implementation language was JavaScript. I
implemented most of a Vox interpreter in JS, but never really liked it. I wanted
to write the interpreter in an object-oriented style because there are
techniques like the &lt;a href=&quot;http://craftinginterpreters.com/representing-code.html#the-visitor-pattern&quot;&gt;Visitor pattern&lt;/a&gt; for doing language stuff in OOP that
aren&amp;rsquo;t covered well elsewhere. Doing OOP in JS means deciding whether to use
classes or a prototypal style. The former is cleaner but infuriates some segment
of readers. The latter is verbose and confusing to those not already steeped in
prototypes.&lt;/p&gt;

&lt;p&gt;Also, I missed static types. People reading code in a book don&amp;rsquo;t get the luxury
of seeing the code in a debugger where they can see what values are in various
variables. Static type annotations in the code help.&lt;/p&gt;

&lt;p&gt;So I switched to Java. I don&amp;rsquo;t love Java but it seemed like the least biased
choice for a statically typed object-oriented language. I found you can tame a
lot of its infamous verbosity by simply not programming in 1990s enterprise Java
style. Maybe it&amp;rsquo;s not idiomatic to have public fields, but it&amp;rsquo;s a hell of a lot
shorter.&lt;/p&gt;

&lt;p&gt;In parallel, I started building the bytecode VM in C, porting over bits of
Wren&amp;rsquo;s implementation and stripping out the Wren-specific stuff. I spent the
spring and summer of 2016 circling between these three pieces&amp;mdash;the design of
Vox itself, the Java interpreter, and the C bytecode VM. This was a delightful,
satisfying period of time. The three parts played off each other in challenging
ways. Sometimes I would change the language to make one interpreter simpler, but
find doing so made the other interpreter more complex. Other times I&amp;rsquo;d hit on
some trick that made everything get smaller and cleaner.&lt;/p&gt;

&lt;h2&gt;Getting back on the horse&lt;/h2&gt;

&lt;p&gt;I remember the exact moment I committed to writing the book. I was stuck on a
tricky language design problem: constructor syntax. I knew I wanted classes,
which meant some way to construct instances. Adding a &lt;code&gt;new&lt;/code&gt; keyword felt too
special-purpose for my minimal language. I like Smalltalk and Ruby&amp;rsquo;s approach of
making &lt;code&gt;new&lt;/code&gt; be a method on the class object itself, but that requires
metaclasses and a lot of other machinery.&lt;/p&gt;

&lt;p&gt;I was struggling to find a way to add instantiation without making the language
much bigger. Then I remembered JavaScript&amp;rsquo;s thing where you can simply invoke a
&amp;ldquo;class&amp;rdquo; as if it were a function to create new instances. That has all sorts of
weird baggage in JavaScript because everything does in JS, but the concept and
syntax were perfect. I already had first-class classes. And I already had
closures which meant a function call syntax that could be applied to arbitrary
expressions. So &amp;ldquo;constructors&amp;rdquo; just became what you got when you invoked a
class.&lt;/p&gt;

&lt;p&gt;I felt like Vox had gelled, like it &lt;em&gt;was&lt;/em&gt; a language now. And my two
implementations were coming along well too. I was surprised by how few hacks or
ugly corners I ran into. The codebases kind of fell together and the more I
tweaked them, the nicer they got. It felt more like I had discovered them than
that I had created them. It would be a shame to &lt;em&gt;not&lt;/em&gt; write the book and put
them out there into the world. They wanted me to.&lt;/p&gt;

&lt;p&gt;I committed to writing the book, and I restarted my rule of writing every single
day.&lt;/p&gt;

&lt;p&gt;I had a few thousand lines of pretty Java and C code, but how do I turn that
into a book that can be read in linear order? Compact codebases tend to be
highly intertwined with many cyclic dependencies. I didn&amp;rsquo;t want readers to have
to slog through ten chapters before they could even run &lt;code&gt;main()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This was the real technical challenge of writing the book&amp;mdash;how do I take two
implementations of the same language, and break them into incremental pieces
that I can build up a chapter at a time?&lt;/p&gt;

&lt;p&gt;I made this problem harder for myself because of the meta-goal I had. One reason
I didn&amp;rsquo;t get into languages until later in my career was because I was
intimidated by the reputation compilers have as being only for hardcore computer
science wizard types. I&amp;rsquo;m a college dropout, so I felt I wasn&amp;rsquo;t smart enough, or
at least wasn&amp;rsquo;t educated enough to hack it. Eventually I discovered that those
barriers existed only in my mind and that anyone &lt;em&gt;can&lt;/em&gt; learn it.&lt;/p&gt;

&lt;p&gt;My main overarching goal of the book is to pass on that feeling, to get readers
to understand there&amp;rsquo;s no magic in there and nothing keeping them out. To nail
that conceit, I wanted to include &lt;em&gt;every single line of code&lt;/em&gt; used by the
interpreters in the book. No parser generators, nothing left as an exercise for
the reader. If you type in all of the code in the book, you get two complete,
working interpreters. No tricks.&lt;/p&gt;

&lt;p&gt;So not only did I need to break these two interpreters into chapters, I needed
to do it without any cheating. I wanted a hard guarantee that at the end of each
chapter, you had a program that you could type in, compile, run, and do
something with. I knew I wouldn&amp;rsquo;t be able to verify this manually, so it was
time to create some tools.&lt;/p&gt;

&lt;h2&gt;A bespoke build system&lt;/h2&gt;

&lt;p&gt;I &lt;a href=&quot;https://github.com/munificent/game-programming-patterns/tree/master/book&quot;&gt;wrote my first book in Markdown&lt;/a&gt;. I slapped together &lt;a href=&quot;https://github.com/munificent/game-programming-patterns/blob/master/script/format.py&quot;&gt;a tiny Python
script&lt;/a&gt; that converts the Markdown to HTML and transcludes the code
snippets which are stored in separate C++ files. When I started my second book,
I took that script and started growing it. It evolved throughout writing the
book, but in the end, here is how it works.&lt;/p&gt;

&lt;p&gt;All of the code for the interpreters are stored in separate source files. I have
a &lt;a href=&quot;https://github.com/munificent/craftinginterpreters/tree/master/java/com/craftinginterpreters&quot;&gt;Java project&lt;/a&gt; that contains the complete Java interpreter that you get
by the end of that part of the book. Likewise, there&amp;rsquo;s a &lt;a href=&quot;https://github.com/munificent/craftinginterpreters/tree/master/c&quot;&gt;C project&lt;/a&gt; for the
bytecode VM. I can edit and build those in an IDE, run tests, debug them, etc.
They&amp;rsquo;re real programs.&lt;/p&gt;

&lt;p&gt;Meanwhile, the text of the book is &lt;a href=&quot;https://github.com/munificent/craftinginterpreters/tree/master/book&quot;&gt;authored in Markdown&lt;/a&gt;, one file per
chapter, just like my first book. To include a snippet of code in the book, I
put a tag in the Markdown like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-md&quot; data-lang=&quot;md&quot;&gt;&lt;span&gt;&lt;/span&gt;Which can be any of:

^code is-alpha

Once we&amp;#39;ve found an identifier, we scan the rest of it using:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, the &lt;code&gt;^code&lt;/code&gt; line says &amp;ldquo;look up the snippet named &amp;lsquo;is-alpha&amp;rsquo; and insert it
here.&amp;rdquo; When the build script generates the HTML for this chapter, it goes off
and hunts through the code for that snippet. Over in the code, special comments
delimit snippets. The one included here looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;//&amp;gt; Scanning on Demand is-alpha&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;isAlpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;t&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
          &lt;span class=&quot;i&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//&amp;lt; Scanning on Demand is-alpha&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;//&amp;gt;&lt;/code&gt; line begins the snippet and says what chapter the snippet appears in
and the name of the snippet. The &lt;code&gt;//&amp;lt;&lt;/code&gt; line ends the snippet. Pretty
straightforward.&lt;/p&gt;

&lt;p&gt;This let me build the book, but didn&amp;rsquo;t ensure that the thing I built actually
worked. So I wrote a separate script that instead of building the &lt;em&gt;book&lt;/em&gt;, builds
&lt;em&gt;programs&lt;/em&gt;. For each chapter, it collects &lt;em&gt;all&lt;/em&gt; of the snippets that appear in
that chapter and the previous ones and writes them out to separate source files.
In other words, it produces a separate interpreter, one for each chapter,
containing only the code that readers have seen so far.&lt;/p&gt;

&lt;p&gt;I put together a Makefile to build those per-chapter versions of each
interpreter to make sure they compiled. Of course, compiling successfully
doesn&amp;rsquo;t mean they do anything &lt;em&gt;useful&lt;/em&gt;. Writing a single correct interpreter is
hard. Writing thirty of them&amp;mdash;there are &lt;a href=&quot;http://craftinginterpreters.com/contents.html&quot;&gt;thirty chapters&lt;/a&gt; in the
book&amp;mdash;is much harder.&lt;/p&gt;

&lt;p&gt;I had already harvested a little &lt;a href=&quot;https://github.com/munificent/craftinginterpreters/blob/master/util/test.py&quot;&gt;test runner&lt;/a&gt; from Wren and ported most of
Wren&amp;rsquo;s tests over to be &lt;a href=&quot;https://github.com/munificent/craftinginterpreters/tree/master/test&quot;&gt;Lox tests&lt;/a&gt;. (I changed the name of the language in
the book since there was already a language out there named &amp;ldquo;Vox.&amp;rdquo;). I took that
test runner and extended it to be able to run the tests on each chapter&amp;rsquo;s
version of the interpreters. Of course, the tests don&amp;rsquo;t all pass&amp;mdash;the
interpreters aren&amp;rsquo;t complete! So I added metadata to track which tests I
expected to pass by which point in the book. With this in place, I could
automatically verify that the code that I was showing readers did exactly what I
expected.&lt;/p&gt;

&lt;h3&gt;More complex snippets&lt;/h3&gt;

&lt;p&gt;The snippet markers look pretty straightforward, and in many cases they are. But
reality tends to get messier and I didn&amp;rsquo;t allow myself to sweep any of that mess
under nearby rugs. Some changes don&amp;rsquo;t just &lt;em&gt;add&lt;/em&gt; code to the interpreter. I try
to minimize it, but often you need to &lt;em&gt;replace&lt;/em&gt; some existing code. A few lines
of code may appear in chapter 5 and then later get superseded in chapter 9 by
something more powerful.&lt;/p&gt;

&lt;p&gt;Obviously, I can&amp;rsquo;t jam both of those snippets into the same source file and
expect it to compile. Remember, the source files that I hand author are
themselves valid Java and C programs that I can build and run. If a function
contained several versions of its body mixed together, odds are slim that the
compiler will like what it sees.&lt;/p&gt;

&lt;p&gt;So, for any piece of code that later gets replaced&amp;mdash;in other words code that
is not part of the very final version of each interpreter&amp;mdash;there is a
different snippet syntax:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;concatenate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/* Strings concatenate &amp;lt; Garbage Collection concatenate-peek
  ObjString* b = AS_STRING(pop());
  ObjString* a = AS_STRING(pop());
*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//&amp;gt; Garbage Collection concatenate-peek&lt;/span&gt;
  &lt;span class=&quot;t&quot;&gt;ObjString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;AS_STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;peek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;t&quot;&gt;ObjString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;AS_STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;peek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//&amp;lt; Garbage Collection concatenate-peek&lt;/span&gt;

  &lt;span class=&quot;t&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;t&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;chars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;ALLOCATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;t&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;i&quot;&gt;memcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;i&quot;&gt;memcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;chars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;i&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This block comment contains a snippet of code. The header indicates that this
snippet is named &amp;ldquo;concatenate&amp;rdquo; and first appears in the &amp;ldquo;Strings&amp;rdquo; chapter. Then,
later, it gets removed when the &amp;ldquo;concatenate-peek&amp;rdquo; snippet in the &amp;ldquo;Garbage
Collection&amp;rdquo; chapter appears. In other words, that latter snippet replaces the
previous two lines.&lt;/p&gt;

&lt;p&gt;By storing the code for this snippet inside a block comment, I ensure that the
code as it is in the raw source file is still valid. In some places where the
interpreter gets revised multiple times, the code can get pretty complex. Here
is the &lt;code&gt;main()&lt;/code&gt; function of the bytecode VM:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;t&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;t&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//&amp;gt; A Virtual Machine main-init-vm&lt;/span&gt;
  &lt;span class=&quot;i&quot;&gt;initVM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;//&amp;lt; A Virtual Machine main-init-vm&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/* Chunks of Bytecode main-chunk &amp;lt; Scanning on Demand args
  Chunk chunk;
  initChunk(&amp;amp;chunk);
*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/* Chunks of Bytecode main-constant &amp;lt; Scanning on Demand args

  int constant = addConstant(&amp;amp;chunk, 1.2);
*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/* Chunks of Bytecode main-constant &amp;lt; Chunks of Bytecode main-chunk-line
  writeChunk(&amp;amp;chunk, OP_CONSTANT);
  writeChunk(&amp;amp;chunk, constant);

*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/* Chunks of Bytecode main-chunk-line &amp;lt; Scanning on Demand args
  writeChunk(&amp;amp;chunk, OP_CONSTANT, 123);
  writeChunk(&amp;amp;chunk, constant, 123);
*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/* A Virtual Machine main-chunk &amp;lt; Scanning on Demand args

  constant = addConstant(&amp;amp;chunk, 3.4);
  writeChunk(&amp;amp;chunk, OP_CONSTANT, 123);
  writeChunk(&amp;amp;chunk, constant, 123);

  writeChunk(&amp;amp;chunk, OP_ADD, 123);

  constant = addConstant(&amp;amp;chunk, 5.6);
  writeChunk(&amp;amp;chunk, OP_CONSTANT, 123);
  writeChunk(&amp;amp;chunk, constant, 123);

  writeChunk(&amp;amp;chunk, OP_DIVIDE, 123);
*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/* A Virtual Machine main-negate &amp;lt; Scanning on Demand args
  writeChunk(&amp;amp;chunk, OP_NEGATE, 123);
*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/* Chunks of Bytecode main-chunk &amp;lt; Chunks of Bytecode main-chunk-line
  writeChunk(&amp;amp;chunk, OP_RETURN);
*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/* Chunks of Bytecode main-chunk-line &amp;lt; Scanning on Demand args

  writeChunk(&amp;amp;chunk, OP_RETURN, 123);
*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/* Chunks of Bytecode main-disassemble-chunk &amp;lt; Scanning on Demand args

  disassembleChunk(&amp;amp;chunk, &amp;quot;test chunk&amp;quot;);
*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/* A Virtual Machine main-interpret &amp;lt; Scanning on Demand args
  interpret(&amp;amp;chunk);
*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//&amp;gt; Scanning on Demand args&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;argc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;repl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;argc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;runFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Usage: clox [path]&lt;/span&gt;&lt;span class=&quot;e&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;i&quot;&gt;freeVM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//&amp;lt; Scanning on Demand args&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/* A Virtual Machine main-free-vm &amp;lt; Scanning on Demand args
  freeVM();
*/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/* Chunks of Bytecode main-chunk &amp;lt; Scanning on Demand args
  freeChunk(&amp;amp;chunk);
*/&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Maintaining this is not super fun. But, thankfully, I have a build and test
system to tell me when I break something.&lt;/p&gt;

&lt;h2&gt;Slicing up the interpreters&lt;/h2&gt;

&lt;p&gt;So I had a tool that could let me split the interpreters across the chapters.
If it was possible to break these interpreters into chapters at all, it would
let me do so. Now I just had to figure out where to carve the seams. This was
the most technically challenging part of the book writing process. I wasn&amp;rsquo;t sure
if it was going to work at all.&lt;/p&gt;

&lt;p&gt;I spent several weeks sketching out potential lists of chapters, sprinkling
snippet markers throughout the code, and seeing if the result built. I&amp;rsquo;d get a
compile error because a snippet in an early chapter tried to call a function in
some later chapter and I would have to go back and reorganize things. I
hand-drew dependency graphs between language features and tried to untangle
them.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example of how this process unfolded:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;To teach functions I want show that recursion works.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;But to have recursive functions I need control flow. Otherwise, every
recursive function recurses infinitely without a base case. So control flow
has to come before functions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For control flow, I need side effects so that I can show that a certain code
path is &lt;em&gt;not&lt;/em&gt; taken. The obvious way to do side effects is to have a
&lt;code&gt;print()&lt;/code&gt; function that displays output.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;But I don&amp;rsquo;t have functions yet. That&amp;rsquo;s a cycle. Crap.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Sometimes I had to change the language itself to break cycles. The above example
is why Lox has a built in print &lt;em&gt;statement&lt;/em&gt; instead of a print &lt;em&gt;function&lt;/em&gt;.
Because that way we can introduce the print statement before control flow, which
is in turn before functions.&lt;/p&gt;

&lt;p&gt;I had to break a couple of cycles like that but, eventually, to my surprise, I
got it all sorted out. I had a complete list of chapters for both interpreters.
Every line of code was sorted into a snippet that belonged to one of those
chapters. I could build and run each chapter&amp;rsquo;s code. Best of all, each chapter
had a reasonably coherent concept and a roughly similar amount of code.&lt;/p&gt;

&lt;p&gt;Before, I felt like I had a language and code that wanted to get out there into
the world. Now I felt like I had a book. Or, at least, I had all of the &lt;em&gt;code&lt;/em&gt;
for a book.&lt;/p&gt;

&lt;h2&gt;A Chapter at a time&lt;/h2&gt;

&lt;p&gt;I wrote my first book one chapter at a time. I drafted, edited, illustrated each
chapter and put it online before moving to the next one. Serial publishing for
the digital age. I really loved that process. It helped build an audience for
the book and gave me incremental feedback which made the book better and kept me
going. I don&amp;rsquo;t think I could write a whole book in the dark.&lt;/p&gt;

&lt;p&gt;I intended to publish this book the same way, but the deeply interconnected
nature of the chapters made that much harder. I didn&amp;rsquo;t want to discover a
problem with the code in chapter 28 that forced me to tweak things in an earlier
chapter that readers had already read. I didn&amp;rsquo;t want to paint myself into a
corner or invalidate any previously-published material.&lt;/p&gt;

&lt;p&gt;So the entire time I was designing the language, coding the interpreters, and
splitting the codebases into chapters, I had not done any actual writing. I
didn&amp;rsquo;t want to put down any prose until I knew the code was solid. So I spent
the summer of 2016 just hacking on code. It was, honestly, a blast. The
programming part is definitely the fun part, and it was a joy to tinker on the
code and figure out how to break it into chapters. Sort of like making a jigsaw
puzzle and solving it at the same time.&lt;/p&gt;

&lt;p&gt;After a few months, it was all there. Every single line of code for the entire
book. A complete list of chapters. And I hadn&amp;rsquo;t written a single word of prose.
In theory, &amp;ldquo;all&amp;rdquo; that remained was writing some text to explain the code I had
already written along with some pictures. But, for me at least, English is a
much more taxing language to write than C or Java. I had all of the difficult
work ahead of me, and all of the fun was done.&lt;/p&gt;

&lt;h2&gt;Illustrating by hand&lt;/h2&gt;

&lt;p&gt;Well, not all of the fun. I did still have the illustrations to do. With my last
book, I hand-drew little sketchy diagrams to show various bits of architecture.
I wanted even more illustrations for this book to make the concepts less
abstract, less opaque. Unlike a videogame, you can&amp;rsquo;t &lt;em&gt;see&lt;/em&gt; a garbage collector
doing its thing. Visual metaphors really help.&lt;/p&gt;

&lt;p&gt;I liked the hand-drawn look. It furthered my meta-goal of making the material
more approachable, more human. But I wanted to up the quality. I wanted them to
be more intricate and contain more information. I wanted the drawings to be more
detailed. Less like margin doodles and more like, well, &lt;em&gt;illustrations&lt;/em&gt;. Maybe
even some lowercase letters.&lt;/p&gt;

&lt;p&gt;The ultimate goal for me is a print book, so I stuck with black and white ink. I
wanted a tighter, more &amp;ldquo;spidery&amp;rdquo; style, so I got some technical pens. People
often ask me what programs I used for the illustrations, assuming I did them all
digitally. Here are the main tools I used:&lt;/p&gt;

&lt;figure&gt;
&lt;img class=&quot;framed&quot; src=&quot;/image/2020/04/tools.jpg&quot;&gt;
&lt;figcaption&gt;I went with Pigma Microns in 01 and 005. If I were doing it
again, I think I&#39;d do Faber-Castell Pitt pens.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;There are two kinds of illustrations in the books: diagram-like ones that show
meaningful information, and drawings that are for metaphors or just to be silly
jokes. The process is different for each.&lt;/p&gt;

&lt;p&gt;I draw each diagram in pencil on graph paper. That lets me erase and move things
around until I get it where I like:&lt;/p&gt;

&lt;figure&gt;
&lt;img class=&quot;framed&quot; src=&quot;/image/2020/04/pencil.jpg&quot;&gt;
&lt;figcaption&gt;All of the vertical and horizontal lines in the illustrations
generally fall on the graph paper rules or halfway between them.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Then I tape a piece of tracing paper on top and draw over it in ink:&lt;/p&gt;

&lt;figure&gt;
&lt;img class=&quot;framed&quot; src=&quot;/image/2020/04/ink.jpg&quot;&gt;
&lt;figcaption&gt;I make mistakes sometimes, usually when lettering like &quot;upvaluels&quot;
here. I fix that in Photoshop after scanning.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I hand letter everything. It takes a &lt;em&gt;long&lt;/em&gt; time. I used to do graphic design,
and I have this weird tic where any time I see something that looks handwritten,
I look for multiple instances of the same letter to see if they are different or
if the design just used a handwriting font. It&amp;rsquo;s almost always a handwriting
font and I die a little inside to see the illusion evaporate.&lt;/p&gt;

&lt;p&gt;Well, this is &lt;em&gt;my&lt;/em&gt; damned book and no reader will ever feel that disappointment.
Every single fucking letter in every one of the illustrations was hand lettered
and is unique.&lt;/p&gt;

&lt;figure&gt;
&lt;img class=&quot;framed&quot; src=&quot;/image/2020/04/title.jpg&quot;&gt;
&lt;figcaption&gt;Here is the hand-lettered logotype for the book. Each &quot;R&quot; is
different!&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Also, if that&amp;rsquo;s not obsessive enough, I spent time &lt;em&gt;changing my own handwriting&lt;/em&gt;
to better match the text font of the book. I taught myself to
write double-story &amp;ldquo;a&amp;rdquo; and &amp;ldquo;g&amp;rdquo; letters and practiced by filling pages of paper
with the same letter over and over.&lt;/p&gt;

&lt;figure&gt;
&lt;img class=&quot;framed&quot; src=&quot;/image/2020/04/lettering.jpg&quot;&gt;
&lt;figcaption&gt;Look at the loop under the &quot;g&quot; in &quot;filling&quot; and the finial on the
&quot;a&quot; in &quot;apples&quot;.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I also wanted to make sure that the illustrations and text matched each other
across the book. To give the text a consistent size, I printed a little height
guide:&lt;/p&gt;

&lt;figure&gt;
&lt;img class=&quot;framed&quot; src=&quot;/image/2020/04/metrics.jpg&quot;&gt;
&lt;figcaption&gt;The dotted line indicates the x-height. I picked a ratio for that
to match the fonts I use for text and code.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I slid this paper under the tracing paper and lettered on top of those lines to
keep the metrics the same across the book.&lt;/p&gt;

&lt;p&gt;To keep the diagram size and line thickness consistent, each illustration has a
pair of registration marks a fixed distance apart:&lt;/p&gt;

&lt;figure&gt;
&lt;img class=&quot;framed&quot; src=&quot;/image/2020/04/registration.jpg&quot;&gt;
&lt;figcaption&gt;The little marks that the pencils are pointing at.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I scan each illustration into Photoshop for clean up and processing. I use those
marks when cropping to ensure that the image maintains the right size relative
to other images.&lt;/p&gt;

&lt;p&gt;I recorded a video of the whole process if you want to see it in action:&lt;/p&gt;

&lt;figure&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/iN1MsCXkPSA&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;figcaption&gt;Even in timelapse, it takes a long time.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Writing this all out makes me sound like a crazy person. What the hell am I
doing with my life? Or, more importantly, what &lt;em&gt;could I have been doing&lt;/em&gt; instead
of doing all that?&lt;/p&gt;

&lt;p&gt;Too late now, I guess. The picture-like drawings have a different workflow since
they don&amp;rsquo;t have a lot of straight lines or align to a grid.&lt;/p&gt;

&lt;figure&gt;
&lt;img class=&quot;framed&quot; src=&quot;/image/2020/04/drawing.jpg&quot;&gt;
&lt;figcaption&gt;How will readers understand what a stack is without this helpful
illustration?&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I draw those on regular sketch paper using a non-photo blue pencil. Then I ink
on top of that. I scan the paper in RGB and use the blue channel, which mostly
makes the blue pencil marks disappear.&lt;/p&gt;

&lt;figure&gt;
&lt;img class=&quot;framed&quot; src=&quot;/image/2020/04/blue.jpg&quot;&gt;
&lt;figcaption&gt;The sketch paper bleeds the ink more than I like but I didn&#39;t
want to change paper partway through the book, so I stuck with it.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;It&amp;rsquo;s a lot of work for each image, and this doesn&amp;rsquo;t include all of the work
after scanning it. And I wanted a lot of them. By the end, I had this stack of
paper:&lt;/p&gt;

&lt;figure&gt;
&lt;img class=&quot;framed&quot; src=&quot;/image/2020/04/stack.jpg&quot;&gt;
&lt;figcaption&gt;Such a small image for so much work.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I went through two full pads of tracing paper, two pads of graph paper, a
sketch pad, and several pens. I drew 181 illustrations.&lt;/p&gt;

&lt;h2&gt;Writing is suffering&lt;/h2&gt;

&lt;p&gt;I had the code, and I had a process for illustrations. The remaining work was
just writing all the words and drawing all the pictures. So that&amp;rsquo;s what I did. I
started at chapter one and started writing. For each chapter, I wrote an outline
and then a first draft. I did an editing pass over that to fix all the major
problems. Then a second pass where I read the whole chapter out loud to fix
cadence and other stuff.&lt;/p&gt;

&lt;p&gt;This is the same process I used for the first book. I stumbled onto something
that worked, so I wasn&amp;rsquo;t about to mess it up. I posted each chapter online, and
then spent a day fixing bugs that readers noticed. Then I moved on to the next
chapter.&lt;/p&gt;

&lt;p&gt;I wrote. And wrote. And wrote. Every single day. Every now and then I would have
a trip or something where I couldn&amp;rsquo;t write. As with my first book, I would bank
days by writing multiple sessions per day beforehand and then spend those banked
days on days that I didn&amp;rsquo;t write. But for the most part, I wrote every day.&lt;/p&gt;

&lt;p&gt;In the blog post I wrote after my first book, I whined about how I had to write
on days when I traveled for work, on holidays, when the kids had sniffles. At
the time, it truly was one of the hardest things I&amp;rsquo;ve ever done.&lt;/p&gt;

&lt;p&gt;This time was something else entirely. I wrote the day my grandfather died
(peacefully, unsurprisingly) and the day my aunt died (tragically, days after
retiring). I wrote the day I found out my Mom had cancer and my children saw me
cry for the first time. I was flying to Louisiana to keep my Mom company when I
turned on my phone during the layover and discovered a dear friend had had a
stroke. I wrote that evening. I woke up the next day and found out she had died.
I wrote that morning sitting next to my brother in the waiting room of the
hospital while my Mom got her PET scan.&lt;/p&gt;

&lt;p&gt;The morning of my friend&amp;rsquo;s memorial service, I wrote in the hotel. Later that
day, I openly sobbed in front of a room full of people. The next day, my wife
found out her aunt had terminal cancer. I wrote on the flight home.&lt;/p&gt;

&lt;p&gt;See that dog up there in my profile photo? That&amp;rsquo;s Ginny. She&amp;rsquo;s on the back cover
of my first book. Her myriad health problems finally &lt;a href=&quot;https://twitter.com/munificentbob/status/1100898048811491328&quot;&gt;caught up with her&lt;/a&gt;
last spring. People sometimes ask, &amp;ldquo;When did you know you were an adult?&amp;rdquo; For me
it was the day I made the call to put my dog down. The hardest part was watching
my kids say goodbye to her. I&amp;rsquo;m tearing up now writing about it. I ran my
fingers through Ginny&amp;rsquo;s silky fur as the sedatives took her away. I only got
through 59 words that afternoon.&lt;/p&gt;

&lt;p&gt;I wrote the day the US somehow elected a racist, abusive, corrupt demagogue, and
every day afterwards as I saw my country and others turn towards hate and
authoritarianism. I wrote while climate change and income inequality worsened.
And now here I am writing at home on the same desk where I work now, quarantined
like most of you all, hoping to survive the worst pandemic the world has seen in
a century.&lt;/p&gt;

&lt;p&gt;This is not about how disciplined I was. Because during what have been some of
the worst years of my life, a weird inversion happened. It&amp;rsquo;s not that I was
going through that shit and still writing &lt;em&gt;in addition to&lt;/em&gt; it. I &lt;em&gt;had&lt;/em&gt; to keep
writing. Writing was one thing I could still control in the face of many things
I could not. If I could make it through the book, maybe I could make it through
the other things too. If I had skipped a day it would have meant that the cancer
or the deaths beat me that day, that they were stronger than me. I feared what
it would mean to me to let go.&lt;/p&gt;

&lt;p&gt;I got through these four years and kept writing, but I paid a price. When I read
the earlier chapters, they have a whimsy and light-heartedness that later
chapters lack. We&amp;rsquo;re all going through dark times, and I don&amp;rsquo;t &lt;em&gt;feel&lt;/em&gt; light. The
past few years left a mark on me, and that mark shows up in the book. I miss the
goofier person I used to be, sometimes. But I&amp;rsquo;d like to believe that maybe the
person I am now is a little more honest. Maybe some of those jokes were a mask.&lt;/p&gt;

&lt;p&gt;And, thankfully, Mom is in remission.&lt;/p&gt;

&lt;p&gt;Psychological self examination aside, I did keep up the writing. Which is good
because, &lt;em&gt;man&lt;/em&gt; did I underestimate this book. I was aiming for 60,000 words and
hoped to get it done in about a year. Here I am four years later sitting on a
quarter of a million words.&lt;/p&gt;

&lt;p&gt;People sometimes ask what it&amp;rsquo;s like writing something that big. I&amp;rsquo;ve been asking
myself that for the past couple of weeks. And the weird thing is, &lt;em&gt;I don&amp;rsquo;t
know.&lt;/em&gt; I&amp;rsquo;ve had my head down for the past four years and haven&amp;rsquo;t looked past the
next paragraph or two the entire time. What does it feel like to write an email
or draw a picture? Writing the book felt like that. I just happened to do it
over and over again. I feel like a marathon runner who&amp;rsquo;s been watching his feet
the whole time and didn&amp;rsquo;t even notice when he stumbled over the finish line.&lt;/p&gt;

&lt;h2&gt;Now what?&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Crafting Interpreters&lt;/em&gt; is complete now. I had to stop here for a minute and
look at that sentence. I&amp;rsquo;ve been working on this book every day for around 1,400
days. I can&amp;rsquo;t &lt;em&gt;wait&lt;/em&gt; to take a break. So that&amp;rsquo;s the next step. My plan was to
finish the book right before spring break and enjoy a week on the beach with
family.&lt;/p&gt;

&lt;p&gt;That beach trip went the way of so many other plans in early 2020, but I still
intend to take a long break. I don&amp;rsquo;t know if you noticed, but we all have a lot
of other shit to deal with right now. I&amp;rsquo;m going to relax.&lt;/p&gt;

&lt;p&gt;Every morning since 2016, I&amp;rsquo;ve woken up with a task I had to do. Until I got my
writing done for the day, it was on my mind, weighing me down. Writing left me
drained. If you&amp;rsquo;ve ever had a newborn, you know the feeling of always having to
carry the baby around. After a while, it&amp;rsquo;s like you forget what it&amp;rsquo;s like to
have &lt;em&gt;two&lt;/em&gt; free arms. I&amp;rsquo;ve been carrying this baby for four years, so I&amp;rsquo;m
looking forward to having both arms for a while.&lt;/p&gt;

&lt;p&gt;Once I&amp;rsquo;m recharged, the real fun starts. Having the book online is important,
but for me, &lt;em&gt;Crafting Interpreters&lt;/em&gt; was always meant to be a &lt;em&gt;book&lt;/em&gt; with pages
and a cover. So after a long bout of editing and bug fixing, I&amp;rsquo;m going to get
started doing the page layout for the print edition. I love graphic design, and
I can&amp;rsquo;t wait to hold it in my hands.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;d like to hold it in &lt;em&gt;your&lt;/em&gt; hands when it comes out, I have &lt;a href=&quot;https://mailchi.mp/afd054e73140/robertnystrom&quot;&gt;a mailing
list&lt;/a&gt; where I&amp;rsquo;ll let you know when the book is done. In the meantime, I
think I&amp;rsquo;ve earned some rest.&lt;/p&gt;</content>
  </entry>

  <entry>
    <id>http://journal.stuffwithstuff.com/2018/05/19/40-songs</id>
    <link type="text/html" rel="alternate" href="http://journal.stuffwithstuff.com/2018/05/19/40-songs/"/>
    <title>40 Songs</title>
    <published>2018-05-19T07:00:00.000Z</published>
    <updated>2018-05-19T07:00:00.000Z</updated>
    <author>
      <name>Robert Nystrom</name>
      <uri>http://journal.stuffwithstuff.com/</uri>
    </author>
    <content type="html">&lt;p&gt;I turned 40 today. Well, actually, as I&amp;rsquo;m writing this, I&amp;rsquo;m not yet 40. And,
unless you happen to be reading this on the very day I post it, it&amp;rsquo;s no longer
my birthday. Chronology in text is weird.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not gonna lie. This number is hitting me hard. Intellectually, I get that
the fact that it&amp;rsquo;s a round number is merely an artifact of our base ten numeral
system, which is in turn an arbitrary quirk of the evolutionary history that led
to us having ten fingers. I get it.&lt;/p&gt;

&lt;p&gt;But what it really feels like is the midpoint. As a male in the US, 40 isn&amp;rsquo;t
that far from the halfway point of average life expectancy. I have more memories
accrued than new experiences to anticipate. In the great hallway of life, there
are more doors behind me than ahead, which makes the regret of those unopened
ones all the more acute.&lt;/p&gt;

&lt;p&gt;I was talking about all this with my sister-in-law a few months ago. Her
milestone is coming soon too. She plans to celebrate by writing a list of her
top forty favorite songs. I&amp;rsquo;ll be damned if I don&amp;rsquo;t love a good list, so here&amp;rsquo;s
mine.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s in chronological order &lt;em&gt;of my personal relationship to the song&lt;/em&gt;. The song
appears when it entered my life. The luxury of this being my list is that I get
to scramble time as it suits me.&lt;/p&gt;

&lt;p&gt;40 is a pretty long list of songs. Heck, some days it feels like a long list of
years. So we&amp;rsquo;re going to need some speed, and what better way to get moving
then&amp;hellip;&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Vppbdf-qtGU&quot;&gt;La Grange&lt;/a&gt;&lt;/strong&gt; - ZZ Top&lt;/h3&gt;

&lt;p&gt;As you&amp;rsquo;ll find out, I live for a good build-up, and there is none better than
this. A couple of sticks on the edge of the snare and a palm-muted riff and
&lt;em&gt;holy crap what just happened to my pulse&lt;/em&gt;. ZZ Top is possibly the &lt;em&gt;tightest&lt;/em&gt;
band that ever lived. Every punchy ghost hit on the snare is so locked into the
guitar and bass that it must have been played by a single giant six-armed demon.&lt;/p&gt;

&lt;p&gt;If your car is on fumes, wheezing out its last few yards, threatening to leave
you stranded in the desert, crank this song up and I promise you you&amp;rsquo;ll get
another mile or two out of the tank.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=qeMFqkcPYcg&quot;&gt;Sweet Dreams (Are Made of This)&lt;/a&gt;&lt;/strong&gt; - Eurythmics&lt;/h3&gt;

&lt;p&gt;This is the first song that I distinctly remember hearing for the first time.
Picture tiny me standing in front of a TV, staring mouth agape at Annie Lennox&amp;rsquo;s
bright red hair and that weird-ass video, wondering what the hell was going on
and why I liked it so much.&lt;/p&gt;

&lt;p&gt;I sometimes wonder if imprinting on this song at such a young age twisted my
brain. Lord knows I love a synth bassline and a four on the floor kick to an
unhealthy degree. That thing I have for short hair on women must have come from
somewhere.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=yRYFKcMa_Ek&quot;&gt;Maneater&lt;/a&gt;&lt;/strong&gt; - Daryl Hall &amp;amp; John Oates&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m just old enough to remember roller rinks. My older brother and I would go,
and I have vivid memories of how &lt;em&gt;cool&lt;/em&gt; it felt to be in that dark, cavernous
room, surrounded by pulsing sound.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Maneater&amp;rdquo; is one of the songs I remember from there. (&amp;ldquo;Mickey&amp;rdquo; is another.) It
ticks almost every checkbox for what I still love in a song: tons of reverb,
high string pads, machine-precision drums, rhythmic bassline locked to a minor
chord progression. I know I should hear 80s cheese when I listen to it today,
but it still sounds just as spacious and moody today as it did then.&lt;/p&gt;

&lt;p&gt;What I also remember is strapping on my skates every time and never &lt;em&gt;once&lt;/em&gt;
having the courage to venture off the carpet onto the rink. It took me thirty
years and a friend&amp;rsquo;s skating party to face that fear and finally get out there.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=0R6WIbx8ysE&quot;&gt;Send Me an Angel&lt;/a&gt;&lt;/strong&gt; - Real Life&lt;/h3&gt;

&lt;p&gt;Alright, I gotta speed this up if we&amp;rsquo;re going to get through all forty in a
reasonable amount of time. There is a special place in the dark&amp;mdash;of course
it&amp;rsquo;s dark&amp;mdash;corner of my soul for sad synthpop. I don&amp;rsquo;t know what it is, but
slap some maudlin lyrics on top of a dance beat and I&amp;rsquo;m all over it. Fast + sad
is my jam.&lt;/p&gt;

&lt;p&gt;The whole genre pushes my buttons, but &amp;ldquo;Send Me an Angel&amp;rdquo; stands out because:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;David Sterry really goes for it lyrically. It&amp;rsquo;s hard to top &amp;ldquo;if a girl walks
up and carves her name in my heart, I&amp;rsquo;ll turn and run away&amp;rdquo; for abject
pathos.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;That little synth choir melody is six notes of absolute perfection.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Decades later, I was at a show for a friend of a friend&amp;rsquo;s band. The singer said
they were going to do a weird cover and if anyone knew the song, to shout out
the name of the band. He played the first three notes of that melody and it was
like the heavens opened above, presumably so angels could watch me yelling &amp;ldquo;Real
Life!&amp;rdquo; over and over at the top of my lungs like an idiot.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=m0AKJMGxwpE&quot;&gt;Enjoy the Silence&lt;/a&gt;&lt;/strong&gt; - Depeche Mode&lt;/h3&gt;

&lt;p&gt;Speaking of synthpop songs with aching melodies. I&amp;rsquo;ve listened to Depeche Mode
so much over the years that they are all over my memories. But the best, the
one I&amp;rsquo;ve shared with literally no one until now&amp;hellip;&lt;/p&gt;

&lt;p&gt;My best friend in elementary school had an older sister. My friend and I were
two total nerds (still are), but his sister was &lt;em&gt;so cool&lt;/em&gt;&amp;mdash;serious and
artistic. Exhibit A: giant Depeche Mode posters on her wall. Exhibit B: a
complete and utter disinterest in interacting with us for even a second. At that
age, that was about all it took for a crush to blossom.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Cv6tuzHUuuk&quot;&gt;Walk Like an Egyptian&lt;/a&gt;&lt;/strong&gt; - Bangles&lt;/h3&gt;

&lt;p&gt;At some point in my childhood, I informed my parents that I liked music and
desired the ability to listen to it in my bedroom. My Dad, being the music snob
he is, solved that problem by buying young me an honest-to-God record player. No
cassette tapes in this household, young man!&lt;/p&gt;

&lt;p&gt;One of the first records I got was &amp;ldquo;Different Light&amp;rdquo; by the Bangles. I spent a
lot of time listening to the bassline in this song, gazing at the photos on the
cover, and having thoughts about Susanna Hoffs I wasn&amp;rsquo;t quite old enough to
process yet.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://youtu.be/vsQrKZcYtqg?t=6&quot;&gt;Istanbul (Not Constantinople)&lt;/a&gt;&lt;/strong&gt; - They Might Be Giants&lt;/h3&gt;

&lt;p&gt;Look, I don&amp;rsquo;t know what happened. I&amp;rsquo;ll blame it on incredible middle school
awkwardness, but I went through a phase where I, I shit you not, listened to
&lt;em&gt;nothing&lt;/em&gt; but TMBG. For like two years. I still know all of the lyrics to every
single song on &amp;ldquo;Flood&amp;rdquo;, &amp;ldquo;Lincoln&amp;rdquo;, &amp;ldquo;Apollo 18&amp;rdquo;, and &amp;ldquo;John Henry&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;They aren&amp;rsquo;t my thing very much these days, but the lyrics are still up there in
the wetware should a particularly odd karaoke night have need of them.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=EbI0cMyyw_M&quot;&gt;Run Through the Jungle&lt;/a&gt;&lt;/strong&gt; - CCR&lt;/h3&gt;

&lt;p&gt;I mentioned intros, right? This is another of the greats. I think most people
like the happy-dumb CCR hits, but for me I want the ones that remind me that the
US was goin&amp;rsquo; through some &lt;em&gt;shit&lt;/em&gt; when those songs came out. This tops that list.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=9muzyOd4Lh8&quot;&gt;Nights in White Satin&lt;/a&gt;&lt;/strong&gt; - Moody Blues&lt;/h3&gt;

&lt;p&gt;One of the things I truly lament about my generation and the generations to
follow is our acute self-awareness. Ironic detachment of the 90s followed by
&lt;a href=&quot;https://en.wikipedia.org/wiki/New_Sincerity&quot;&gt;ironic &lt;em&gt;attachment&lt;/em&gt;&lt;/a&gt; left us
basically unable to produce art without constantly obsessing about what the art
says about the artist.&lt;/p&gt;

&lt;p&gt;Can you imagine &lt;em&gt;anyone&lt;/em&gt; today sitting down to record a rock album with an
orchestra, and then slapping a &lt;em&gt;poem&lt;/em&gt; on the end? And doing it with complete,
heartfelt, unironic sincerity? It&amp;rsquo;s an ability that seems to be completely lost.&lt;/p&gt;

&lt;p&gt;Thankfully, this song embedded itself in my subconscious before that cultural
shift happened. I love every single bit of this song, completely, totally.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=I_izvAbhExY&quot;&gt;Stayin&amp;rsquo; Alive&lt;/a&gt;&lt;/strong&gt; - The Bee-Gees&lt;/h3&gt;

&lt;p&gt;Speaking of things I love un-ironically. For a nerdy white dude, I have spent a
surprisingly large amount of time shaking my ass on various dancefloors across
the United States. Not with any particular &lt;em&gt;skill&lt;/em&gt; mind you, but with
great enthusiasm.&lt;/p&gt;

&lt;p&gt;I like basically any kind of dance music, and disco is certainly on that list.
The genre is a distillation of everything that makes a song danceworthy, with
everything unnecessary filtered out. Picking one disco song is hard, and picking
one played by white guys is a borderline travesty, but I&amp;rsquo;d be lying if I said I
didn&amp;rsquo;t know every single cymbal crash in this song and had my arm thrust, finger
extended, for each.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=gzoEK545j64&quot;&gt;Groove is in the Heart&lt;/a&gt;&lt;/strong&gt; - Deee-Lite&lt;/h3&gt;

&lt;p&gt;Bootsy&amp;rsquo;s bassline. That beat. If this don&amp;rsquo;t get your booty movin&amp;rsquo;, your booty
must be dead.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=1lWJXDG2i0A&quot;&gt;Free Fallin&amp;rsquo;&lt;/a&gt;&lt;/strong&gt; - Tom Petty&lt;/h3&gt;

&lt;p&gt;Thomas Earl Petty is another one like Depeche Mode where it&amp;rsquo;s hard to know where
to slot him in. His music is a constant companion in my life. Narrowing his
presence on this list down to a single song was hard enough. &amp;ldquo;You Wreck Me&amp;rdquo;,
&amp;ldquo;Learning to Fly&amp;rdquo;, &amp;ldquo;American Girl&amp;rdquo;, &amp;ldquo;Breakdown&amp;rdquo; are all strong contenders.&lt;/p&gt;

&lt;p&gt;I picked this one because it spans what I think of as the two sides of Petty&amp;mdash;the straightforward timeless American rock, and the bittersweet character
studies.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=hwZNL7QVJjE&quot;&gt;Stand By Me&lt;/a&gt;&lt;/strong&gt; - Ben E. King&lt;/h3&gt;

&lt;p&gt;A high school friend got a cheap acoustic guitar and I eventually got my hands
on it. Tinkering around, I figured out the bassline to &amp;ldquo;Stand By Me&amp;rdquo;, playing
that guitar like a bass, upside down. (I&amp;rsquo;m left-handed and it was strung
right-handed.) This was the first bassline I ever learned.&lt;/p&gt;

&lt;p&gt;Did you know King never intended to record this? He wrote it for the Drifters
and only reluctantly recorded it himself when he had some extra time in the
studio. Listen to that vocal performance. Can you imagine being so good that you
can just toss something like that out there?&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=CC5ca6Hsb2Q&quot;&gt;Children&lt;/a&gt;&lt;/strong&gt; - Robert Miles&lt;/h3&gt;

&lt;p&gt;Apparently, there was a whole house and techno scene going on in the world.
Maybe if I&amp;rsquo;d been a kid in Chicago or Detroit, I would have noticed. But none of
that made its way to southern Louisiana until this instrumental, piano-driven
electronica song improbably came down from space and landed on commercial radio.&lt;/p&gt;

&lt;p&gt;The first time I heard this song was a &lt;em&gt;revelation&lt;/em&gt;. I didn&amp;rsquo;t even know music
like this existed. I loved everything about it, the rigid tempo, heartbeat kick,
offset bass, heart-stirring melody. I couldn&amp;rsquo;t get enough.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=brZ_WBEzw6E&quot;&gt;Dark + Long (Dark Train)&lt;/a&gt;&lt;/strong&gt; - Underworld&lt;/h3&gt;

&lt;p&gt;Right around this time, I met a guy at work who wore these weird pants &lt;a href=&quot;https://www.google.com/search?q=jnco&amp;client=firefox-b-1-ab&amp;source=lnms&amp;tbm=isch&amp;sa=X&amp;ved=0ahUKEwim2dT2j4zbAhVOyWMKHfZZDaMQ_AUICigB&amp;biw=1166&amp;bih=803&quot;&gt;with
huge legs&lt;/a&gt;. What was that about? He told my brother and I he was a &amp;ldquo;raver&amp;rdquo;
and there was this music called &amp;ldquo;techno&amp;rdquo; and you could hear it at these things
called &amp;ldquo;raves&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;In one sitting, he gave us a rundown of artists that kept my ears full for
several years. The band that I forged the strongest bond with is Underworld. I
rushed out and got the &amp;ldquo;Pearl&amp;rsquo;s Girl&amp;rdquo; EP, then later &amp;ldquo;Dubnobasswithmyheadman&amp;rdquo;
and &amp;ldquo;Second Toughest in the Infants&amp;rdquo;. Eventually, I had almost everything they
ever recorded.&lt;/p&gt;

&lt;p&gt;I met some of my closest college friends by bonding over Underworld. We once
drove 900 miles from Baton Rouge to Chicago, non-stop, because that was the
closest place to us that Underworld was playing during the &amp;ldquo;Beaucoup Fish&amp;rdquo; tour.
Still one of the best shows I ever saw.&lt;/p&gt;

&lt;p&gt;Picking a single Underworld song is hard. Picking this particular song is
frustrating because for most, it&amp;rsquo;s associated with Trainspotting. But that&amp;rsquo;s not
what I think when I hear this. To me, it&amp;rsquo;s driving home from raves at the State
Palace Theatre in New Orleans as the sun comes up in our rearview mirror.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=bV-hSgL1R74&quot;&gt;Halcyon + On + On&lt;/a&gt;&lt;/strong&gt; - Orbital&lt;/h3&gt;

&lt;p&gt;A lot of techno at the 90s was, well, kind of dumb. Maybe a good beat to dance
to, but it didn&amp;rsquo;t leave you thinking or feeling much of anything. Aphex Twin
took care of the &amp;ldquo;thinking&amp;rdquo; part. Orbital took care of feeling. They showed that
music made with computers could have as much heart as anything else.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not the kind of person to fret about what song I want played at my funeral,
but if I had to pick, this might be it.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=WQYsGWh_vpE&quot;&gt;Roads&lt;/a&gt;&lt;/strong&gt; - Portishead&lt;/h3&gt;

&lt;p&gt;Oh, the tremolo on the Rhodes, mirroring Beth Gibbons&amp;rsquo; vibrato. Those ghost hits
on the snare. The strings. &lt;em&gt;That bassline.&lt;/em&gt; Every ounce of this is flawless.&lt;/p&gt;

&lt;p&gt;Like most people at the time, I got into trip-hop. Some of it doesn&amp;rsquo;t hold up,
but some of it, like this, I seem to respond to more and more the older I get.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=tSRYvYN1ayw&quot;&gt;Gorecki&lt;/a&gt;&lt;/strong&gt; - Lamb&lt;/h3&gt;

&lt;p&gt;Around this time, I was working at an Internet start-up during the first dotcom
bubble. Amazon had just started selling CDs and they had this new &amp;ldquo;Customers who
bought this also bought&amp;rdquo; thing. Today, we are inundated with machine learning
that knows every single connection between ever human artifact every produced.
It&amp;rsquo;s hard to remember what the world was before recommendation engines.&lt;/p&gt;

&lt;p&gt;But there was a time where if you liked some song, you might be totally unable
to find other stuff like it, &lt;em&gt;even if that other stuff existed.&lt;/em&gt; If you were
lucky, the guy at the music store knew stuff. That was literally it.&lt;/p&gt;

&lt;p&gt;So when I typed in the one trip-hop band I knew into the search box at
&lt;a href=&quot;http://www.amazon.com&quot;&gt;www.amazon.com&lt;/a&gt;, and then saw a list of other bands I might also like, and other
bands linked to from &lt;em&gt;them&lt;/em&gt;, and so on, it was like the gates to Paradise had
opened up.&lt;/p&gt;

&lt;p&gt;I ordered a stack of CDs, the largest music purchase of my life. They showed up
a week later. I took them home, put Lamb&amp;rsquo;s debut album in, and put on my
headphones. The first time this song came on, I was moved nearly to tears.&lt;/p&gt;

&lt;p&gt;Granted, I was going through some girlfriend stuff at the time, so tears weren&amp;rsquo;t
as far away as usual, but it&amp;rsquo;s still the most profoundly emotional listening
experience of my life.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=U4U19zwFENs&quot;&gt;La Femme d&amp;rsquo;Argent&lt;/a&gt;&lt;/strong&gt; - Air&lt;/h3&gt;

&lt;p&gt;One day, the roommate of the girl that caused the aforementioned troubles put in
a CD in her car stereo. She said, &amp;ldquo;You like electronic stuff, you might like
this.&amp;rdquo; I was totally flummoxed by what came on. It sounded like it had been
recorded in the 70s. Was it even &amp;ldquo;electronic&amp;rdquo; music? She insisted it had come
out recently. I&amp;rsquo;d never heard anything like it. It was, and still is,
magnificent. An album that stands outside of time and genre.&lt;/p&gt;

&lt;p&gt;Much much later, it occurred to me that I had dated the wrong roommate.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Ci_LIavsEhQ&quot;&gt;Kathy&amp;rsquo;s Song&lt;/a&gt;&lt;/strong&gt; - Apoptygma Berzerk&lt;/h3&gt;

&lt;p&gt;I love this song first because it reminds me of discovering a whole new genre of
music (synthpop and EBM), a circle of friends (&amp;ldquo;the Baton Rouge goth community&amp;rdquo;
as my friend used to say) and a new bar (The Spanish Moon) all at the same time.&lt;/p&gt;

&lt;p&gt;Going to that bar led to throwing parties with the same people and music, which
led to me DJing at our house, which eventually led to me DJing at the Spanish
Moon, which was a huge step for me to get past some of my crippling shyness.&lt;/p&gt;

&lt;p&gt;I love this song second because my sister-in-law&amp;rsquo;s name is &amp;ldquo;Cathy&amp;rdquo;, and I played
this at her wedding on the day that I got to officially call her family.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=hpji_vmCUVU&quot;&gt;Remember (Mood II Swing Mix)&lt;/a&gt;&lt;/strong&gt; - BT&lt;/h3&gt;

&lt;p&gt;There are a number of BT songs that could be on this list, but I picked this
remix because it&amp;rsquo;s the track I&amp;rsquo;ve listened to the most over the years. &amp;ldquo;Flaming
June&amp;rdquo; and &amp;ldquo;Poseidon&amp;rdquo; are up there too.&lt;/p&gt;

&lt;p&gt;But, also, because every time I hear that little fuzz effect come in at :15, I
can still perfectly picture the owner of The Spanish Moon sprinting across the
dancefloor towards the DJ booth, panic in his eyes, because he thought I&amp;rsquo;d blown
his sound system.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=sbnujaAbD2A&quot;&gt;Autumn Tactics&lt;/a&gt;&lt;/strong&gt; - Chicane&lt;/h3&gt;

&lt;p&gt;That couple year span when &amp;ldquo;progressive house&amp;rdquo; was the thing brought a lot of
great artists to my attention. Of all of them, I probably sunk more time into
Chicane&amp;rsquo;s first two albums than anything else. This isn&amp;rsquo;t really a house track&amp;mdash;I don&amp;rsquo;t know how to categorize it, honestly&amp;mdash;and maybe that&amp;rsquo;s why it&amp;rsquo;s
held up so well for me. I&amp;rsquo;ve been listening to it for close to twenty years, and
I still haven&amp;rsquo;t tired of it.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=B4px0qQrG5E&quot;&gt;Poor Leno&lt;/a&gt;&lt;/strong&gt; - R√∂yksopp&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;re getting closer to the modern era, witnessed by the fact that I stumbled
onto this song from a &lt;em&gt;video&lt;/em&gt; on the &lt;em&gt;Internet&lt;/em&gt;. This song led to me buying
turntables. I was going to clubs listening to house all the time, but most of
the DJs were playing stripped down tribal or tech house that sounded soulless
and empty to me. I didn&amp;rsquo;t necessarily need a full set of lyrics, but I at least
wanted a chord progression.&lt;/p&gt;

&lt;p&gt;I realized that if I ever wanted to hear this track or others like it on a
dancefloor, I was going to have to make it happen myself. I filled up my online
shopping cart at Turntable Lab. A few weeks later some very large, very heavy
boxes showed up at work, and I was off learning how to beatmatch.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=omJQVvKVQCk&quot;&gt;Tracey In My Room&lt;/a&gt;&lt;/strong&gt; - EBTG vs Soul Vision&lt;/h3&gt;

&lt;p&gt;This song is a two-fer. Tracy Thorn from Everything but the Girl is one of my
favorite vocalists. When Ben Watt took EBTG in a decidedly electronic direction
with &amp;ldquo;Walking Wounded&amp;rdquo; and then &amp;ldquo;Temperamental&amp;rdquo;, I was right there with him.&lt;/p&gt;

&lt;p&gt;But around this time was also when I started to get fully into house music, the
more heartfelt the better. This record, a mash-up of a house song and the vocals
from &amp;ldquo;Wrong&amp;rdquo; merges those two better than it has any right to.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=5ViItcZyYBw&quot;&gt;Unspoken&lt;/a&gt;&lt;/strong&gt; - Four Tet&lt;/h3&gt;

&lt;p&gt;In my twenties, my friends and I used to hit &lt;a href=&quot;http://parkavecds.com/&quot;&gt;Park Ave.
CDs&lt;/a&gt; every Tuesday when new music came out. This album
was at a listening station on an end cap. When the first song came on, it was as
if the lights in the building gradually dimmed, leaving nothing but sound.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=mMh-Y2IWJZc&quot;&gt;Back of my Hand&lt;/a&gt;&lt;/strong&gt; - Gemma Hayes&lt;/h3&gt;

&lt;p&gt;We went to this record store so often that the employees would hook us up with
samplers and other merch. This song was on one. It&amp;rsquo;s not my usual genre and I
can&amp;rsquo;t say I&amp;rsquo;ve listened to much else by her. But the production on this song
pushes it out of generic singer-songwriter and into something really interesting
to me.&lt;/p&gt;

&lt;p&gt;I love the contrast between the folksy guitar&amp;mdash;twelve-string? double-tracked?&amp;mdash;and that that tinny mechanical drum loop. When the fully-EQed beat and organ
drops, my heart goes a-flutter.&lt;/p&gt;

&lt;p&gt;I had this song as my alarm clock for several years. It was a gentle way to wake
up and the end result was the lyrics embedding themselves in my subconscious.
Years later, my kids started asking me to sing them bedtime songs. This was one
of the few whose words I remembered and whose melody fit within my not-so-wide
vocal range.&lt;/p&gt;

&lt;p&gt;Listening brings back peaceful mornings sipping coffee in Orlando, and gentle
nights in Washington stroking my daughters&amp;rsquo; hair as they fall asleep. It&amp;rsquo;s hard
to imagine a better pair of bookends.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=0wrsZog8qXg&quot;&gt;Such Great Heights&lt;/a&gt;&lt;/strong&gt; - Postal Service&lt;/h3&gt;

&lt;p&gt;The drag about being into electronic music in Orlando back then was, well, the
other people into it. Instead of the fun rave scene of New Orleans where kids
were down to Earth and just wanted a good time, Orlando was a &lt;em&gt;club&lt;/em&gt; scene&amp;mdash;overdressed bros and over-made-up woman desperately trying to impress each other
while trying not to look desperate.&lt;/p&gt;

&lt;p&gt;Indie dance music and Orlando&amp;rsquo;s Independent Bar (called &amp;ldquo;Barbarella&amp;rdquo; at the
time) saved me from that. The indie night there remains the absolute best
dancefloor, and the most fun crowd I&amp;rsquo;ve ever experienced. Like clockwork, every
Friday night ended with a packed, sweaty, grinning mass of euphoric people.&lt;/p&gt;

&lt;p&gt;There are a number of songs I could pick to be the anthem for that time in my
life, but this one also happens to mark a great point in a relationship (before
the relationship went no-so-great).&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=SPlQpGeTbIE&quot;&gt;Move Your Feet&lt;/a&gt;&lt;/strong&gt; - Junior Senior&lt;/h3&gt;

&lt;p&gt;One of the few things I love as much as dance music is pixel art, so this song&amp;rsquo;s
video pushes all of the buttons on the 747 control panel of my heart.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Gs069dndIYk&quot;&gt;September&lt;/a&gt;&lt;/strong&gt; - Earth, Wind, and Fire&lt;/h3&gt;

&lt;p&gt;I expected more soul music to make this list, but somehow it didn&amp;rsquo;t. It would
have been a real shame to omit this gem. Thursdays were soul night at I-Bar and
I can&amp;rsquo;t hear this song without picturing my friend Amy cutting up the
dancefloor.&lt;/p&gt;

&lt;p&gt;This song gets twice my love because I also used to spin the fantastic &lt;a href=&quot;https://www.youtube.com/watch?v=wn5Q37qOiiA&quot;&gt;Phats &amp;amp;
Small house remix&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=g6jhpaX7fNQ&quot;&gt;Under the Milky Way&lt;/a&gt;&lt;/strong&gt; - The Church&lt;/h3&gt;

&lt;p&gt;You know those songs that reside in a primordial part of your brain? I can&amp;rsquo;t
recall ever &lt;em&gt;not&lt;/em&gt; knowing this song. I&amp;rsquo;m wired towards the low end of the
frequency spectrum. I play bass, and tend to focus on the bass and rhythm side
of songs. That extends to vocals. I can&amp;rsquo;t do histrionic screechy singers.
Nothing sets my soul at ease quite like a soft baritone.&lt;/p&gt;

&lt;p&gt;This is another song I used to sing to my kids as they fell asleep.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=2q9_ZEtuTR8&quot;&gt;Maybe Tomorrow&lt;/a&gt;&lt;/strong&gt; - Stereophonics&lt;/h3&gt;

&lt;p&gt;The beginning of the video for this song is a dirty lie. This song wasn&amp;rsquo;t
crafted by imperfect human hands. It was plucked, flawless, from some sonic vein
deep within the Earth.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=BiPLOmTp6IA&quot;&gt;Stop&lt;/a&gt;&lt;/strong&gt; - Black Rebel Motorcycle Club&lt;/h3&gt;

&lt;p&gt;Hanging out at Independent Bar opened one of the most fulfilling chapters of my
life. It was there that I met my friend Mikey, which led to us starting a band.
Playing music with others was a transcendent experience&amp;mdash;to hear four people
produce one single harmonious sound. To give birth to something better than we
could have made on our own. Being on stage is a bonus. Just to play is the
thing.&lt;/p&gt;

&lt;p&gt;My bandmates introduced me to a lot of great rock, including BRMC. I used to
listen to this track on the way to shows and by the time I got to the gig, that
bassline had me feeling like I could walk through a brick wall.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=MYYG1lAUntM&quot;&gt;Baby in Two&lt;/a&gt;&lt;/strong&gt; - Pernice Brothers&lt;/h3&gt;

&lt;p&gt;My drummer Shannon introduced me to Pernice Brothers. Our band days are over, we
live about three thousand miles apart, but he will always be my drummer and I
will always be his bassist. There&amp;rsquo;s a special kind of love that forms only
between two halves of a rhythm section and this album is the soundtrack to mine.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=S28tILqie1o&quot;&gt;Cupid&lt;/a&gt;&lt;/strong&gt; - Sam Cooke&lt;/h3&gt;

&lt;p&gt;God, did they know how to record back then. Take one of the world&amp;rsquo;s greatest
voices. Add beautiful, authentic reverb, and just enough tape saturation, and
you get a sound so rich I can practically taste it.&lt;/p&gt;

&lt;p&gt;But the technical merits are an aside. The real reason this is here is because
it marks the time when I met my wife. This song is inseparable from her,
from &lt;em&gt;us&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=L5dUsZ4Djd0&quot;&gt;Blue Ridge Mountains&lt;/a&gt;&lt;/strong&gt; - Fleet Foxes&lt;/h3&gt;

&lt;p&gt;By this time, I was burned out from eight years in the game industry. Tired of
the heat and &lt;em&gt;sameness&lt;/em&gt; Florida&amp;mdash;every month indistinguishable from the
previous, the days an unending blur of sunlight.&lt;/p&gt;

&lt;p&gt;My wife and I discovered the Pacific Northwest on a work trip. We played this
album non-stop during our honeymoon on the Olympic Peninsula, and by the end we
were ready to uproot and move. Back in Florida, during the months it took for me
to find work in Seattle, this record was a constant reminder of the promise
awaiting us out west.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=NDHY1D0tKRA&quot;&gt;I Will Follow You Into the Dark&lt;/a&gt;&lt;/strong&gt; - Death Cab for Cutie&lt;/h3&gt;

&lt;p&gt;There is a Seattle city ordinance that you must like Ben Gibbard.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=3mUfOs-CTCw&quot;&gt;Shooting Stars&lt;/a&gt;&lt;/strong&gt; - Bag Raiders&lt;/h3&gt;

&lt;p&gt;My love of disco and house naturally turned into a love of nu-disco. I don&amp;rsquo;t
know what&amp;rsquo;s going on in Australia, but there&amp;rsquo;s a whole pile of bands out of
Sydney and Melbourne that sound like they took everything I love about the 70s
and 80s, mashed it all together, and somehow made it sound fresh again.&lt;/p&gt;

&lt;p&gt;One of the joys of being a Dad is playing music with my kids. I get to choose
the songs that will form their subconscious musical memory. They love this
album, perhaps largely because I used to pick them up and dance with them in the
kitchen every time we played it. I hope when they are much older and hear this,
they still think of me.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=7HPMK9Uxq3I&quot;&gt;Elevate&lt;/a&gt;&lt;/strong&gt; - St. Lucia&lt;/h3&gt;

&lt;p&gt;Like I said, the 80s is new again. I won&amp;rsquo;t lie. Listening to music that apes a
genre that I still remember the first time it came around makes me feel pretty
old. That weird cringe I get when I see fashion come full circle and the young
folk start wearing stuff I still have jammed in the back of my closet.&lt;/p&gt;

&lt;p&gt;I try to ignore that twinge because, honestly, St. Lucia is fantastic. This
isn&amp;rsquo;t some ironic winking aping of the past (looking at you The Darkness and
Steel Panther). St. Lucia is a gushing love letter to everything great about
beachy 80s pop. It&amp;rsquo;s mai tais, sand between your toes, coconut sunscreen.
Endless summer and eternal youth.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ImKY6TZEyrI&quot;&gt;Fade Into You&lt;/a&gt;&lt;/strong&gt; - Mazzy Star&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;re nearing the end of the list, nearly through forty years of living and
listening. It&amp;rsquo;s been a long drive down a winding road, and the sun will be up
soon.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=xzQvGz6_fvA&quot;&gt;I&amp;rsquo;m on Fire&lt;/a&gt;&lt;/strong&gt; - Bruce Springsteen&lt;/h3&gt;

&lt;p&gt;Forty feels like all my younger selves are lost, receded far into the past. Yet,
at the same time, they still burn vibrantly alive inside, refusing to be
forgotten.&lt;/p&gt;</content>
  </entry>

  <entry>
    <id>http://journal.stuffwithstuff.com/2016/06/16/long-names-are-long</id>
    <link type="text/html" rel="alternate" href="http://journal.stuffwithstuff.com/2016/06/16/long-names-are-long/"/>
    <title>Long Names Are Long</title>
    <published>2016-06-16T07:00:00.000Z</published>
    <updated>2016-06-16T07:00:00.000Z</updated>
    <author>
      <name>Robert Nystrom</name>
      <uri>http://journal.stuffwithstuff.com/</uri>
    </author>
    <content type="html">&lt;p&gt;One smart thing Google does is rigorous code reviews. Every change, before you
can land it, gets reviewed in at least two ways. First, someone on the team does
a normal review to make sure the code does what it&amp;rsquo;s supposed to.&lt;/p&gt;

&lt;p&gt;But, then, there&amp;rsquo;s a second layer of review called &lt;em&gt;readability&lt;/em&gt;. It makes sure
the code is, well, readable: Is it easy to understand and maintain? Does it
follow the style and idioms of the language? Is it well-documented?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.dartlang.org/&quot;&gt;Dart&lt;/a&gt; usage inside Google is cranking up, so I&amp;rsquo;ve been doing a ton of these
kind of code reviews. As a language designer, it&amp;rsquo;s fascinating. I get a
firsthand view into how people use Dart, which is really useful for evolving the
language. I have a clearer picture of which mistakes are common and which
features are heavily used. I feel like an ethnographer journaling the lives of
natives.&lt;/p&gt;

&lt;p&gt;But, anyway, that&amp;rsquo;s not what this is about. Heck, it&amp;rsquo;s not even about Dart. What
I want to talk about is something I see in a lot of code that drives me up the
wall: &lt;strong&gt;identifiers that are too damn long.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yes, names can be too short. Back when C only required external identifiers to
be unique up to the first six characters; auto-complete hadn&amp;rsquo;t been invented;
and every keypress had to be made uphill, in the snow, both ways; it was a
problem. I&amp;rsquo;m glad we now live in a futuristic utopia where keyboard farts like
&lt;code&gt;p&lt;/code&gt;, &lt;code&gt;idxcrpm&lt;/code&gt;, and &lt;code&gt;x3&lt;/code&gt; are rare.&lt;/p&gt;

&lt;p&gt;But the pendulum has swung too far in the other direction. We shouldn&amp;rsquo;t be
Hemingway, but we don&amp;rsquo;t need to be Tennessee Williams either. Very &lt;em&gt;long&lt;/em&gt; names
also hurt the clarity of the code where they are used. Giant identifiers dwarf
the operations you&amp;rsquo;re performing on them, are hard to visually scan, and force
extra line breaks which interrupt the flow of the code.&lt;/p&gt;

&lt;p&gt;Long class names discourage users from declaring variables of that type, leading
to massive, gnarly nested expressions instead of hoisting things out to locals.
Long method names obscure their equally important argument lists. Long variables
are annoying to use repeatedly, leading to sprawling method chains or cascades.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve seen identifiers over 60 characters long. You could fit a haiku or a koan
in there (and likely enlighten the reader more than the actual chosen name did).
Fear not, I am here to help.&lt;/p&gt;

&lt;h2&gt;Choosing a Good Name&lt;/h2&gt;

&lt;p&gt;A name has two goals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It needs to be &lt;em&gt;clear&lt;/em&gt;: you need to know what the name refers to.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It needs to be &lt;em&gt;precise&lt;/em&gt;: you need to know what it does &lt;em&gt;not&lt;/em&gt; refer to.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After a name has accomplished those goals, any additional characters are dead
weight. Here&amp;rsquo;s some guidelines I use when I names things in my code:&lt;/p&gt;

&lt;h3&gt;1. Omit words that are obvious given a variable&amp;rsquo;s or parameter&amp;rsquo;s type&lt;/h3&gt;

&lt;p&gt;If your language has a static type system, users usually know the type of a
variable. Methods tend to be short, so even when looking at local variable whose
type was inferred, or in a code review or some place where static analysis isn&amp;rsquo;t
available, it rarely takes more than scanning a few lines to tell what type a
variable has.&lt;/p&gt;

&lt;p&gt;Given that, it&amp;rsquo;s redundant to put the type in the variable&amp;rsquo;s name. We have
rightfully abandoned &lt;a href=&quot;https://en.wikipedia.org/wiki/Hungarian_notation&quot;&gt;Hungarian notation&lt;/a&gt;. &lt;em&gt;Let it go.&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span class=&quot;c&quot;&gt;// Bad:&lt;/span&gt;
&lt;span class=&quot;t&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;nameString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;t&quot;&gt;DockableModelessWindow&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;dockableModelessWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Better:&lt;/span&gt;
&lt;span class=&quot;t&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;t&quot;&gt;DockableModelessWindow&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In particular, for collections, it&amp;rsquo;s almost always better to just use a plural
noun describing the &lt;em&gt;contents&lt;/em&gt; instead of a singular noun describing the
&lt;em&gt;collection&lt;/em&gt;. If the reader cares more about what&amp;rsquo;s &lt;em&gt;in&lt;/em&gt; the collection, the
name should reflect that.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span class=&quot;c&quot;&gt;// Bad:&lt;/span&gt;
&lt;span class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;t&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;holidayDateList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;t&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;t&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;employeeRoleHashMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Better:&lt;/span&gt;
&lt;span class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;t&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;holidays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;t&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;t&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;employeeRoles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This also applies to method names. The method name doesn&amp;rsquo;t need to describe its
parameters or their types&amp;mdash;the parameter list does that for you.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span class=&quot;c&quot;&gt;// Bad:&lt;/span&gt;
&lt;span class=&quot;i&quot;&gt;mergeTableCells&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;t&quot;&gt;TableCell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;cells&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;i&quot;&gt;sortEventsUsingComparator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;t&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;t&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;t&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;comparator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Better:&lt;/span&gt;
&lt;span class=&quot;i&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;t&quot;&gt;TableCell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;cells&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;i&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;t&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;t&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;comparator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This tends to make callsites read better:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span class=&quot;i&quot;&gt;mergeTableCells&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;tableCells&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;i&quot;&gt;sortEventsUsingComparator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;comparator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Is it just me, or is there an echo echo in here here?&lt;/p&gt;

&lt;h3&gt;2. Omit words that don&amp;rsquo;t disambiguate the name&lt;/h3&gt;

&lt;p&gt;Some people tend to cram everything they know about something into its name.
Remember, the name is an &lt;em&gt;identifier&lt;/em&gt;: it points you to &lt;em&gt;where&lt;/em&gt; it&amp;rsquo;s defined.
It&amp;rsquo;s not an exhaustive catalog of everything the reader could want to know about
the object. The definition does that. The name just gets them there.&lt;/p&gt;

&lt;p&gt;When I see an identifier like &lt;code&gt;recentlyUpdatedAnnualSalesBid&lt;/code&gt;, I ask:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Are there updated annual sales bids that aren&amp;rsquo;t recent?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Are there recent annual sales bids that were not updated?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Are there recently updated sales bids that aren&amp;rsquo;t annual?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Are there recently updated annual bids not related to sales?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Are there recently updated annual sales things that are not bids?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A &amp;ldquo;no&amp;rdquo; for any of these usually points to an extraneous word.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span class=&quot;c&quot;&gt;// Bad:&lt;/span&gt;
&lt;span class=&quot;i&quot;&gt;finalBattleMostDangerousBossMonster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;i&quot;&gt;weaklingFirstEncounterMonster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Better:&lt;/span&gt;
&lt;span class=&quot;i&quot;&gt;boss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;i&quot;&gt;firstMonster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course, you can go too far. Shortening that first example to &lt;code&gt;bid&lt;/code&gt; might be a
little &lt;em&gt;too&lt;/em&gt; vague. But, when in doubt, leave it out. You can always add
qualifiers later if the name proves to cause a collision or be imprecise but
it&amp;rsquo;s unlikely you&amp;rsquo;ll come back later to trim the fat.&lt;/p&gt;

&lt;h3&gt;3. Omit words that are known from the surrounding context&lt;/h3&gt;

&lt;p&gt;I can use &amp;ldquo;I&amp;rdquo; in this paragraph because you can see this post is by Bob Nystrom.
My dumb face is right up there. I don&amp;rsquo;t need to keep saying ‚ÄúBob Nystrom‚Äù
everywhere here (despite Bob Nystrom&amp;rsquo;s temptation to aggrandize Bob Nystrom by
doing so). Code works the same way. A method or field occurs in the context of a
class. A variable occurs in the context of a method. Take that context for
granted and don&amp;rsquo;t repeat it.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span class=&quot;c&quot;&gt;// Bad:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;AnnualHolidaySale&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;t&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;_annualSaleRebate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;promoteHolidaySale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Better:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;AnnualHolidaySale&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;t&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;_rebate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;promote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In practice, this means that the more deeply nested a name is, the more
surrounding context it has. That in turn means it usually has a shorter name.
The effect is that identifiers with shorter scopes have shorter names.&lt;/p&gt;

&lt;h3&gt;4. Omit words that don&amp;rsquo;t mean much of anything&lt;/h3&gt;

&lt;p&gt;I used to see this a lot in the game industry. Some people succumb to the
temptation to inflate their identifiers by adding Serious Business sounding
words. I guess it makes their code feel more important and, by extension, makes
&lt;em&gt;them&lt;/em&gt; feel more important.&lt;/p&gt;

&lt;p&gt;In many cases, the words carry no meaningful information. They&amp;rsquo;re just fluff or
jargon. Usual suspects include: &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;state&lt;/code&gt;, &lt;code&gt;amount&lt;/code&gt;, &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;manager&lt;/code&gt;,
&lt;code&gt;engine&lt;/code&gt;, &lt;code&gt;object&lt;/code&gt;, &lt;code&gt;entity&lt;/code&gt;, and &lt;code&gt;instance&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A good name paints a picture in the mind of the reader. Calling something a
&amp;ldquo;manager&amp;rdquo; doesn&amp;rsquo;t convey any image to the reader about what the thing does. Does
it do performance evaluations? Lean over your cubicle and ask for TPS reports?&lt;/p&gt;

&lt;p&gt;Ask yourself &amp;ldquo;Would this identifier mean the same thing if I removed the word?&amp;rdquo;
If so, the word doesn&amp;rsquo;t carry its weight. Vote if off the island.&lt;/p&gt;

&lt;h2&gt;Applying the Guidelines&amp;hellip; to Waffles&lt;/h2&gt;

&lt;p&gt;To give you a feel for how these rules work in practice, here&amp;rsquo;s an example that
breaks all of these rules. This contrived example is tragically close to real
code I&amp;rsquo;ve seen in reviews:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;DeliciousBelgianWaffleObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;garnishDeliciousBelgianWaffleWithStrawberryList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;t&quot;&gt;Strawberry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;strawberryList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We know from the type that it takes a list of strawberries (#1), so let&amp;rsquo;s cut
that out:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;DeliciousBelgianWaffleObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;garnishDeliciousBelgianWaffle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;t&quot;&gt;Strawberry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;strawberries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unless our program has foul-tasting Belgian waffles, or waffles of other
nationalities, we can drop those adjectives (#2):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;WaffleObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;garnishWaffle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;t&quot;&gt;Strawberry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;strawberries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The method is inside a &lt;code&gt;WaffleObject&lt;/code&gt;, so we know what it&amp;rsquo;s going to garnish
(#3):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;WaffleObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;garnish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;t&quot;&gt;Strawberry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;strawberries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Obviously it&amp;rsquo;s an object. Everything is an object. That&amp;rsquo;s kind of what
&amp;ldquo;object-oriented&amp;rdquo; means (#4):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Waffle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;garnish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;t&quot;&gt;Strawberry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;strawberries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There, much better.&lt;/p&gt;

&lt;p&gt;I think these are pretty simple guidelines. You may think it&amp;rsquo;s pointless to
worry about this stuff, but I believe that &lt;a href=&quot;/2009/06/05/naming-things-in-code/&quot;&gt;naming things&lt;/a&gt; is one of the most
fundamental tasks we do when programming. Names are the structure we impose on
the formless sea of bits that is computing.&lt;/p&gt;</content>
  </entry>
    

</feed>
